"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9636],{4501:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>p,default:()=>S,frontMatter:()=>y,metadata:()=>t,toc:()=>d});let t=JSON.parse('{"id":"java/JAVA-Encryption","title":"JAVA-\u52A0\u5BC6\u65B9\u5F0F","description":"\u522B\u7528MD5\u52A0\u5BC6\u5BC6\u7801\u4E86","source":"@site/docs/java/JAVA-Encryption.md","sourceDirName":"java","slug":"/java/JAVA-Encryption","permalink":"/mhuahe.com/docs/java/JAVA-Encryption","draft":false,"unlisted":false,"editUrl":"https://github.dev/mhuahe/mhuahe.com/blob/master-ts/docs/java/JAVA-Encryption.md","tags":[],"version":"current","lastUpdatedBy":"mhuahe","lastUpdatedAt":1729560714000,"frontMatter":{},"sidebar":"java","previous":{"title":"JAVA-ES","permalink":"/mhuahe.com/docs/java/JAVA-Elaticsearch"},"next":{"title":"JAVA-\u9519\u8BEF\u8BB0\u5F55","permalink":"/mhuahe.com/docs/java/JAVA-Error-Record"}}');var i=n(4848),a=n(8453);let c=n.p+"assets/images/Encryption-MD5-3a6cab52fadaf73d0680d4ad14cc0461.png";var s=n(9276);let o=n.p+"assets/images/Encryption-Snowflake-712f4526780ec25e3095a819fa880eae.png",y={},p="JAVA-\u52A0\u5BC6\u65B9\u5F0F",l={},d=[{value:"\u522B\u7528MD5\u52A0\u5BC6\u5BC6\u7801\u4E86",id:"\u522B\u7528md5\u52A0\u5BC6\u5BC6\u7801\u4E86",level:2},{value:"MD5",id:"md5",level:2},{value:"DES",id:"des",level:2},{value:"RSA",id:"rsa",level:2},{value:"IDEA",id:"idea",level:2},{value:"DSA",id:"dsa",level:2},{value:"AES",id:"aes",level:2},{value:"Elgamal",id:"elgamal",level:2},{value:"Base64",id:"base64",level:2},{value:"SHA",id:"sha",level:2},{value:"PKCS",id:"pkcs",level:2},{value:"ECDSA",id:"ecdsa",level:2},{value:"DH",id:"dh",level:2},{value:"PBE",id:"pbe",level:2},{value:"MAC",id:"mac",level:2},{value:"\u54C8\u5E0C\u7B97\u6CD5",id:"\u54C8\u5E0C\u7B97\u6CD5",level:2},{value:"\u79C1\u94A5\u516C\u94A5\u7B7E\u8BC1\u52A0\u5BC6",id:"\u79C1\u94A5\u516C\u94A5\u7B7E\u8BC1\u52A0\u5BC6",level:2},{value:"\u96EA\u82B1\u7B97\u6CD5",id:"\u96EA\u82B1\u7B97\u6CD5",level:2}];function u(r){let e={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...r.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"java-\u52A0\u5BC6\u65B9\u5F0F",children:"JAVA-\u52A0\u5BC6\u65B9\u5F0F"})}),"\n",(0,i.jsx)(e.h2,{id:"\u522B\u7528md5\u52A0\u5BC6\u5BC6\u7801\u4E86",children:"\u522B\u7528MD5\u52A0\u5BC6\u5BC6\u7801\u4E86"}),"\n",(0,i.jsx)(e.p,{children:"\u89E3\u91CA"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"MD \u7B97\u6CD5\u6709\u591A\u4E2A\u7248\u672C\uFF0C\u5305\u62EC MD2\u3001MD4\u3001MD5 \u7B49\uFF0C\u5176\u4E2D MD5 \u662F\u6700\u5E38\u7528\u7684\u7248\u672C\uFF0C\u5B83\u53EF\u4EE5\u751F\u6210\u4E00\u4E2A 128 \u4F4D\uFF0816 \u5B57\u8282\uFF09\u7684\u54C8\u5E0C\u503C\u3002\u4ECE\u5B89\u5168\u6027\u4E0A\u8BF4\uFF1AMD5 > MD4 > MD2\u3002\u9664\u4E86\u8FD9\u4E9B\u7248\u672C\uFF0C\u8FD8\u6709\u4E00\u4E9B\u57FA\u4E8E MD4 \u6216 MD5 \u6539\u8FDB\u7684\u7B97\u6CD5\uFF0C\u5982 RIPEMD\u3001HAVAL \u7B49\u3002\u5373\u4F7F\u662F\u6700\u5B89\u5168 MD \u7B97\u6CD5 MD5 \u4E5F\u5B58\u5728\u88AB\u7834\u89E3\u7684\u98CE\u9669\uFF0C\u653B\u51FB\u8005\u53EF\u4EE5\u901A\u8FC7\u66B4\u529B\u7834\u89E3\u6216\u5F69\u8679\u8868\u653B\u51FB\u7B49\u65B9\u5F0F\uFF0C\u627E\u5230\u4E0E\u539F\u59CB\u6570\u636E\u76F8\u540C\u7684\u54C8\u5E0C\u503C\uFF0C\u4ECE\u800C\u7834\u89E3\u6570\u636E\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4E3A\u4E86\u589E\u52A0\u7834\u89E3\u96BE\u5EA6\uFF0C\u901A\u5E38\u53EF\u4EE5\u9009\u62E9\u52A0\u76D0\u3002\u76D0\uFF08Salt\uFF09\u5728\u5BC6\u7801\u5B66\u4E2D\uFF0C\u662F\u6307\u901A\u8FC7\u5728\u5BC6\u7801\u4EFB\u610F\u56FA\u5B9A\u4F4D\u7F6E\u63D2\u5165\u7279\u5B9A\u7684\u5B57\u7B26\u4E32\uFF0C\u8BA9\u54C8\u5E0C\u540E\u7684\u7ED3\u679C\u548C\u4F7F\u7528\u539F\u59CB\u5BC6\u7801\u7684\u54C8\u5E0C\u7ED3\u679C\u4E0D\u76F8\u7B26\uFF0C\u8FD9\u79CD\u8FC7\u7A0B\u79F0\u4E4B\u4E3A\u201C\u52A0\u76D0\u201D\u3002\u52A0\u76D0\u4E4B\u540E\u5C31\u5B89\u5168\u4E86\u5417\uFF1F\u5E76\u4E0D\u4E00\u5B9A\uFF0C\u8FD9\u53EA\u662F\u589E\u52A0\u4E86\u7834\u89E3\u96BE\u5EA6\uFF0C\u4E0D\u4EE3\u8868\u65E0\u6CD5\u7834\u89E3\u3002\u800C\u4E14\uFF0CMD5 \u7B97\u6CD5\u672C\u8EAB\u5C31\u5B58\u5728\u5F31\u78B0\u649E\uFF08Collision\uFF09\u95EE\u9898\uFF0C\u5373\u591A\u4E2A\u4E0D\u540C\u7684\u8F93\u5165\u4EA7\u751F\u76F8\u540C\u7684 MD5 \u503C\u3002\u56E0\u6B64\uFF0C\u4E0D\u5EFA\u8BAE\u4F7F\u7528 MD5 \u52A0\u5BC6\u5BC6\u7801\uFF0C\u5373\u4F7F\u52A0\u76D0\u4E5F\u5B58\u5728\u5B89\u5168\u98CE\u9669\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u66FF\u6362\u65B9\u6848"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.p,{children:["\u4E3A\u4E86\u589E\u52A0\u5B89\u5168\u6027\uFF0C\u53EF\u4EE5\u4F7F\u7528",(0,i.jsx)(e.strong,{children:"\u5B89\u5168\u6027\u8F83\u9AD8\u7684\u52A0\u5BC6\u54C8\u5E0C\u7B97\u6CD5+ Salt\uFF08\u76D0\uFF09"}),"\uFF08\u4F8B\u5982 SHA2\u3001SHA3\u3001SM3\uFF0C\u66F4\u9AD8\u7684\u5B89\u5168\u6027\u66F4\u5F3A\u7684\u6297\u78B0\u649E\u6027\uFF09\u3002\u5EFA\u8BAE\u6BCF\u4E2A\u7528\u6237\u7684 Salt \u503C\u4E0D\u540C\uFF08\u6700\u597D\u5BF9\u4E0D\u540C\u7528\u6237\u7684\u5BC6\u7801\u968F\u673A\u751F\u6210\u4E0D\u540C\u7684 Salt\uFF0CSalt \u5E93\u548C\u5BC6\u7801\u5E93\u5206\u79BB\u5F00\uFF09\uFF0C\u8FD9\u6837\u5C31\u6CA1\u529E\u6CD5\u7528\u5F69\u8679\u8868\u8FDB\u884C\u6279\u91CF\u7834\u89E3\u3002\u4E0D\u8FC7\uFF0C\u8FD9\u4E0D\u4EE3\u8868\u6CA1\u6709\u7834\u89E3\u98CE\u9669\u4E86\uFF08\u5229\u7528\u5BC6\u7801\u7834\u89E3\u786C\u4EF6\uFF0C\u6211\u4EEC\u53EF\u4EE5\u5728\u4E00\u79D2\u949F\u5185\u8FDB\u884C\u6570\u5341\u4EBF\u6B21\u7684\u54C8\u5E0C\u8BA1\u7B97\uFF09\u3002"]}),"\n",(0,i.jsxs)(e.p,{children:["\u5B89\u5168\u6027\u66F4\u9AD8\u7684\u4E00\u79CD\u65B9\u6848\u662F\u4F7F\u7528 ",(0,i.jsx)(e.strong,{children:"\u5BC6\u94A5\u6D3E\u751F\u7B97\u6CD5\uFF08Key Derivation Function\uFF0C\u7B80\u79F0 KDF\uFF0C\u4E5F\u79F0\u4E3A\u5BC6\u7801\u54C8\u5E0C\u7B97\u6CD5\uFF09"}),"\u3002\u76F8\u6BD4\u5176\u4ED6\u52A0\u5BC6\u54C8\u5E0C\u7B97\u6CD5\uFF0CKDF \u5177\u6709\u4E00\u4E2A\u72EC\u7279\u5C5E\u6027\u2014\u2014\u8BA1\u7B97\u901F\u5EA6\u5F88\u6162\uFF0C\u800C\u4E14\u4ECE\u8BBE\u8BA1\u4E0A\u5C31\u4F7F\u5176\u8BA1\u7B97\u901F\u5EA6\u96BE\u4EE5\u63D0\u5347\uFF0C\u6240\u4EE5 KDF \u4E5F\u88AB\u79F0\u4E3A ",(0,i.jsx)(e.strong,{children:"\u6162\u54C8\u5E0C\u7B97\u6CD5"})," \u3002\u8FD9\u4E2A\u6162\u76F8\u6BD4\u4E8E\u5176\u5E26\u6765\u7684\u5B89\u5168\u6027\u6765\u8BF4\u662F\u53EF\u4EE5\u63A5\u53D7\u7684\uFF0C\u6BD5\u7ADF\u4E3B\u8981\u4E5F\u662F\u5728\u767B\u5F55\u65F6\u6267\u884C\u4E00\u6B21\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u5E38\u89C1\u7684 KDF \u7B97\u6CD5\u4E3B\u8981\u6709\uFF08\u5B89\u5168\u7A0B\u5EA6\u4F9D\u6B21\u9012\u589E\uFF09\uFF1A"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html",children:"\u5177\u4F53\u4EE3\u7801\u5B9E\u73B0"})}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"PBKDF2\uFF1A\u5176\u6838\u5FC3\u662F\u5BF9 HMAC \u8FDB\u884C\u591A\u6B21\u8FED\u4EE3\u4EE5\u589E\u52A0\u7834\u89E3\u96BE\u5EA6\u3002PBKDF2 \u5BF9\u5185\u5B58\u7684\u8981\u6C42\u8F83\u4F4E\uFF0C\u5E76\u4E0D\u80FD\u62B5\u6297\u5BC6\u7801\u7834\u89E3\u786C\u4EF6\uFF08\u5982 GPU\u3001ASIC\u3001FPGA\uFF09\u653B\u51FB\u3002\u8FD9\u4E2A KDF \u7B97\u6CD5\u6BD4\u8F83\u8001\u4E86\uFF0C\u76EE\u524D\u5DF2\u7ECF\u4E0D\u63A8\u8350\u4F7F\u7528\u3002"}),"\n",(0,i.jsx)(e.li,{children:"Bcrypt\uFF1A\u4E00\u79CD\u57FA\u4E8E Blowfish \u52A0\u5BC6\u7B97\u6CD5\u7684\u5BC6\u7801\u54C8\u5E0C\u7B97\u6CD5\uFF0C\u4E13\u95E8\u4E3A\u5BC6\u7801\u52A0\u5BC6\u800C\u8BBE\u8BA1\uFF0C\u5B89\u5168\u6027\u9AD8\u4E8E PBKDF2\u3002Bcrypt \u5BF9\u5185\u5B58\u7684\u8981\u6C42\u8F83\u4F4E\uFF0C\u540C\u6837\u4E0D\u80FD\u62B5\u6297\u5BC6\u7801\u7834\u89E3\u786C\u4EF6\u653B\u51FB\u3002"}),"\n",(0,i.jsx)(e.li,{children:"Scrypt\uFF1A\u76F8\u6BD4\u4E8E PBKDF2 \u548C Bcrypt\uFF0C\u5176\u5360\u7528\u7684\u5185\u5B58\u66F4\u591A\uFF0C\u5B89\u5168\u6027\u4E5F\u8981\u66F4\u9AD8\u3002\u5B83\u8FD8\u53EF\u4EE5\u901A\u8FC7\u8C03\u6574\u5185\u5B58\u548C CPU \u7684\u4F7F\u7528\u91CF\u6765\u589E\u52A0\u7834\u89E3\u7684\u96BE\u5EA6\u3002"}),"\n",(0,i.jsx)(e.li,{children:"Argon2\uFF1A\u76EE\u524D\u6700\u5F3A\u7684\u5BC6\u7801 Hash \u7B97\u6CD5\uFF0C\u5728 2015 \u5E74\u8D62\u5F97\u4E86\u5BC6\u7801 Hash \u7ADE\u8D5B\u3002\u548C Scrypt \u4E00\u6837\uFF0CArgon2 \u540C\u6837\u9700\u8981\u5927\u91CF\u7684\u5185\u5B58\u3002\u4E8C\u8005\u7EFC\u5408\u4F7F\u7528\u52A0\u76D0\u3001\u591A\u6B21\u8FED\u4EE3\u3001\u5927\u91CF\u6D88\u8017 CPU \u65F6\u95F4\u548C\u5185\u5B58\u8D44\u6E90\u7B49\u624B\u6BB5\uFF0C\u5927\u5927\u63D0\u5347\u4E86\u5BF9\u6297\u5BC6\u7801\u7834\u89E3\u786C\u4EF6\u7684\u80FD\u529B\u3002"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u5EFA\u8BAE\u65B9\u6848"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\u5BF9\u4E8E\u7EDD\u5927\u90E8\u5206\u9879\u76EE\u6765\u8BF4\uFF0C Bcrypt \u5C31\u8DB3\u591F\u4E86\uFF0C\u867D\u7136\u5B83\u7684\u5B89\u5168\u6027\u6BD4\u4E0D\u4E0A Scrypt \u548C Argon2\uFF0C\u4F46\u7EFC\u5408\u8D77\u6765\u6027\u4EF7\u6BD4\u8F83\u9AD8"}),"\n",(0,i.jsx)(e.p,{children:"Bcrypt \u91C7\u7528\u4E86 salt\uFF08\u76D0\uFF09 \u548C cost\uFF08\u6210\u672C\uFF09 \u4E24\u79CD\u673A\u5236\uFF0C\u5B83\u53EF\u4EE5\u6709\u6548\u5730\u9632\u6B62\u5F69\u8679\u8868\u653B\u51FB\u548C\u66B4\u529B\u7834\u89E3\u653B\u51FB\uFF0C\u4ECE\u800C\u4FDD\u8BC1\u5BC6\u7801\u7684\u5B89\u5168\u6027\u3002\u52A0 salt \u53EF\u4EE5\u9632\u6B62\u5F69\u8679\u8868\u653B\u51FB\uFF0C\u4E5F\u5C31\u662F\u8BF4\uFF0C\u4F7F\u7528 Bcrypt \u52A0\u5BC6\u5BC6\u7801\u65F6\u5DF2\u7ECF\u5305\u542B\u4E86\u4E00\u4E2A\u968F\u673A\u52A0\u76D0\u7684\u8FC7\u7A0B\uFF0C\u4E0D\u9700\u8981\u989D\u5916\u52A0\u76D0\u4E86\u3002"}),"\n",(0,i.jsx)(e.p,{children:"cost \u53C8\u79F0\u4E3A\u5DE5\u4F5C\u56E0\u5B50\uFF0C\u5B9A\u4E49\u4E86\u54C8\u5E0C\u8BA1\u7B97\u7684\u590D\u6742\u5EA6\u3002\u6210\u672C\u8D8A\u9AD8\uFF0C\u8BA1\u7B97\u6240\u9700\u7684\u65F6\u95F4\u548C\u8D44\u6E90\u5C31\u8D8A\u591A\uFF0C\u8FD9\u4F7F\u5F97\u66B4\u529B\u7834\u89E3\u653B\u51FB\u53D8\u5F97\u66F4\u52A0\u56F0\u96BE\u3002\u5B9E\u9645\u9879\u76EE\u4E2D\uFF0C\u53EF\u4EE5\u6839\u636E\u7CFB\u7EDF\u7684\u6027\u80FD\u548C\u5B89\u5168\u9700\u6C42\u8C03\u6574 cost\u3002"}),"\n",(0,i.jsxs)(e.p,{children:["Spring Security \u63D0\u4F9B\u7684",(0,i.jsx)(e.code,{children:"BCryptPasswordEncoder"})," \u5DE5\u4F5C\u56E0\u5B50\u8303\u56F4\u5728 4-31 \uFF0C\u9ED8\u8BA4\u662F 10"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"\r\n /**\r\n  * @param strength the log rounds to use, between 4 and 31\r\n  */\r\n public BCryptPasswordEncoder(int strength) {\r\n  this(strength, null);\r\n }\n"})}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"md5",children:"MD5"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"https://blog.csdn.net/yb546822612/article/details/103953034",children:"https://blog.csdn.net/yb546822612/article/details/103953034"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"1.MD5\u52A0\u5BC6\r\n\u52A0\u5BC6\u540E\u7684\u4F4D\u6570\u5206\u4E3A16\u4F4D\u548C32\u4F4D\r\n16\u4F4D\u5B9E\u9645\u4E3A32\u4F4D\u4E2D\u53D69-24\r\nString md5_16 = md5_32.substring(8, 24);\r\nJava \u4E2D MD5 \u52A0\u5BC6\u7684\u7ED3\u679C\u9ED8\u8BA4\u662F32\u4F4D\u5C0F\u5199\u3002\n"})}),"\n","\n",(0,i.jsx)("img",{src:c,alt:"Encryption-MD5",width:"50%"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"1.MD5\u52A0\u5BC6\u7B97\u6CD5(\u7ECF\u5E38\u4F7F\u7528MD5+salt\u4F5C\u4E3A\u7528\u6237\u5BC6\u7801\u52A0\u5BC6\u6216MD5\u52A0\u5BC6\u540E\u518D\u4F7F\u7528MD5\u52A0\u5BC6)\r\nMD5\u7684\u5168\u79F0\u662FMessage-Digest Algorithm 5\uFF0CMD5\u53EF\u4EE5\u5C06\u4EFB\u610F\u957F\u5EA6\u7684\u201C\u5B57\u8282\u4E32\u201D\u53D8\u6362\u6210\u2F00\u4E2A128bit\u7684\u2F24\u6574\u6570\uFF0C\u5E76\u4E14\u5B83\u662F\u2F00\u4E2A\u4E0D\u53EF\u9006\u7684\u5B57\u7B26\u4E32\u53D8\u6362\u7B97\u6CD5\uFF0C\u6362\u53E5\u8BDD\u8BF4\u662F\uFF0C\u5373\u4F7F\u4F60\u770B\u5230\u6E90\u7A0B\u5E8F\u548C\u7B97\u6CD5\u63CF\u8FF0\uFF0C\u4E5F\u2F46\u6CD5\u5C06\u2F00\u4E2AMD5\u7684\u503C\u53D8\u6362\u56DE\u539F\u59CB\u7684\u5B57\u7B26\u4E32\uFF0C\u4ECE\u6570\u5B66\u539F\u7406\u4E0A\u8BF4\uFF0C\u662F\u56E0\u4E3A\r\n\u539F\u59CB\u7684\u5B57\u7B26\u4E32\u6709\u2F46\u7A77\u591A\u4E2A\uFF0C\u8FD9\u6709\u70B9\u8C61\u4E0D\u5B58\u5728\u53CD\u51FD\u6570\u7684\u6570\u5B66\u51FD\u6570\u3002\r\n2004\u5E74\uFF0C\u8BC1\u5B9EMD5\u7B97\u6CD5\u65E0\u6CD5\u9632\u6B62\u78B0\u649E\uFF08collision\uFF09(\u4E0D\u540C\u7684\u503C\u52A0\u5BC6\u540E\u751F\u6210\u76F8\u540C\u7684\u5B57\u7B26\u4E32)\uFF0C\u56E0\u6B64\u4E0D\u9002\u7528\u4E8E\u5B89\u5168\u6027\u8BA4\u8BC1\uFF0C\u5982SSL\u516C\u5F00\u5BC6\u94A5\u8BA4\u8BC1\u6216\u662F\u6570\u5B57\u7B7E\u540D\u7B49\u7528\u9014\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.Security;\r\nimport org.apache.commons.codec.binary.Hex;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.bouncycastle.crypto.Digest;\r\nimport org.bouncycastle.crypto.digests.MD2Digest;\r\nimport org.bouncycastle.crypto.digests.MD5Digest;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class MDUtil {\r\n\r\n    /**\r\n     * MD5\u52A0\u5BC6\uFF0C\u65B9\u5F0F1\r\n     * @param pwd\r\n     * @return\r\n     */\r\n    public static String commonsCodecMd5(String pwd) {\r\n        return DigestUtils.md5Hex(pwd.getBytes());\r\n    }\r\n    public static String commonsCodecMd2(String pwd) {\r\n        return DigestUtils.md2Hex(pwd.getBytes());\r\n    }\r\n\r\n    /**\r\n     * MD5\u52A0\u5BC6\uFF0C\u65B9\u5F0F2\r\n     * \r\n     * @param pwd\r\n     * @return\r\n     */\r\n    public static String jdkMd5(String pwd) {\r\n        byte[] message = null;\r\n        message = pwd.getBytes();\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("MD5");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        byte[] encrypwd = md.digest(message);\r\n        String md5code = new BigInteger(1, encrypwd).toString(16);\r\n        for (int i = 0; i < 32 - md5code.length(); i++) {\r\n            md5code = "0" + md5code;\r\n        }\r\n        return md5code;\r\n    }\r\n    \r\n    public static String jdkMd2(String pwd) {\r\n        byte[] message = null;\r\n        message = pwd.getBytes();\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("md2");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        byte[] encrypwd = md.digest(message);\r\n        String md5code = Hex.encodeHexString(encrypwd);\r\n        for (int i = 0; i < 32 - md5code.length(); i++) {\r\n            md5code = "0" + md5code;\r\n        }\r\n        return md5code;\r\n    }\r\n    \r\n     /**\r\n      * Bouncy Castle\u5B9E\u73B0MD4\u52A0\u5BC6 \r\n      */\r\n     public static String bouncyCastleMD4(String src) {\r\n         /*\u901A\u8FC7\u8FD9\u79CD\u65B9\u5F0F\u7ED9JDK\u52A8\u6001\u6DFB\u52A0\u4E00\u4E2Aprovider,\u5C31\u53EF\u4EE5\u901A\u8FC7\u8FD9\u79CD\u65B9\u5F0F\u83B7\u5F97JDK\u672C\u8EAB\u4E0D\u652F\u6301\u7684MD4\u4E86*/\r\n         Security.addProvider(new BouncyCastleProvider());\r\n         MessageDigest md = null;\r\n         try {\r\n            md = MessageDigest.getInstance("md4");\r\n         } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n         }\r\n         byte[] md4Bytes = md.digest(src.getBytes());\r\n         return new String(org.bouncycastle.util.encoders.Hex.encode(md4Bytes));\r\n     }\r\n     \r\n     /** \r\n      * Bouncy Castle\u5B9E\u73B0MD5\u52A0\u5BC6 \r\n      */\r\n     public static String bouncyCastleMD5(String src){\r\n         Digest digest = new MD5Digest();\r\n         digest.update(src.getBytes(), 0, src.getBytes().length);\r\n         byte[]md5Bytes = new byte[digest.getDigestSize()];\r\n         digest.doFinal(md5Bytes, 0);\r\n         return new String(org.bouncycastle.util.encoders.Hex.encode(md5Bytes));\r\n     }\r\n     \r\n     /** \r\n      * Bouncy Castle\u5B9E\u73B0MD2\u52A0\u5BC6 \r\n      */\r\n     public static String bouncyCastleMD2(String src){\r\n         Digest digest = new MD2Digest();\r\n         digest.update(src.getBytes(), 0, src.getBytes().length);\r\n         byte[]md2Bytes = new byte[digest.getDigestSize()];\r\n         digest.doFinal(md2Bytes, 0);\r\n         return new String(org.bouncycastle.util.encoders.Hex.encode(md2Bytes));\r\n     }\r\n\r\n    /**\r\n     *  \u53EF\u9006\u7684\u52A0\u5BC6\u7B97\u6CD5\r\n     * @param inStr\r\n     * @return\r\n     */\r\n    public static String KL(String inStr) {\r\n        char[] a = inStr.toCharArray();\r\n        for (int i = 0; i < a.length; i++) {\r\n            a[i] = (char) (a[i] ^ \'t\');\r\n        }\r\n        String s = new String(a);\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     *  \u52A0\u5BC6\u540E\u89E3\u5BC6\r\n     * @param inStr\r\n     * @return\r\n     */\r\n    public static String JM(String inStr) {\r\n        char[] a = inStr.toCharArray();\r\n        for (int i = 0; i < a.length; i++) {\r\n            a[i] = (char) (a[i] ^ \'t\');\r\n        }\r\n        String k = new String(a);\r\n        return k;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void md5(){\r\n	String str = "md5";\r\n	//Java\u539F\u751F\r\n	byte[] digest = null;\r\n	try {\r\n        MessageDigest md5 = MessageDigest.getInstance("md5");\r\n        digest  = md5.digest(str.getBytes(StandardCharsets.UTF_8));\r\n        //16\u662F\u8868\u793A\u8F6C\u6362\u4E3A16\u8FDB\u5236\u6570\r\n        String md5StrJava = new BigInteger(1, digest).toString(16);\r\n        System.out.println(md5StrJava);\r\n	} catch (NoSuchAlgorithmException e) {\r\n        e.printStackTrace();\r\n	}\r\n	//spring\u81EA\u5E26\u5DE5\u5177\u7C7B\r\n	String md5StrSpring = DigestUtils.md5DigestAsHex(str.getBytes());\r\n	System.out.println(md5StrSpring);\r\n}\r\n@Test\r\npublic void md() {\r\n	String inStr = "000000";\r\n	System.out.println("\u539F\u59CB\u5B57\u7B26\u4E32\uFF1A"+inStr);\r\n	System.out.println("MD2\u52A0\u5BC6\uFF1A" + MDUtil.jdkMd2(inStr));\r\n	System.out.println("MD2\u52A0\u5BC6\uFF1A" + MDUtil.commonsCodecMd2(inStr));\r\n	System.out.println("MD2\u52A0\u5BC6\uFF1A" + MDUtil.bouncyCastleMD2(inStr));\r\n	//670b14728ad9902aecba32e22fa4f6bd  32\u4F4D \r\n	System.out.println("MD4\u52A0\u5BC6\uFF1A" + MDUtil.bouncyCastleMD4(inStr));\r\n	//bf85aaf547303397450fbc8ede0ec3a5  32\u4F4D \r\n	System.out.println("MD5\u52A0\u5BC6\uFF1A" + MDUtil.jdkMd5(inStr));\r\n	System.out.println("MD5\u52A0\u5BC6\uFF1A" + MDUtil.commonsCodecMd5(inStr));\r\n	System.out.println("MD5\u52A0\u5BC6\uFF1A" + MDUtil.bouncyCastleMD5(inStr));\r\n	//670b14728ad9902aecba32e22fa4f6bd  32\u4F4D\r\n	String encrypMode = MDUtil.jdkMd5(inStr);\r\n	System.out.println("MD5\u540E\u518D\u52A0\u5BC6\uFF1A" + MDUtil.KL(encrypMode));\r\n	System.out.println("\u89E3\u5BC6\u4E3AMD5\u540E\u7684\uFF1A" + MDUtil.JM(MDUtil.KL(encrypMode)));\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"des",children:"DES"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"2. DES\u52A0\u5BC6\u7B97\u6CD5--3DES--AES\r\nDES\u5168\u79F0\u4E3AData Encryption Standard\uFF0C\u5373\u6570\u636E\u52A0\u5BC6\u6807\u51C6\uFF0C\u662F\u2F00\u79CD\u4F7F\u2F64\u5BC6\u94A5\u52A0\u5BC6\u7684\u5757\u7B97\u6CD5\uFF0C DES\u7B97\u6CD5\u7684\u2F0A\u2F1D\u53C2\u6570\u6709\u4E09\u4E2A\uFF1AKey\u3001Data\u3001Mode\u3002\r\nKey\u4E3A7\u4E2A\u5B57\u8282\u517156\u4F4D,\u662FDES\u7B97\u6CD5\u7684\u2F2F\u4F5C\u5BC6\u94A5\u3002\r\nData\u4E3A8\u4E2A\u5B57\u828264\u4F4D\uFF0C\u662F\u8981\u88AB\u52A0\u5BC6\u6216\u88AB\u89E3\u5BC6\u7684\u6570\u636E\u3002\r\nMode\u4E3ADES\u7684\u5DE5\u4F5C\u65B9\u5F0F,\u6709\u4E24\u79CD:\u52A0\u5BC6\u6216\u89E3\u5BC6\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.CipherInputStream;\r\nimport javax.crypto.CipherOutputStream;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.DESKeySpec;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport java.io.*;\r\nimport java.security.Key;\r\nimport java.util.Base64;\r\n\r\npublic class DESUtil {\r\n \r\n    /**\r\n     * \u504F\u79FB\u53D8\u91CF\uFF0C\u56FA\u5B9A\u53608\u4F4D\u5B57\u8282\r\n     */\r\n    private final static String IV_PARAMETER = "12345678";\r\n    /**\r\n     * \u5BC6\u94A5\u7B97\u6CD5\r\n     */\r\n    private static final String ALGORITHM = "DES";\r\n    /**\r\n     * \u52A0\u5BC6/\u89E3\u5BC6\u7B97\u6CD5-\u5DE5\u4F5C\u6A21\u5F0F-\u586B\u5145\u6A21\u5F0F\r\n     */\r\n    private static final String CIPHER_ALGORITHM = "DES/CBC/PKCS5Padding";\r\n    /**\r\n     * \u9ED8\u8BA4\u7F16\u7801\r\n     */\r\n    private static final String CHARSET = "utf-8";\r\n \r\n    /**\r\n     * \u751F\u6210key\r\n     *\r\n     * @param password\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static Key generateKey(String password) throws Exception {\r\n        DESKeySpec dks = new DESKeySpec(password.getBytes(CHARSET));\r\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\r\n        return keyFactory.generateSecret(dks);\r\n    }\r\n \r\n \r\n    /**\r\n     * DES\u52A0\u5BC6\u5B57\u7B26\u4E32\r\n     *\r\n     * @param password \u52A0\u5BC6\u5BC6\u7801\uFF0C\u957F\u5EA6\u4E0D\u80FD\u591F\u5C0F\u4E8E8\u4F4D\r\n     * @param data \u5F85\u52A0\u5BC6\u5B57\u7B26\u4E32\r\n     * @return \u52A0\u5BC6\u540E\u5185\u5BB9\r\n     */\r\n    public static String encrypt(String password, String data) {\r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52A0\u5BC6\u5931\u8D25\uFF0Ckey\u4E0D\u80FD\u5C0F\u4E8E8\u4F4D");\r\n        }\r\n        if (data == null) {\r\n            return null;\r\n        }\r\n        try {\r\n            Key secretKey = generateKey(password);\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\r\n            byte[] bytes = cipher.doFinal(data.getBytes(CHARSET));\r\n \r\n            //JDK1.8\u53CA\u4EE5\u4E0A\u53EF\u76F4\u63A5\u4F7F\u7528Base64\uFF0CJDK1.7\u53CA\u4EE5\u4E0B\u53EF\u4EE5\u4F7F\u7528BASE64Encoder\r\n            //Android\u5E73\u53F0\u53EF\u4EE5\u4F7F\u7528android.util.Base64\r\n            return new String(Base64.getEncoder().encode(bytes));\r\n \r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return data;\r\n        }\r\n    }\r\n \r\n    /**\r\n     * DES\u89E3\u5BC6\u5B57\u7B26\u4E32\r\n     *\r\n     * @param password \u89E3\u5BC6\u5BC6\u7801\uFF0C\u957F\u5EA6\u4E0D\u80FD\u591F\u5C0F\u4E8E8\u4F4D\r\n     * @param data \u5F85\u89E3\u5BC6\u5B57\u7B26\u4E32\r\n     * @return \u89E3\u5BC6\u540E\u5185\u5BB9\r\n     */\r\n    public static String decrypt(String password, String data) {\r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52A0\u5BC6\u5931\u8D25\uFF0Ckey\u4E0D\u80FD\u5C0F\u4E8E8\u4F4D");\r\n        }\r\n        if (data == null) {\r\n            return null;\r\n        }\r\n        try {\r\n            Key secretKey = generateKey(password);\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\r\n            return new String(cipher.doFinal(Base64.getDecoder().decode(data.getBytes(CHARSET))), CHARSET);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return data;\r\n        }\r\n    }\r\n \r\n    /**\r\n     * DES\u52A0\u5BC6\u6587\u4EF6\r\n     *\r\n     * @param srcFile  \u5F85\u52A0\u5BC6\u7684\u6587\u4EF6\r\n     * @param destFile \u52A0\u5BC6\u540E\u5B58\u653E\u7684\u6587\u4EF6\u8DEF\u5F84\r\n     * @return \u52A0\u5BC6\u540E\u7684\u6587\u4EF6\u8DEF\u5F84\r\n     */\r\n    public static String encryptFile(String password, String srcFile, String destFile) {\r\n \r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52A0\u5BC6\u5931\u8D25\uFF0Ckey\u4E0D\u80FD\u5C0F\u4E8E8\u4F4D");\r\n        }\r\n        try {\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            cipher.init(Cipher.ENCRYPT_MODE, generateKey(password), iv);\r\n            InputStream is = new FileInputStream(srcFile);\r\n            OutputStream out = new FileOutputStream(destFile);\r\n            CipherInputStream cis = new CipherInputStream(is, cipher);\r\n            byte[] buffer = new byte[1024];\r\n            int r;\r\n            while ((r = cis.read(buffer)) > 0) {\r\n                out.write(buffer, 0, r);\r\n            }\r\n            cis.close();\r\n            is.close();\r\n            out.close();\r\n            return destFile;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /**\r\n     * DES\u89E3\u5BC6\u6587\u4EF6\r\n     *\r\n     * @param srcFile  \u5DF2\u52A0\u5BC6\u7684\u6587\u4EF6\r\n     * @param destFile \u89E3\u5BC6\u540E\u5B58\u653E\u7684\u6587\u4EF6\u8DEF\u5F84\r\n     * @return \u89E3\u5BC6\u540E\u7684\u6587\u4EF6\u8DEF\u5F84\r\n     */\r\n    public static String decryptFile(String password, String srcFile, String destFile) {\r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52A0\u5BC6\u5931\u8D25\uFF0Ckey\u4E0D\u80FD\u5C0F\u4E8E8\u4F4D");\r\n        }\r\n        try {\r\n            File file = new File(destFile);\r\n            if (!file.exists()) {\r\n                file.getParentFile().mkdirs();\r\n                file.createNewFile();\r\n            }\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            cipher.init(Cipher.DECRYPT_MODE, generateKey(password), iv);\r\n            InputStream is = new FileInputStream(srcFile);\r\n            OutputStream out = new FileOutputStream(destFile);\r\n            CipherOutputStream cos = new CipherOutputStream(out, cipher);\r\n            byte[] buffer = new byte[1024];\r\n            int r;\r\n            while ((r = is.read(buffer)) >= 0) {\r\n                cos.write(buffer, 0, r);\r\n            }\r\n            cos.close();\r\n            is.close();\r\n            out.close();\r\n            return destFile;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyGenerator;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityDES {\r\n    \r\n    public static String DES_MODE_JDK = "jdk";\r\n    public static String DES_MODE_BC = "bouncyCastle";\r\n    private Key key;\r\n\r\n    //\u5355\u4F8B\u6A21\u5F0F\r\n    private static SecurityDES securityDES;\r\n    public static SecurityDES getInstance(String password, String succurityMode) {\r\n        if(securityDES == null) {\r\n            securityDES = new SecurityDES(password, succurityMode);\r\n        }\r\n        return securityDES;\r\n    }\r\n    \r\n    private SecurityDES(String password, String succurityMode)  {\r\n        try{\r\n            KeyGenerator generator;\r\n            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");\r\n            secureRandom.setSeed(password.getBytes());\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(DES_MODE_BC, succurityMode)) {\r\n                Security.addProvider(new BouncyCastleProvider());//\u589E\u52A0provider\r\n                generator = KeyGenerator.getInstance("DES", "BC");\r\n                generator.init(56, secureRandom);\r\n                generator.getProvider();\r\n            }else {\r\n                generator = KeyGenerator.getInstance("DES");\r\n                generator.init(56, secureRandom);\r\n            }\r\n            key = generator.generateKey();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch (Exception e) { \r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void des() {\r\n	String src = "\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\uFF0Cobject-oriented\uFF01@#*5"; // \u9700\u8981\u52A0\u5BC6\u7684\u539F\u59CB\u5B57\u7B26\u4E32\r\n	String password = "123456";\r\n	SecurityDES securityJdkDES = SecurityDES.getInstance(password, SecurityDES.DES_MODE_JDK);\r\n	byte[] encodeJdkDES = securityJdkDES.encrypt(src.getBytes());\r\n	System.out.println("JDK DES\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeJdkDES));\r\n	byte[] decodeJdkDES = securityJdkDES.decrypt(encodeJdkDES);\r\n	System.out.println("JDK DES\u89E3\u5BC6\uFF1A" + new String(decodeJdkDES));\r\n	SecurityDES securityBcDES = SecurityDES.getInstance(password, SecurityDES.DES_MODE_BC);\r\n	byte[] encodeBcDES = securityBcDES.encrypt(src.getBytes());\r\n	System.out.println("bouncyCastle DES\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeBcDES));\r\n	byte[] decodeBcDES = securityBcDES.decrypt(encodeBcDES);\r\n	System.out.println("bouncyCastle DES\u89E3\u5BC6\uFF1A" + new String(decodeBcDES));\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.DESedeKeySpec;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityDES3 {\r\n    \r\n    public static String DES3_MODE_JDK = "jdk";\r\n    public static String DES3_MODE_BC = "bouncyCastle";\r\n    private Key key;\r\n    \r\n    //\u5355\u4F8B\u6A21\u5F0F\r\n    private static SecurityDES3 securityDES3;\r\n    public static SecurityDES3 getInstance(String password, String succurityMode) {\r\n        if(securityDES3 == null) {\r\n            securityDES3 = new SecurityDES3(password, succurityMode);\r\n        }\r\n        return securityDES3;\r\n    }\r\n    \r\n    private SecurityDES3(String password, String succurityMode)  {\r\n        try{\r\n            //1.\u751F\u6210key\r\n            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");\r\n            secureRandom.setSeed(password.getBytes());\r\n            KeyGenerator keyGenerator;\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(DES3_MODE_BC, succurityMode)) {\r\n                 Security.addProvider(new BouncyCastleProvider());\r\n                 keyGenerator = KeyGenerator.getInstance("desede", "BC");\r\n            }else {\r\n                keyGenerator = KeyGenerator.getInstance("desede");\r\n            }\r\n            keyGenerator.init(168, secureRandom);//\u521D\u59CB\u5316key\u7684\u957F\u5EA6\uFF0C\u53EA\u80FD\u662F128\uFF0C\r\n            SecretKey secretKey = keyGenerator.generateKey();//\u751F\u6210key\r\n            byte[] keyBytes = secretKey.getEncoded();//\u5F97\u5230key\u7684\u5B57\u8282\u6570\u7EC4\r\n            //2.key\u7684\u8F6C\u6362\r\n            DESedeKeySpec deSedeKeySpec = new DESedeKeySpec(keyBytes);\r\n            SecretKeyFactory factory = SecretKeyFactory.getInstance("desede");//\u79D8\u5BC6\u5BC6\u94A5\u5DE5\u5382\r\n            key = factory.generateSecret(deSedeKeySpec);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("desede/ECB/PKCS5Padding");//\u52A0\u89E3\u5BC6\u65B9\u5F0F+\u5DE5\u4F5C\u6A21\u5F0F+\u586B\u5145\u65B9\u5F0F\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);//\u4EE5\u52A0\u5BC6\u6A21\u5F0F\u521D\u59CB\u5316\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("desede/ECB/PKCS5Padding");//\u52A0\u89E3\u5BC6\u65B9\u5F0F+\u5DE5\u4F5C\u6A21\u5F0F+\u586B\u5145\u65B9\u5F0F\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void des3() {\r\n	String src = "\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\uFF0Cobject-oriented\uFF01@#*5"; // \u9700\u8981\u52A0\u5BC6\u7684\u539F\u59CB\u5B57\u7B26\u4E32\r\n	String password = "123456";\r\n	SecurityDES3 securityJdkDES3 = SecurityDES3.getInstance(password, SecurityDES3.DES3_MODE_JDK);\r\n	byte[] encodeJdkDES3 = securityJdkDES3.encrypt(src.getBytes());\r\n	System.out.println("JDK DES3\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeJdkDES3));\r\n	byte[] decodeJdkDES3 = securityJdkDES3.decrypt(encodeJdkDES3);\r\n	System.out.println("JDK DES3\u89E3\u5BC6\uFF1A" + new String(decodeJdkDES3));\r\n	SecurityDES3 securityBcDES3 = SecurityDES3.getInstance(password, SecurityDES3.DES3_MODE_BC);\r\n	byte[] encodeBcDES3 = securityBcDES3.encrypt(src.getBytes());\r\n	System.out.println("bouncyCastle DES3\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeBcDES3));\r\n	byte[] decodeBcDES3 = securityBcDES3.decrypt(encodeBcDES3);\r\n	System.out.println("bouncyCastle DES3\u89E3\u5BC6\uFF1A" + new String(decodeBcDES3));\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"rsa",children:"RSA"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"3. RSA\u52A0\u5BC6\u7B97\u6CD5\r\nRSA\u662F\u2F6C\u524D\u6700\u6709\u5F71\u54CD\u2F12\u7684\u516C\u94A5\u52A0\u5BC6\u7B97\u6CD5\uFF0C\u5B83\u80FD\u591F\u62B5\u6297\u5230\u2F6C\u524D\u4E3A\u2F4C\u5DF2\u77E5\u7684\u7EDD\u2F24\u591A\u6570\u5BC6\u7801\u653B\u51FB\uFF0C\u5DF2\u88ABISO\u63A8\u8350\u4E3A\u516C\u94A5\u6570\u636E\u52A0\u5BC6\u6807\u51C6\u3002RSA\u662F\u88AB\u7814\u7A76\u5F97\u6700\u2F34\u6CDB\u7684\u516C\u94A5\u7B97\u6CD5\uFF0C\u4ECE\u63D0\u51FA\u5230\u73B0\u5728\uFF0C\u7ECF\u5386\u4E86\u5404\u79CD\u653B\u51FB\u7684\u8003\u9A8C\uFF0C\u9010\u6E10\u4E3A\u2F08\u4EEC\u63A5\u53D7\uFF0C\u666E\u904D\u8BA4\u4E3A\u662F\u2F6C\u524D\u6700\u4F18\u79C0\u7684\u516C\u94A5\u2F45\u6848\u4E4B\u2F00\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport sun.misc.BASE64Decoder;\r\nimport sun.misc.BASE64Encoder;\r\n\r\nimport javax.crypto.BadPaddingException;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.IllegalBlockSizeException;\r\nimport javax.crypto.NoSuchPaddingException;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\n\r\n/**\r\n * @title: RSAUtil\r\n * @Author hmh\r\n * @Date: 2022/7/4 16:06\r\n * @Version 1.0\r\n */\r\npublic class RSAUtil {\r\n    \r\n    public static KeyPair keyPairGenerator(){\r\n        KeyPair keyPair = null;\r\n        try {\r\n            //\u4F7F\u7528RSA\u7B97\u6CD5\u83B7\u5F97\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\u5BF9\u8C61keyPairGenerator\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\r\n            //\u8BBE\u7F6E\u5BC6\u94A5\u957F\u5EA6\u4E3A1024\r\n            keyPairGenerator.initialize(1024);\r\n            //\u751F\u6210\u5BC6\u94A5\u5BF9\r\n            keyPair = keyPairGenerator.generateKeyPair();\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return keyPair;\r\n    }\r\n\r\n    /**\r\n     * \u516C\u94A5\u52A0\u5BC6\r\n     * @param password \u52A0\u5BC6\u6570\u636E\r\n     * @param publicKey \u516C\u94A5\r\n     * @return \u52A0\u5BC6\u540E\u6570\u636E\r\n     */\r\n    public static String encrypt(String password, PublicKey publicKey){\r\n        byte[] secret = new byte[0];\r\n        try {\r\n            //\u83B7\u53D6\u4E00\u4E2A\u52A0\u5BC6\u7B97\u6CD5\u4E3ARSA\u7684\u52A0\u89E3\u5BC6\u5668\u5BF9\u8C61cipher\u3002\r\n            Cipher cipher = Cipher.getInstance("RSA");\r\n            //\u8BBE\u7F6E\u4E3A\u52A0\u5BC6\u6A21\u5F0F,\u5E76\u5C06\u516C\u94A5\u7ED9cipher\u3002\r\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\r\n            //\u83B7\u5F97\u5BC6\u6587\r\n            secret = cipher.doFinal(password.getBytes());\r\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //\u8FDB\u884CBase64\u7F16\u7801\u5E76\u8FD4\u56DE\r\n        return new BASE64Encoder().encode(secret);\r\n    }\r\n\r\n    /**\r\n     * \u79C1\u94A5\u89E3\u5BC6\r\n     * @param password \u89E3\u5BC6\u6570\u636E\r\n     * @param privateKey \u79C1\u94A5\r\n     * @return \u89E3\u5BC6\u540E\u7684\u6570\u636E\r\n     */\r\n    public static String decrypt(String password, PrivateKey privateKey){\r\n        byte[] b = new byte[0];\r\n        try {\r\n            Cipher cipher = Cipher.getInstance("RSA");\r\n            //\u4F20\u9012\u79C1\u94A5\uFF0C\u8BBE\u7F6E\u4E3A\u89E3\u5BC6\u6A21\u5F0F\u3002\r\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\r\n            //\u89E3\u5BC6\u5668\u89E3\u5BC6\u7531Base64\u89E3\u7801\u540E\u7684\u5BC6\u6587,\u83B7\u5F97\u660E\u6587\u5B57\u8282\u6570\u7EC4\r\n            b = cipher.doFinal(new BASE64Decoder().decodeBuffer(password));\r\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | IOException | InvalidKeyException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //\u8F6C\u6362\u6210\u5B57\u7B26\u4E32\r\n        return new String(b);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void rsa() {\r\n	KeyPair keyPair = RSAUtil.keyPairGenerator();\r\n	PrivateKey privateKey = keyPair.getPrivate();\r\n	PublicKey publicKey = keyPair.getPublic();\r\n	System.out.println(RSAUtil.encrypt("rsa", publicKey));\r\n	System.out.println(RSAUtil.decrypt(RSAUtil.encrypt("rsa", publicKey), privateKey));\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Signature;\r\nimport java.security.interfaces.RSAPrivateKey;\r\nimport java.security.interfaces.RSAPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DigitalSignRSA {\r\n    //\u516C\u94A5\r\n    private static final String PUBLIC_KEY = "RSAPublicKey";\r\n    //\u79C1\u94A5\r\n    private static final String PRIVATE_KEY = "RSAPrivateKey";\r\n \r\n    /** \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\r\n     * @return Map \u5BC6\u94A5\u5BF9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\r\n            // \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\uFF0C\u5BC6\u94A5\u5927\u5C0F\u4E3A96-1024\u4F4D\r\n            keyPairGenerator.initialize(512, new SecureRandom());\r\n            //\u751F\u6210\u5BC6\u94A5\u5BF9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516C\u94A5\r\n            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\r\n            //\u79C1\u94A5\r\n            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\r\n            //\u5C06\u5BC6\u94A5\u5BF9\u5B58\u50A8\u5728Map\u4E2D\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6267\u884C\u6570\u5B57\u7B7E\u540D\u3010\u79C1\u94A5\u7B7E\u540D\u3011\r\n     * @param data \u5F85\u52A0\u5BC6\u6570\u636E\r\n     * @param privKey  \u79C1\u94A5\r\n     * @return byte[] \u52A0\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] digitalSign(byte[] data, byte[] privKey) {\r\n        try {\r\n            PrivateKey privateKey = (PrivateKey) KeyFactory.getInstance("RSA")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(privKey));\r\n            Signature signature = Signature.getInstance("MD5WithRSA");\r\n            signature.initSign(privateKey);\r\n            signature.update(data);\r\n            return signature.sign();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u9A8C\u8BC1\u7B7E\u540D\u3010\u516C\u94A5\u9A8C\u8BC1\u3011\r\n     * @param data \u5F85\u89E3\u5BC6\u6570\u636E\r\n     * @param pubKey  \u516C\u94A5\r\n     * @return byte[] \u89E3\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static boolean signVerify(byte[] data, byte[] rsaData, byte[] pubKey) {\r\n        try {\r\n            PublicKey publicKey = (PublicKey) KeyFactory.getInstance("RSA")\r\n                    .generatePublic(new X509EncodedKeySpec(pubKey));\r\n            Signature signature = Signature.getInstance("MD5WithRSA");\r\n            signature.initVerify(publicKey);\r\n            signature.update(data);\r\n            return signature.verify(rsaData);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n \r\n    /** \u53D6\u5F97\u79C1\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u79C1\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53D6\u5F97\u516C\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u516C\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void rsa() {\r\n	//\u516C\u94A5\r\n	byte[] publicKey;\r\n	//\u79C1\u94A5\r\n	byte[] privateKey;\r\n	//\u521D\u59CB\u5316\u5BC6\u94A5\r\n	//\u751F\u6210\u5BC6\u94A5\u5BF9\r\n	Map<String, Object> keyMap = DigitalSignRSA.initKey();\r\n	publicKey = DigitalSignRSA.getPublicKey(keyMap);\r\n	privateKey = DigitalSignRSA.getPrivateKey(keyMap);\r\n	System.out.println("RSA\u516C\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n	System.out.println("RSA\u79C1\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n	System.out.println();\r\n	String msgA2B = "What can I do for you?";\r\n	//\u6267\u884C\u6570\u5B57\u7B7E\u540D\u3010\u79C1\u94A5\u7B7E\u540D\u3011\r\n	byte[] encodeMsgA2B = DigitalSignRSA.digitalSign(msgA2B.getBytes(), privateKey);\r\n	System.out.println("JDK RSA\u7B7E\u540D\uFF1A:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n	//\u9A8C\u8BC1\u7B7E\u540D\u3010\u516C\u94A5\u9A8C\u8BC1\u3011\r\n	boolean bool = DigitalSignRSA.signVerify(msgA2B.getBytes(), encodeMsgA2B, publicKey);\r\n	System.out.println("\u6570\u5B57\u7B7E\u540D\u662F\u5426\u6709\u6548\uFF1F:\\n" + bool);\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"idea",children:"IDEA"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"4.IDEA\u52A0\u5BC6\u7B97\u6CD5\r\nIDEA\uFF08International Data Encryption Algorithm\uFF09\u56FD\u9645\u6570\u636E\u52A0\u5BC6\u7B97\u6CD5\uFF1A\u4F7F\u2F64 128 \u4F4D\u5BC6\u94A5\u63D0\u4F9B\u2FAE\u5E38\u5F3A\u7684\u5B89\u5168\u6027\u3002\n"})}),"\n",(0,i.jsx)(e.h2,{id:"dsa",children:"DSA"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"5. DSA\u52A0\u5BC6\u7B97\u6CD5\r\nDSA\uFF08Digital Signature Algorithm\uFF09\uFF1A\u6570\u5B57\u7B7E\u540D\u7B97\u6CD5\uFF0C\u662F\u2F00\u79CD\u6807\u51C6\u7684 DSS\uFF08\u6570\u5B57\u7B7E\u540D\u6807\u51C6\uFF09\u3002\u53EA\u80FD\u7528\u4E8E\u7B7E\u540D\uFF0C\u4E0D\u80FD\u7528\u4E8E\u52A0\u89E3\u5BC6\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Signature;\r\nimport java.security.interfaces.DSAPrivateKey;\r\nimport java.security.interfaces.DSAPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DSAUtil {\r\n    //\u516C\u94A5\r\n    private static final String PUBLIC_KEY = "DSAPublicKey";\r\n    //\u79C1\u94A5\r\n    private static final String PRIVATE_KEY = "DSAPrivateKey";\r\n \r\n    /** \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\r\n     * @return Map \u5BC6\u94A5\u5BF9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DSA");\r\n            // \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\uFF0C\u5BC6\u94A5\u5927\u5C0F\u4E3A96-1024\u4F4D\r\n            keyPairGenerator.initialize(512, new SecureRandom());\r\n            //\u751F\u6210\u5BC6\u94A5\u5BF9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516C\u94A5\r\n            DSAPublicKey publicKey = (DSAPublicKey) keyPair.getPublic();\r\n            //\u79C1\u94A5\r\n            DSAPrivateKey privateKey = (DSAPrivateKey) keyPair.getPrivate();\r\n            //\u5C06\u5BC6\u94A5\u5BF9\u5B58\u50A8\u5728Map\u4E2D\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6267\u884C\u6570\u5B57\u7B7E\u540D\u3010\u79C1\u94A5\u7B7E\u540D\u3011\r\n     * @param data \u5F85\u52A0\u5BC6\u6570\u636E\r\n     * @param privKey  \u79C1\u94A5\r\n     * @return byte[] \u52A0\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] digitalSign(byte[] data, byte[] privKey) {\r\n        try {\r\n            PrivateKey privateKey = (PrivateKey) KeyFactory.getInstance("DSA")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(privKey));\r\n            Signature signature = Signature.getInstance("SHA1WithDSA");\r\n            signature.initSign(privateKey);\r\n            signature.update(data);\r\n            return signature.sign();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u9A8C\u8BC1\u7B7E\u540D\u3010\u516C\u94A5\u9A8C\u8BC1\u3011\r\n     * @param data \u5F85\u89E3\u5BC6\u6570\u636E\r\n     * @param pubKey  \u516C\u94A5\r\n     * @return byte[] \u89E3\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static boolean signVerify(byte[] data, byte[] rsaData, byte[] pubKey) {\r\n        try {\r\n            PublicKey publicKey = (PublicKey) KeyFactory.getInstance("DSA")\r\n                    .generatePublic(new X509EncodedKeySpec(pubKey));\r\n            Signature signature = Signature.getInstance("SHA1WithDSA");\r\n            signature.initVerify(publicKey);\r\n            signature.update(data);\r\n            return signature.verify(rsaData);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n \r\n    /** \u53D6\u5F97\u79C1\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u79C1\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53D6\u5F97\u516C\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u516C\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void dsa() {\r\n	//\u516C\u94A5\r\n	byte[] publicKey;\r\n	//\u79C1\u94A5\r\n	byte[] privateKey;\r\n	//\u521D\u59CB\u5316\u5BC6\u94A5\r\n	//\u751F\u6210\u5BC6\u94A5\u5BF9\r\n	Map<String, Object> keyMap = DSAUtil.initKey();\r\n	publicKey = DSAUtil.getPublicKey(keyMap);\r\n	privateKey = DSAUtil.getPrivateKey(keyMap);\r\n	System.out.println("DSA\u516C\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n	System.out.println("DSA\u79C1\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n	System.out.println();\r\n	String msgA2B = "What can I do for you?";\r\n	//\u6267\u884C\u6570\u5B57\u7B7E\u540D\u3010\u79C1\u94A5\u7B7E\u540D\u3011\r\n	byte[] encodeMsgA2B = DSAUtil.digitalSign(msgA2B.getBytes(), privateKey);\r\n	System.out.println("JDK DSA\u7B7E\u540D\uFF1A:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n	//\u9A8C\u8BC1\u7B7E\u540D\u3010\u516C\u94A5\u9A8C\u8BC1\u3011\r\n	boolean bool = DSAUtil.signVerify(msgA2B.getBytes(), encodeMsgA2B, publicKey);\r\n	System.out.println("\u6570\u5B57\u7B7E\u540D\u662F\u5426\u6709\u6548\uFF1F:\\n" + bool);\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"aes",children:"AES"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"6.AES\u52A0\u5BC6\u7B97\u6CD5\r\nAES\u52A0\u5BC6\u7B97\u6CD5\u2F1C\u79F0Rijndael\u52A0\u5BC6\u6CD5\uFF0C\u2F6C\u524D\u5DF2\u7ECF\u88AB\u591A\u2F45\u5206\u6790\u4E14\u2F34\u4E3A\u5168\u4E16\u754C\u6240\u4F7F\u2F64\u3002\u7ECF\u8FC7\u4E94\u5E74\u53D1\u5C55\uFF0CAES\u52A0\u5BC6\u7B97\u6CD5\u5DF2\u7136\u6210\u4E3A\u5BF9\u79F0\u5BC6\u94A5\u52A0\u5BC6\u4E2D\u6700\u6D41\u884C\u7684\u7B97\u6CD5\u4E4B\u2F00\u3002\r\n\u95EE\u9898\uFF1A\r\n(1) Illegal key size or default parameters\uFF1A\r\n\u9700\u8981\u66F4\u6539jce\uFF0C\u4E0B\u8F7D\u5730\u5740\r\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-429243.html\r\n\u66F4\u6362\u76EE\u5F55jar\uFF1A\r\n#{jdk}\\jre\\lib\\security\r\n(2)Jurisdiction policy files are not signed by trusted signers!\r\njce\u7248\u672C\u4E0D\u5BF9\uFF0C\u5BF9\u5E94jdk\u7248\u672C\u4E0B\u8F7D\u6B63\u786E\u7684jce\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.commons.codec.binary.Hex;\r\n\r\nimport java.security.Security;\r\nimport java.util.Locale;\r\n\r\n/**\r\n * @author \uFF1Asmallkinghjm\r\n * @description\uFF1ATODO\r\n * @date \uFF1A2022/3/2 11:20\r\n */\r\n@Slf4j\r\npublic class AESUtil {\r\n\r\n    /**\r\n     * AES\u52A0\u5BC6\r\n     *\r\n     * @param content \u660E\u6587\r\n     * @param key     \u79D8\u94A5\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static String encrypt(String content, String key) throws Exception {\r\n        // \u5C06\u8FD4\u56DE\u7684\u52A0\u5BC6\u8FC7\u7684 byte[] \u8F6C\u6362\u6210Base64\u7F16\u7801\u5B57\u7B26\u4E32 \uFF01\uFF01\uFF01\uFF01\u5F88\u5173\u952E\r\n        return base64ToString(AES_ECB_Encrypt(content.getBytes(), key.getBytes()));\r\n    }\r\n\r\n    /**\r\n     * AES\u89E3\u5BC6\r\n     *\r\n     * @param content Base64\u7F16\u7801\u7684\u5BC6\u6587\r\n     * @param key     \u79D8\u94A5\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static String decrypt(String content, String key) {\r\n        // stringToBase64() \u5C06 Base64\u7F16\u7801\u7684\u5B57\u7B26\u4E32\u8F6C\u6362\u6210 byte[] !!!\u4E0Ebase64ToString(\uFF09\u914D\u5957\u4F7F\u7528\r\n        try {\r\n            byte[] base64 = stringToBase64(content);\r\n            byte[] bytes = AES_ECB_Decrypt(base64, key.getBytes());\r\n            String result = new String(bytes);\r\n            return result.replaceAll("\\"","");\r\n        } catch (Exception e) {\r\n            log.info("AES\u89E3\u5BC6\u51FA\u9519\uFF01\uFF01\uFF01");\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static byte[] AES_ECB_Encrypt(byte[] content, byte[] keyBytes) {\r\n        try {\r\n            SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");\r\n            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS7Padding");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] result = cipher.doFinal(content);\r\n            return result;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static byte[] AES_ECB_Decrypt(byte[] content, byte[] keyBytes) {\r\n        try {\r\n            SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");\r\n            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS7Padding");\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            byte[] result = cipher.doFinal(content);\r\n            return result;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * \u5B57\u7B26\u4E32\u88C5\u6362\u6210 Base64\r\n     */\r\n\r\n    public static byte[] stringToBase64(String key) throws Exception {\r\n        return Base64.decodeBase64(key.getBytes());\r\n    }\r\n\r\n    /**\r\n     * Base64\u88C5\u6362\u6210\u5B57\u7B26\u4E32\r\n     */\r\n    public static String base64ToString(byte[] key) throws Exception {\r\n        return new Base64().encodeToString(key);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void aes() throws Exception {\r\n	String key = "5F6B2AK33DZE20A05E74C231B47AC8F6";\r\n	String content = "smallkinghjm_2022";//\u660E\u6587\r\n	String encrypt = AESUtil.encrypt(content, key);\r\n	System.out.println("\u52A0\u5BC6\uFF1A" + encrypt);\r\n	String decrypt = AESUtil.decrypt(encrypt, key);\r\n	System.out.println("\u89E3\u5BC6\uFF1A"+decrypt);\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityAES {\r\n    \r\n    public static String AES_MODE_JDK = "jdk";\r\n    public static String AES_MODE_BC = "bouncyCastle";\r\n    private Key key;\r\n    \r\n    //\u5355\u4F8B\u6A21\u5F0F\r\n    private static SecurityAES securityAES;\r\n    public static SecurityAES getInstance(String password, String succurityMode) {\r\n        if(securityAES == null) {\r\n            securityAES = new SecurityAES(password, succurityMode);\r\n        }\r\n        return securityAES;\r\n    }\r\n    \r\n    private SecurityAES(String password, String succurityMode)  {\r\n        try{\r\n            //1.\u751F\u6210key\r\n            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");\r\n            secureRandom.setSeed(password.getBytes());\r\n            KeyGenerator keyGenerator;\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(AES_MODE_BC, succurityMode)) {\r\n                 Security.addProvider(new BouncyCastleProvider());\r\n                 keyGenerator = KeyGenerator.getInstance("aes", "BC");\r\n            }else {\r\n                keyGenerator = KeyGenerator.getInstance("aes");\r\n            }\r\n            keyGenerator.init(128, secureRandom);//\u521D\u59CB\u5316key\u7684\u957F\u5EA6\uFF0C\u53EA\u80FD\u662F128\uFF0C\r\n            SecretKey secretKey = keyGenerator.generateKey();//\u751F\u6210key\r\n            byte[] keyBytes = secretKey.getEncoded();//\u5F97\u5230key\u7684\u5B57\u8282\u6570\u7EC4\r\n            //2.key\u7684\u8F6C\u6362\r\n            key = new SecretKeySpec(keyBytes, "aes");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//\u52A0\u89E3\u5BC6\u65B9\u5F0F+\u5DE5\u4F5C\u6A21\u5F0F+\u586B\u5145\u65B9\u5F0F\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);//\u4EE5\u52A0\u5BC6\u6A21\u5F0F\u521D\u59CB\u5316\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//\u52A0\u89E3\u5BC6\u65B9\u5F0F+\u5DE5\u4F5C\u6A21\u5F0F+\u586B\u5145\u65B9\u5F0F\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void aes() {\r\n	String src = "\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\uFF0Cobject-oriented\uFF01@#*5"; // \u9700\u8981\u52A0\u5BC6\u7684\u539F\u59CB\u5B57\u7B26\u4E32\r\n	String password = "123456";\r\n	SecurityAES securityJdkAES = SecurityAES.getInstance(password, SecurityAES.AES_MODE_JDK);\r\n	byte[] encodeJdkAES = securityJdkAES.encrypt(src.getBytes());\r\n	System.out.println("JDK AES\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeJdkAES));\r\n	byte[] decodeJdkAES = securityJdkAES.decrypt(encodeJdkAES);\r\n	System.out.println("JDK AES\u89E3\u5BC6\uFF1A" + new String(decodeJdkAES));\r\n\r\n	SecurityAES securityBcAES = SecurityAES.getInstance(password, SecurityAES.AES_MODE_BC);\r\n	byte[] encodeBcAES = securityBcAES.encrypt(src.getBytes());\r\n	System.out.println("bouncyCastle AES\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeBcAES));\r\n	byte[] decodeBcAES = securityBcAES.decrypt(encodeBcAES);\r\n	System.out.println("bouncyCastle AES\u89E3\u5BC6\uFF1A" + new String(decodeBcAES));\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"elgamal",children:"Elgamal"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"7. Elgamal\u52A0\u5BC6\u7B97\u6CD5\r\nElGamal\u7B97\u6CD5\uFF0C\u662F\u2F00\u79CD\u8F83\u4E3A\u5E38\u89C1\u7684\u52A0\u5BC6\u7B97\u6CD5\uFF0C\u5B83\u662F\u57FA\u4E8E1984\u5E74\u63D0\u51FA\u7684\u516C\u94A5\u5BC6\u7801\u4F53\u5236\u548C\u692D\u5706\u66F2\u7EBF\u52A0\u5BC6\u4F53\u7CFB\u3002\u65E2\u80FD\u2F64\u4E8E\u6570\u636E\u52A0\u5BC6\u4E5F\u80FD\u2F64\u4E8E\u6570\u5B57\u7B7E\u540D\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.AlgorithmParameterGenerator;\r\nimport java.security.AlgorithmParameters;\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.DHParameterSpec;\r\n\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class ElgamalUtil {\r\n    \r\n    /**\r\n     * \u975E\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u2014\u2014ELGamal\u7B97\u6CD5\r\n     * \u5BF9\u4E8E\uFF1A\u201CIllegal key size or default parameters\u201D\u5F02\u5E38\uFF0C\u662F\u56E0\u4E3A\u7F8E\u56FD\u7684\u51FA\u53E3\u9650\u5236\uFF0CSun\u901A\u8FC7\u6743\u9650\u6587\u4EF6\uFF08local_policy.jar\u3001US_export_policy.jar\uFF09\u505A\u4E86\u76F8\u5E94\u9650\u5236\u3002\r\n     * Java 7 \u65E0\u653F\u7B56\u9650\u5236\u6587\u4EF6\uFF1Ahttp://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html,\r\n     * \u4E0B\u8F7D\u540E\u5F97\u5230UnlimitedJCEPolicyJDK7.zip\uFF0C\u89E3\u538B\u66FF\u6362%JAVA_HOME%/jre/lib/security\u7684\u4E24\u4E2A\u6587\u4EF6\u5373\u53EF\r\n     */\r\n    \r\n    //\u516C\u94A5\r\n    private static final String PUBLIC_KEY = "elgamalPublicKey";\r\n    //\u79C1\u94A5\r\n    private static final String PRIVATE_KEY = "elgamalPrivateKey";\r\n \r\n    /** \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\r\n     * @return Map \u5BC6\u94A5\u5BF9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            Security.addProvider(new BouncyCastleProvider());//\u52A0\u5165\u5BF9Bouncy Castle\u7684\u652F\u6301\r\n            //1.\u521D\u59CB\u5316\u53D1\u9001\u65B9\u5BC6\u94A5\r\n            AlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance("ELGamal");\r\n            algorithmParameterGenerator.init(256);//\u521D\u59CB\u5316\u53C2\u6570\u751F\u6210\u5668\r\n            AlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();//\u751F\u6210\u7B97\u6CD5\u53C2\u6570\r\n            DHParameterSpec dhParameterSpec = algorithmParameters.getParameterSpec(DHParameterSpec.class);//\u6784\u5EFA\u53C2\u6570\u6750\u6599\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("ELGamal");//\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            //\u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            keyPairGenerator.initialize(dhParameterSpec, new SecureRandom());\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516C\u94A5\u548C\u79C1\u94A5\r\n            PublicKey elGamalPublicKey = keyPair.getPublic();\r\n            PrivateKey elGamalPrivateKey = keyPair.getPrivate();\r\n            //\u5C06\u5BC6\u94A5\u5BF9\u5B58\u50A8\u5728Map\u4E2D\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, elGamalPublicKey);\r\n            keyMap.put(PRIVATE_KEY, elGamalPrivateKey);\r\n            return keyMap;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u52A0\u5BC6\u3010\u516C\u94A5\u52A0\u5BC6\uFF0C\u79C1\u94A5\u89E3\u5BC6\u3011\r\n     * @param data \u5F85\u52A0\u5BC6\u6570\u636E\r\n     * @param key  \u516C\u94A5\r\n     * @return byte[] \u52A0\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] encrypt(byte[] data, byte[] key) {\r\n        try {\r\n            PublicKey pubKey = (PublicKey) KeyFactory.getInstance("ELGamal")\r\n                    .generatePublic(new X509EncodedKeySpec(key));\r\n            Cipher cipher = Cipher.getInstance("ELGamal","BC");\r\n            cipher.init(Cipher.ENCRYPT_MODE, pubKey);\r\n            byte[] result = cipher.doFinal(data);\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /**  \u89E3\u5BC6\u3010\u516C\u94A5\u52A0\u5BC6\uFF0C\u79C1\u94A5\u89E3\u5BC6\u3011\r\n     * @param data \u5F85\u89E3\u5BC6\u6570\u636E\r\n     * @param key  \u79C1\u94A5\r\n     * @return byte[] \u89E3\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] decrypt(byte[] data, byte[] key) {\r\n        try {\r\n            PrivateKey priKey = (PrivateKey) KeyFactory.getInstance("ELGamal")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(key));\r\n            //\u5B9E\u4F8B\u5316\r\n            Cipher cipher = Cipher.getInstance("ELGamal","BC");\r\n            //\u4F7F\u7528\u5BC6\u94A5\u521D\u59CB\u5316\uFF0C\u8BBE\u7F6E\u4E3A\u89E3\u5BC6\u6A21\u5F0F\r\n            cipher.init(Cipher.DECRYPT_MODE, priKey);\r\n            //\u6267\u884C\u64CD\u4F5C\r\n            byte[] result = cipher.doFinal(data);\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u53D6\u5F97\u79C1\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u79C1\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53D6\u5F97\u516C\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u516C\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void elgamal() {\r\n	//\u516C\u94A5\r\n	byte[] publicKey;\r\n	//\u79C1\u94A5\r\n	byte[] privateKey;\r\n	//\u521D\u59CB\u5316\u5BC6\u94A5\r\n	//\u751F\u6210\u7532\u65B9\u5BC6\u94A5\u5BF9\r\n	Map<String, Object> keyMap = ElgamalUtil.initKey();\r\n	publicKey = ElgamalUtil.getPublicKey(keyMap);\r\n	privateKey = ElgamalUtil.getPrivateKey(keyMap);\r\n	System.out.println("Elgamal\u516C\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n	System.out.println("Elgamal\u79C1\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n\r\n	System.out.println();\r\n	System.out.println("===\u7532\u65B9\u5411\u4E59\u65B9\u53D1\u9001\u52A0\u5BC6\u6570\u636E===");\r\n	String msgA2B = "\u6C42\u77E5\u82E5\u9965\uFF0C\u865A\u5FC3\u82E5\u611A\u3002";\r\n	System.out.println("\u539F\u6587:\\n" + msgA2B);\r\n	System.out.println("---\u7532\u65B9\u4F7F\u7528\u516C\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u52A0\u5BC6---");\r\n	//\u4F7F\u7528\u516C\u94A5\u5BF9\u6570\u636E\u52A0\u5BC6\r\n	byte[] encodeMsgA2B = ElgamalUtil.encrypt(msgA2B.getBytes(), publicKey);\r\n	System.out.println("Elgamal\u52A0\u5BC6:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n	System.out.println("---\u4E59\u65B9\u4F7F\u7528\u79C1\u94A5\u5BF9\u6570\u636E\u5E93\u8FDB\u884C\u89E3\u5BC6---");\r\n	//\u4F7F\u7528\u79C1\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u89E3\u5BC6\r\n	byte[] msgB2A = ElgamalUtil.decrypt(encodeMsgA2B, privateKey);\r\n	String output1 = new String(msgB2A);\r\n	System.out.println("Elgamal\u89E3\u5BC6:\\n" + output1);\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"base64",children:"Base64"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"8. Base64\u52A0\u5BC6\u7B97\u6CD5\r\nBase64\u52A0\u5BC6\u7B97\u6CD5\u662F\u2F79\u7EDC\u4E0A\u6700\u5E38\u89C1\u7684\u2F64\u4E8E\u4F20\u8F938bit\u5B57\u8282\u4EE3\u7801\u7684\u7F16\u7801\u2F45\u5F0F\u4E4B\u2F00\uFF0CBase64\u7F16\u7801\u53EF\u2F64\u4E8E\u5728HTTP\u73AF\u5883\u4E0B\u4F20\u9012\u8F83\u957F\u7684\u6807\u8BC6\u4FE1\u606F\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"//base64\u52A0\u5BC6\u89E3\u5BC6\r\nBase64.getEncoder().encode(String)\r\nBase64.getDecoder().decode(String)\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"package org.jeecg.modules.p14.key;\r\n\r\nimport org.apache.commons.codec.binary.Base64;\r\n\r\npublic class SecurityBASE64 {\r\n    \r\n    /**\r\n     * base64\u7B97\u6CD5\u662F\u57FA\u4E8E64\u4E2A\u5B57\u7B26\u7684\u4E00\u79CD\u66FF\u6362\u7B97\u6CD5\u3002base64\u52A0\u5BC6\u7684\u4EA7\u751F\u5F0F\u7535\u5B50\u90AE\u4EF6\u7684\u201C\u5386\u53F2\u95EE\u9898\u201D\u2014\u2014\u90AE\u4EF6\u53EA\u80FD\u4F20\u8F93ASCII\u7801\u3002\r\n     * base64\u52A0\u5BC6\u7684\u5E94\u7528\u573A\u666F\uFF1Aemail\u3001\u5BC6\u94A5\u3001\u8BC1\u4E66\u6587\u4EF6\u3002\r\n     *  \u8BE5\u7B97\u6CD5\u53EF\u4EE5\u75312\u79CD\u65B9\u5F0F\u5B9E\u73B0\uFF1ABouncy Castle\u3001Commons Codec\r\n     */\r\n    \r\n    /** \r\n     * Commons Codec\u5B9E\u73B0base64\u7F16\u7801 \r\n     */\r\n    public static String encodeCC(String src) {\r\n        byte[] encode = Base64.encodeBase64(src.getBytes());\r\n        return new String(encode);\r\n    }\r\n    public static String decodeCC(String src) {\r\n        byte[] decode = Base64.decodeBase64(src);\r\n        return new String(decode);\r\n    }\r\n    \r\n    /**\r\n     * Bouncy Castle\u5B9E\u73B0base64\u7F16\u7801 \r\n     */\r\n    public static String encodeBC(String src) {\r\n        byte[] encode = org.bouncycastle.util.encoders.Base64.encode(src.getBytes());\r\n        return new String(encode);\r\n    }\r\n    public static String decodeBC(String src) {\r\n        byte[] decode = org.bouncycastle.util.encoders.Base64.decode(src);\r\n        return new String(decode);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void base64() {\r\n	String inStr = "\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\uFF0Cobject-oriented\uFF01@#*5";\r\n	String encodeCC = SecurityBASE64.encodeCC(inStr);\r\n	System.out.println("Commons Codec\u5B9E\u73B0base64\u7F16\u7801\uFF1A\\t" + encodeCC);\r\n	String decodeCC = SecurityBASE64.decodeCC(encodeCC);\r\n	System.out.println("Commons Codec\u5B9E\u73B0base64\u89E3\u7801\uFF1A\\t" + decodeCC);\r\n	String encodeBC = SecurityBASE64.encodeBC(inStr);\r\n	System.out.println("Bouncy Castle\u5B9E\u73B0base64\u7F16\u7801\uFF1A\\t" + encodeBC);\r\n	String decodeBC = SecurityBASE64.decodeBC(encodeBC);\r\n	System.out.println("Bouncy Castle\u5B9E\u73B0base64\u89E3\u7801\uFF1A\\t" + decodeBC);\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"sha",children:"SHA"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"9. SHA1\u52A0\u5BC6\u7B97\u6CD5\r\nSHA1\u662F\u548CMD5\u2F00\u6837\u6D41\u2F8F\u7684\u6D88\u606F\u6458\u8981\u7B97\u6CD5\u3002SHA\u52A0\u5BC6\u7B97\u6CD5\u6A21\u4EFFMD4\u52A0\u5BC6\u7B97\u6CD5\u3002SHA1\u4E3B\u8981\u9002\u2F64\u4E8E\u6570\u5B57\u7B7E\u540D\u6807\u51C6\u2FA5\u2FAF\u5B9A\u4E49\u7684\u6570\u5B57\u7B7E\u540D\u7B97\u6CD5\u3002\u4E0D\u53EF\u9006\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport org.apache.commons.codec.binary.Hex;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.bouncycastle.crypto.Digest;\r\nimport org.bouncycastle.crypto.digests.SHA1Digest;\r\nimport org.bouncycastle.crypto.digests.SHA224Digest;\r\nimport org.bouncycastle.crypto.digests.SHA256Digest;\r\n\r\npublic class SHAUtil {\r\n    \r\n    /**\r\n     *  \u5B89\u5168\u6563\u5217\u7B97\u6CD5\uFF0C\u56FA\u5B9A\u957F\u5EA6\u7684\u6458\u8981\u4FE1\u606F\u3002\u88AB\u8BA4\u4E3A\u662FMD5\u7684\u7EE7\u627F\u8005\u3002\u662F\u4E00\u4E2A\u7CFB\u5217\uFF0C\u5305\u62ECSHA-1\u3001SHA-2\uFF08SHA-224\u3001SHA-256\u3001SHA-384\u3001SHA-512\uFF09\r\n     */\r\n    \r\n    /**\r\n     * JDK\u5B9E\u73B0sha-1 \r\n     */\r\n    public static String jdkSHA1(String src) {\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("sha");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }// sha1\u7B97\u6CD5\u4F20\u5165\u53C2\u6570\u4E3Asha\r\n        byte[] sha1Bytes = md.digest(src.getBytes());\r\n        return Hex.encodeHexString(sha1Bytes);\r\n    }\r\n    \r\n    /** \r\n     * JDK\u5B9E\u73B0sha-256 \r\n     */\r\n    public static String jdkSHA256(String src) {\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("sha-256");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        md.update(src.getBytes());\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(md.digest()));\r\n    }\r\n    \r\n    /** \r\n     * Commons Codec\u5B9E\u73B0sha-1 \r\n     */\r\n    public static String commonsCodecSAH1(String src){\r\n//        return DigestUtils.sha1Hex(src.getBytes());\r\n        return DigestUtils.sha1Hex(src);\r\n    }\r\n    \r\n    /**\r\n     * Bouncy Castle\u5B9E\u73B0sha-1 \r\n     * @param src\r\n     * @return\r\n     */\r\n    public static String bouncyCastleSHA1(String src){\r\n        Digest digest = new SHA1Digest();\r\n        digest.update(src.getBytes(), 0, src.getBytes().length);\r\n        byte[]sha1Bytes = new byte[digest.getDigestSize()];\r\n        digest.doFinal(sha1Bytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(sha1Bytes));\r\n    }\r\n    \r\n    /** \r\n     * Bouncy Castle\u5B9E\u73B0sha-224 \r\n     */\r\n    public static String bouncyCastleSHA224(String src){\r\n        Digest digest = new SHA224Digest();\r\n        digest.update(src.getBytes(), 0, src.getBytes().length);\r\n        byte[]sha224Bytes = new byte[digest.getDigestSize()];\r\n        digest.doFinal(sha224Bytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(sha224Bytes));\r\n    }\r\n\r\n    /** \r\n     * Bouncy Castle\u5B9E\u73B0sha-256 \r\n     */\r\n    public static String bouncyCastleSHA256(String src) {\r\n        Digest digest = new SHA256Digest();\r\n        digest.update(src.getBytes(), 0, src.getBytes().length);\r\n        byte[] sha256Bytes = new byte[digest.getDigestSize()];\r\n        digest.doFinal(sha256Bytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(sha256Bytes));\r\n    } \r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void sha() {\r\n	String src = "object-oriente"; // \u9700\u8981\u52A0\u5BC6\u7684\u539F\u59CB\u5B57\u7B26\u4E32\r\n	System.out.println("JDK SHA-1:\\t" + SHAUtil.jdkSHA1(src));\r\n	System.out.println("cc SHA-1:\\t" + SHAUtil.commonsCodecSAH1(src));\r\n	System.out.println("bc SHA-1:\\t" + SHAUtil.bouncyCastleSHA1(src));\r\n	System.out.println("bc SHA-224:\\t" + SHAUtil.bouncyCastleSHA224(src));\r\n	System.out.println("JDK SHA-256:\\t" + SHAUtil.jdkSHA256(src));\r\n	System.out.println("bc SHA-256:\\t" + SHAUtil.bouncyCastleSHA256(src));\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"pkcs",children:"PKCS"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"10. PKCS\u52A0\u5BC6\u7B97\u6CD5\r\nPKCS\u662F\u7531\u7F8E\u56FDRSA\u6570\u636E\u5B89\u5168\u516C\u53F8\u53CA\u5176\u5408\u4F5C\u4F19\u4F34\u5236\u5B9A\u7684\u2F00\u7EC4\u516C\u94A5\u5BC6\u7801\u5B66\u6807\u51C6\uFF0C\u5176\u4E2D\u5305\u62EC\u8BC1\u4E66\u7533\u8BF7\u3001\u8BC1\u4E66\u66F4\u65B0\u3001\u8BC1\u4E66\u4F5C\u5E9F\u8868\u53D1\u5E03\u3001\u6269\u5C55\u8BC1\u4E66\u5185\u5BB9\u4EE5\u53CA\u6570\u5B57\u7B7E\u540D\u3001\u6570\u5B57\u4FE1\u5C01\u7684\u683C\u5F0F\u7B49\u2F45\u2FAF\u7684\u2F00\u7CFB\u5217\u76F8\u5173\u534F\u8BAE\u3002\n"})}),"\n",(0,i.jsx)(e.h2,{id:"ecdsa",children:"ECDSA"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"11.ECDSA\r\n\u5FAE\u8F6F\u7684Office\u3001Windows\u64CD\u4F5C\u7CFB\u7EDF\u7684\u9A8C\u8BC1\u5C31\u662FECDSA\u7B97\u6CD5\u2014\u2014\u692D\u5706\u66F2\u7EBF\u6570\u5B57\u7B7E\u540D\u7B97\u6CD5\uFF08Elliptic Curve Digital Signature Algorithm\uFF09\uFF0C\u57282000\u5E74\u7684\u65F6\u5019\u79F0\u4E3A\u4E86ANSI\u548CIEEE\u7684\u6807\u51C6\u3002\u7279\u70B9\u662F\uFF1A\u901F\u5EA6\u5FEB\u3001\u7B7E\u540D\u77ED\u3001\u5F3A\u5EA6\u9AD8\u3002\u5728JDK1.7update4\u4E4B\u540E\u63D0\u4F9B\u4E86\u5BF9ECDSA\u7684\u652F\u6301\u3002\u8BE5\u7B7E\u540D\u7684\u7B97\u6CD5\u4E5F\u548CRSA\u7684\u6570\u5B57\u7B7E\u540D\u7B97\u6CD5\u4E5F\u662F\u5927\u540C\u5C0F\u5F02\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Signature;\r\nimport java.security.interfaces.ECPrivateKey;\r\nimport java.security.interfaces.ECPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DigitalSignECDSA {\r\n    //\u516C\u94A5\r\n    private static final String PUBLIC_KEY = "ECDSAPublicKey";\r\n    //\u79C1\u94A5\r\n    private static final String PRIVATE_KEY = "ECDSAPrivateKey";\r\n \r\n    /** \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\r\n     * @return Map \u5BC6\u94A5\u5BF9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("EC");\r\n            // \u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\uFF0C\u5BC6\u94A5\u5927\u5C0F\u4E3A256\u4F4D\r\n            keyPairGenerator.initialize(256, new SecureRandom());\r\n            //\u751F\u6210\u5BC6\u94A5\u5BF9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516C\u94A5\r\n            ECPublicKey publicKey = (ECPublicKey) keyPair.getPublic();\r\n            //\u79C1\u94A5\r\n            ECPrivateKey privateKey = (ECPrivateKey) keyPair.getPrivate();\r\n            //\u5C06\u5BC6\u94A5\u5BF9\u5B58\u50A8\u5728Map\u4E2D\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6267\u884C\u6570\u5B57\u7B7E\u540D\u3010\u79C1\u94A5\u7B7E\u540D\u3011\r\n     * @param data \u5F85\u52A0\u5BC6\u6570\u636E\r\n     * @param privKey  \u79C1\u94A5\r\n     * @return byte[] \u52A0\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] digitalSign(byte[] data, byte[] privKey) {\r\n        try {\r\n            PrivateKey privateKey = (PrivateKey) KeyFactory.getInstance("EC")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(privKey));\r\n            Signature signature = Signature.getInstance("SHA1WithECDSA");\r\n            signature.initSign(privateKey);\r\n            signature.update(data);\r\n            return signature.sign();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u9A8C\u8BC1\u7B7E\u540D\u3010\u516C\u94A5\u9A8C\u8BC1\u3011\r\n     * @param data \u5F85\u89E3\u5BC6\u6570\u636E\r\n     * @param pubKey  \u516C\u94A5\r\n     * @return byte[] \u89E3\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static boolean signVerify(byte[] data, byte[] rsaData, byte[] pubKey) {\r\n        try {\r\n            PublicKey publicKey = (PublicKey) KeyFactory.getInstance("EC")\r\n                    .generatePublic(new X509EncodedKeySpec(pubKey));\r\n            Signature signature = Signature.getInstance("SHA1WithECDSA");\r\n            signature.initVerify(publicKey);\r\n            signature.update(data);\r\n            return signature.verify(rsaData);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n \r\n    /** \u53D6\u5F97\u79C1\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u79C1\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53D6\u5F97\u516C\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u516C\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void ecdsa() {\r\n	//\u516C\u94A5\r\n	byte[] publicKey;\r\n	//\u79C1\u94A5\r\n	byte[] privateKey;\r\n	//\u521D\u59CB\u5316\u5BC6\u94A5\r\n	//\u751F\u6210\u5BC6\u94A5\u5BF9\r\n	Map<String, Object> keyMap = DigitalSignECDSA.initKey();\r\n	publicKey = DigitalSignECDSA.getPublicKey(keyMap);\r\n	privateKey = DigitalSignECDSA.getPrivateKey(keyMap);\r\n	System.out.println("ECDSA\u516C\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n	System.out.println("ECDSA\u79C1\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n\r\n	System.out.println();\r\n	String msgA2B = "What can I do for you?";\r\n	//\u6267\u884C\u6570\u5B57\u7B7E\u540D\u3010\u79C1\u94A5\u7B7E\u540D\u3011\r\n	byte[] encodeMsgA2B = DigitalSignECDSA.digitalSign(msgA2B.getBytes(), privateKey);\r\n	System.out.println("JDK ECDSA\u7B7E\u540D\uFF1A:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n	//\u9A8C\u8BC1\u7B7E\u540D\u3010\u516C\u94A5\u9A8C\u8BC1\u3011\r\n	boolean bool = DigitalSignECDSA.signVerify(msgA2B.getBytes(), encodeMsgA2B, publicKey);\r\n	System.out.println("\u6570\u5B57\u7B7E\u540D\u662F\u5426\u6709\u6548\uFF1F:\\n" + bool);\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"dh",children:"DH"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\u975E\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\r\n\u52A0\u5BC6\u5BC6\u94A5\u5206\u4E3A\u516C\u94A5\u548C\u79C1\u94A5\u3002\u53EF\u4EE5\u4F7F\u7528\u516C\u94A5\u52A0\u5BC6\u79C1\u94A5\u89E3\u5BC6\uFF0C\u4E5F\u53EF\u4EE5\u4F7F\u7528\u79C1\u94A5\u52A0\u5BC6\u516C\u94A5\u89E3\u5BC6\u3002\u975E\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u4E3B\u8981\u6709\uFF1ADH\uFF08Diffie-Hellman\uFF09\u5BC6\u94A5\u4EA4\u6362\u7B97\u6CD5\u3001RSA\uFF08\u57FA\u4E8E\u56E0\u5B50\u5206\u89E3\uFF09\u3001Elgamal\uFF08\u57FA\u4E8E\u79BB\u6563\u5BF9\u6570\uFF09\u3001ECC\uFF08Elliptical Curve Cryptography\uFF0C\u692D\u5706\u66F2\u7EBF\u52A0\u5BC6\uFF09\u3002\r\nDH\uFF08\u5BC6\u94A5\u4EA4\u6362\uFF09\u7B97\u6CD5\r\n\u5982\u4F55\u5B89\u5168\u5730\u4F20\u9001\u5BC6\u94A5\u662F\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u7684\u75C7\u7ED3\u6240\u5728\u3002\u5BC6\u94A5\u4EA4\u6362\u7B97\u6CD5\u662F\u901A\u8FC7\u6784\u5EFA\u672C\u5730\u5BC6\u94A5\u6765\u89E3\u51B3\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u4E2D\u7684\u5BC6\u94A5\u4F20\u9012\u7684\u95EE\u9898\u7684\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyAgreement;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.interfaces.DHPrivateKey;\r\nimport javax.crypto.interfaces.DHPublicKey;\r\nimport javax.crypto.spec.DHParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\npublic class SecurityDH {\r\n    \r\n    /** \u4F7F\u7528DH\u65B9\u5F0F\u52A0\u89E3\u5BC6\u7684\u524D\u63D0\u6761\u4EF6\uFF1A\u5426\u5219\u62A5\u9519 java.security.NoSuchAlgorithmException: Unsupported secret key algorithm: AES\r\n     *     1.\u5F53\u524D\u5F00\u53D1\u73AF\u5883\u4E2D\u7684\u8FD0\u884C\u7684java\u7A0B\u5E8F, \u5728jre\u4E2D\u914D\u7F6E\u7F3A\u7701VM\u53D8\u91CF -Djdk.crypto.KeyAgreement.legacyKDF=true\r\n     *         A.\u70B9\u51FB\u7A97\u53E3\uFF0C\u9009\u62E9\u9996\u9009\u9879  B.\u70B9\u51FBinstalled JREs, \u9009\u62E9JRE\u914D\u7F6E\uFF0C\u7136\u540E\u7F16\u8F91  C.\u5728\u7F3A\u7701VM\u53C2\u6570\uFF1A-Djdk.crypto.KeyAgreement.legacyKDF=true\r\n     *  2.\u53EF\u8FD0\u884Cjar\u5305\uFF0C\u5219\u9700\u8981\u5728\u8FD0\u884C\u65F6\u91C7\u7528\u547D\u4EE4\u63D0\u793A\u7B26\u8FD0\u884C\uFF0C\u5728\u8FD0\u884C\u65F6\u6DFB\u52A0VM\u53C2\u6570\uFF0C\u8FD0\u884C\u547D\u4EE4\u4E3A\uFF1Ajava -jar -Djdk.crypto.KeyAgreement.legacyKDF=true jarPackName.jar\r\n     *         A.\u7F16\u8F91\u53EF\u6267\u884C\u6587\u4EF6\uFF0C\u914D\u7F6EVM\u53C2\u6570\uFF1A-Djdk.crypto.KeyAgreement.legacyKDF=true\r\n     */\r\n    \r\n    /** \u672C\u5730\u5BC6\u94A5\u7B97\u6CD5\uFF0C\u5373\u5BF9\u79F0\u52A0\u5BC6\u5BC6\u94A5\u7B97\u6CD5  \u53EF\u9009DES\u3001DESede\u6216\u8005AES*/\r\n    private static final String SELECT_ALGORITHM = "AES";\r\n    /** \u9ED8\u8BA4\u7684\u52A0\u5BC6\u7B97\u6CD5 */\r\n    private static final String DEFAULT_CIPHER_ALGORITHM = "AES/ECB/PKCS5Padding";\r\n    /** \u5BC6\u94A5\u957F\u5EA6 */\r\n    private static final int KEY_SIZE = 512;\r\n    //\u516C\u94A5\r\n    private static final String PUBLIC_KEY = "DHPublicKey";\r\n    //\u79C1\u94A5\r\n    private static final String PRIVATE_KEY = "DHPrivateKey";\r\n \r\n    /**  \u521D\u59CB\u5316\u7532\u65B9\u5BC6\u94A5\r\n     * @return Map \u7532\u65B9\u5BC6\u94A5Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DH");\r\n            //\u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            keyPairGenerator.initialize(KEY_SIZE);\r\n            //\u751F\u6210\u5BC6\u94A5\u5BF9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u7532\u65B9\u516C\u94A5\r\n            DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();\r\n            //\u7532\u65B9\u79C1\u94A5\r\n            DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();\r\n            //\u5C06\u5BC6\u94A5\u5BF9\u5B58\u50A8\u5728Map\u4E2D\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u521D\u59CB\u5316\u4E59\u65B9\u5BC6\u94A5\r\n     * @param key \u7532\u65B9\u516C\u94A5\r\n     * @return Map \u4E59\u65B9\u5BC6\u94A5Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey(byte[] key) {\r\n        try {\r\n            //\u89E3\u6790\u7532\u65B9\u516C\u94A5\r\n            //\u8F6C\u6362\u516C\u94A5\u6750\u6599\r\n            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(key);\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5DE5\u5382\r\n            KeyFactory keyFactory = KeyFactory.getInstance("DH");\r\n            //\u4EA7\u751F\u516C\u94A5\r\n            PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);\r\n            //\u7531\u7532\u65B9\u516C\u94A5\u6784\u5EFA\u4E59\u65B9\u5BC6\u94A5\r\n            DHParameterSpec dhParameterSpec = ((DHPublicKey) pubKey).getParams();\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DH");\r\n            //\u521D\u59CB\u5316\u5BC6\u94A5\u5BF9\u751F\u6210\u5668\r\n            keyPairGenerator.initialize(dhParameterSpec);\r\n            //\u4EA7\u751F\u5BC6\u94A5\u5BF9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u4E59\u65B9\u516C\u94A5\r\n            DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();\r\n            //\u4E59\u65B9\u79C1\u7EA6\r\n            DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();\r\n            //\u5C06\u5BC6\u94A5\u5BF9\u5B58\u50A8\u5728Map\u4E2D\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u751F\u6210\u52A0\u5BC6\u79D8\u94A5\r\n     * @return\r\n     */\r\n    private static SecretKeySpec getSecretKey(final byte[] key) {\r\n        //\u8FD4\u56DE\u751F\u6210\u6307\u5B9A\u7B97\u6CD5\u5BC6\u94A5\u751F\u6210\u5668\u7684 KeyGenerator \u5BF9\u8C61\r\n        KeyGenerator kg = null;\r\n        try {\r\n            kg = KeyGenerator.getInstance(SELECT_ALGORITHM);\r\n            //AES \u8981\u6C42\u5BC6\u94A5\u957F\u5EA6\u4E3A 128\r\n            kg.init(128, new SecureRandom(key));\r\n            //\u751F\u6210\u4E00\u4E2A\u5BC6\u94A5\r\n            SecretKey secretKey = kg.generateKey();\r\n            return new SecretKeySpec(secretKey.getEncoded(), SELECT_ALGORITHM);// \u8F6C\u6362\u4E3AAES\u4E13\u7528\u5BC6\u94A5\r\n        } catch (NoSuchAlgorithmException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n \r\n        return null;\r\n    }\r\n \r\n    /** \u52A0\u5BC6\r\n     * @param data \u5F85\u52A0\u5BC6\u6570\u636E\r\n     * @param key  \u5BC6\u94A5\r\n     * @return byte[] \u52A0\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] encrypt(byte[] data, byte[] key) {\r\n        try {\r\n            Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);// \u521B\u5EFA\u5BC6\u7801\u5668\r\n            byte[] byteContent = data;\r\n            cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(key));// \u521D\u59CB\u5316\u4E3A\u52A0\u5BC6\u6A21\u5F0F\u7684\u5BC6\u7801\u5668\r\n            byte[] result = cipher.doFinal(byteContent);// \u52A0\u5BC6\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /**  \u89E3\u5BC6\r\n     * @param data \u5F85\u89E3\u5BC6\u6570\u636E\r\n     * @param key  \u5BC6\u94A5\r\n     * @return byte[] \u89E3\u5BC6\u6570\u636E\r\n     * @throws Exception\r\n     */\r\n    public static byte[] decrypt(byte[] data, byte[] key) {\r\n        try {\r\n            //\u5B9E\u4F8B\u5316\r\n            Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);\r\n            //\u4F7F\u7528\u5BC6\u94A5\u521D\u59CB\u5316\uFF0C\u8BBE\u7F6E\u4E3A\u89E3\u5BC6\u6A21\u5F0F\r\n            cipher.init(Cipher.DECRYPT_MODE, getSecretKey(key));\r\n            //\u6267\u884C\u64CD\u4F5C\r\n            byte[] result = cipher.doFinal(data);\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6784\u5EFA\u5BC6\u94A5\r\n     * @param publicKey  \u516C\u94A5\r\n     * @param privateKey \u79C1\u94A5\r\n     * @return byte[] \u672C\u5730\u5BC6\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getSecretKey(byte[] publicKey, byte[] privateKey) {\r\n        try {\r\n            //\u5B9E\u4F8B\u5316\u5BC6\u94A5\u5DE5\u5382\r\n            KeyFactory keyFactory = KeyFactory.getInstance("DH");\r\n            //\u521D\u59CB\u5316\u516C\u94A5\r\n            //\u5BC6\u94A5\u6750\u6599\u8F6C\u6362\r\n            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKey);\r\n            //\u4EA7\u751F\u516C\u94A5\r\n            PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);\r\n            //\u521D\u59CB\u5316\u79C1\u94A5\r\n            //\u5BC6\u94A5\u6750\u6599\u8F6C\u6362\r\n            PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKey);\r\n            //\u4EA7\u751F\u79C1\u94A5\r\n            PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);\r\n            //\u5B9E\u4F8B\u5316\r\n            KeyAgreement keyAgree = KeyAgreement.getInstance(keyFactory.getAlgorithm());\r\n            //\u521D\u59CB\u5316\r\n            keyAgree.init(priKey);\r\n            keyAgree.doPhase(pubKey, true);\r\n            //\u751F\u6210\u672C\u5730\u5BC6\u94A5\r\n            SecretKey secretKey = keyAgree.generateSecret(SELECT_ALGORITHM);\r\n            return secretKey.getEncoded();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u53D6\u5F97\u79C1\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u79C1\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53D6\u5F97\u516C\u94A5\r\n     * @param keyMap \u5BC6\u94A5Map\r\n     * @return byte[] \u516C\u94A5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void dh() {\r\n	//\u7532\u65B9\u516C\u94A5\r\n	byte[] publicKeyA;\r\n	//\u7532\u65B9\u79C1\u94A5\r\n	byte[] privateKeyA;\r\n	//\u7532\u65B9\u672C\u5730\u5BC6\u94A5\r\n	byte[] localKeyA;\r\n	//\u4E59\u65B9\u516C\u94A5\r\n	byte[] publicKeyB;\r\n	//\u4E59\u65B9\u79C1\u94A5\r\n	byte[] privateKeyB;\r\n	//\u4E59\u65B9\u672C\u5730\u5BC6\u94A5\r\n	byte[] localKeyB;\r\n\r\n	//\u521D\u59CB\u5316\u5BC6\u94A5\r\n	//\u751F\u6210\u7532\u65B9\u5BC6\u94A5\u5BF9\r\n	Map<String, Object> keyMapA = SecurityDH.initKey();\r\n	publicKeyA = SecurityDH.getPublicKey(keyMapA);\r\n	privateKeyA = SecurityDH.getPrivateKey(keyMapA);\r\n	System.out.println("\u7532\u65B9\u516C\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKeyA));\r\n	System.out.println("\u7532\u65B9\u79C1\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKeyA));\r\n	//\u7531\u7532\u65B9\u516C\u94A5\u4EA7\u751F\u4E59\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\r\n	Map<String, Object> keyMapB = SecurityDH.initKey(publicKeyA);\r\n	publicKeyB = SecurityDH.getPublicKey(keyMapB);\r\n	privateKeyB = SecurityDH.getPrivateKey(keyMapB);\r\n	System.out.println("\u4E59\u65B9\u516C\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKeyB));\r\n	System.out.println("\u4E59\u65B9\u79C1\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKeyB));\r\n	localKeyA = SecurityDH.getSecretKey(publicKeyB, privateKeyA);\r\n	System.out.println("\u7532\u65B9\u672C\u5730\u5BC6\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(localKeyA));\r\n	localKeyB = SecurityDH.getSecretKey(publicKeyA, privateKeyB);\r\n	System.out.println("\u4E59\u65B9\u672C\u5730\u5BC6\u94A5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(localKeyB));\r\n\r\n	System.out.println();\r\n	System.out.println("===\u7532\u65B9\u5411\u4E59\u65B9\u53D1\u9001\u52A0\u5BC6\u6570\u636E===");\r\n	String msgA2B = "\u6C42\u77E5\u82E5\u9965\uFF0C\u865A\u5FC3\u82E5\u611A\u3002";\r\n	System.out.println("\u539F\u6587:\\n" + msgA2B);\r\n	System.out.println("---\u4F7F\u7528\u7532\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u52A0\u5BC6---");\r\n	//\u4F7F\u7528\u7532\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u52A0\u5BC6\r\n	byte[] encodeMsgA2B = SecurityDH.encrypt(msgA2B.getBytes(), localKeyA);\r\n	System.out.println("\u52A0\u5BC6:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n	System.out.println("---\u4F7F\u7528\u4E59\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u5E93\u8FDB\u884C\u89E3\u5BC6---");\r\n	//\u4F7F\u7528\u4E59\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u89E3\u5BC6\r\n	byte[] msgB2A = SecurityDH.decrypt(encodeMsgA2B, localKeyB);\r\n	String output1 = new String(msgB2A);\r\n	System.out.println("\u89E3\u5BC6:\\n" + output1);\r\n\r\n	System.out.println("/~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~..~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~/");\r\n	System.out.println("===\u4E59\u65B9\u5411\u7532\u65B9\u53D1\u9001\u52A0\u5BC6\u6570\u636E===");\r\n	String input2 = "\u597D\u597D\u5B66\u4E60\uFF0C\u5929\u5929\u5411\u4E0A\u3002";\r\n	System.out.println("\u539F\u6587:\\n" + input2);\r\n	System.out.println("---\u4F7F\u7528\u4E59\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u52A0\u5BC6---");\r\n	//\u4F7F\u7528\u4E59\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u52A0\u5BC6\r\n	byte[] encode2 = SecurityDH.encrypt(input2.getBytes(), localKeyB);\r\n	System.out.println("\u52A0\u5BC6:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encode2));\r\n	System.out.println("---\u4F7F\u7528\u7532\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u89E3\u5BC6---");\r\n	//\u4F7F\u7528\u7532\u65B9\u672C\u5730\u5BC6\u94A5\u5BF9\u6570\u636E\u8FDB\u884C\u89E3\u5BC6\r\n	byte[] decode2 = SecurityDH.decrypt(encode2, localKeyA);\r\n	String output2 = new String(decode2);\r\n	System.out.println("\u89E3\u5BC6:\\n" + output2);\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"pbe",children:"PBE"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"PBE\u7B97\u6CD5\u7ED3\u5408\u4E86\u6D88\u606F\u6458\u8981\u7B97\u6CD5\u548C\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u7684\u4F18\u70B9\uFF0C\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u5BF9\u79F0\u52A0\u5BC6\u7B97\u6CD5\u3002Password Based Encryption\uFF0C\u57FA\u4E8E\u53E3\u4EE4\u7684\u52A0\u5BC6\u3002\u56E0\u4E3A\u53E3\u4EE4\u662F\u6BD4\u8F83\u597D\u8BB0\u7684\uFF0C\u5C31\u5BB9\u6613\u901A\u8FC7\u7A77\u4E3E\u3001\u731C\u6D4B\u7684\u65B9\u5F0F\u83B7\u5F97\u53E3\u4EE4\u2014\u2014\u9488\u5BF9\u8FD9\u79CD\u60C5\u51B5\uFF0C\u6211\u4EEC\u91C7\u7528\u7684\u65B9\u5F0F\u662F\u52A0\u76D0\uFF08Salt\uFF09\uFF0C\u901A\u8FC7\u52A0\u5165\u4E00\u4E9B\u989D\u5916\u7684\u5185\u5BB9\uFF08\u901A\u5E38\u662F\u968F\u673A\u5B57\u7B26\uFF09\u53BB\u6270\u4E71\u3002\u5B9E\u73B0\u7684\u65B9\u5F0F\u67092\u79CD\uFF1AJDK\u548CBC\u3002\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'import java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.PBEKeySpec;\r\nimport javax.crypto.spec.PBEParameterSpec;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityPBE {\r\n    \r\n    public static String PBE_MODE_JDK = "jdk";\r\n    public static String PBE_MODE_BC = "bouncyCastle";\r\n    private PBEParameterSpec parameterSpec;\r\n    private Key key;\r\n    \r\n    //\u5355\u4F8B\u6A21\u5F0F\r\n    private static SecurityPBE securityPBE;\r\n    public static SecurityPBE getInstance(String password, String succurityMode) {\r\n        if(securityPBE == null) {\r\n            securityPBE = new SecurityPBE(password, succurityMode);\r\n        }\r\n        return securityPBE;\r\n    }\r\n    \r\n    private SecurityPBE(String password, String succurityMode)  {\r\n        try{\r\n            //1.\u521D\u59CB\u5316\u76D0\r\n            SecureRandom secureRandom = new SecureRandom();//\u5F3A\u52A0\u5BC6\u968F\u673A\u6570\u751F\u6210\u5668\r\n            byte[] salt= secureRandom.generateSeed(8);//\u4EA7\u751F\u76D0\u5FC5\u987B\u662F8\u4F4D\r\n            //2.\u53E3\u4EE4\u4E0E\u5BC6\u94A5\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(PBE_MODE_BC, succurityMode)) {\r\n                Security.addProvider(new BouncyCastleProvider());//\u6DFB\u52A0\u5230provider\r\n                PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\r\n                SecretKeyFactory factory = SecretKeyFactory.getInstance("PBEWithMD5AndDES","BC");//\u6307\u5B9Aprovider\r\n                key = factory.generateSecret(pbeKeySpec);\r\n                parameterSpec = new PBEParameterSpec(salt, 50);\r\n            }else {\r\n                PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());//\u5BC6\u94A5\u8F6C\u6362\u7684\u5BF9\u8C61\r\n                SecretKeyFactory factory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");//\u5B9E\u4F8B\u5316\u5BC6\u94A5\u8F6C\u6362\u5DE5\u5382\r\n                key = factory.generateSecret(pbeKeySpec);//\u7531\u5DE5\u5382\u4EA7\u751Fkey\r\n                parameterSpec = new PBEParameterSpec(salt, 100);//PBE\u8F93\u5165\u53C2\u6570\u7684\u6750\u6599\uFF0C\u76D0\uFF0C\u8FED\u4EE3100\u6B21\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);\r\n            byte[] result = cipher.doFinal(array);\r\n            return result;\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\r\n            cipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void pbe() {\r\n	String src = "\u9762\u5411\u5BF9\u8C61\u7F16\u7A0B\uFF0Cobject-oriented\uFF01@#*5"; // \u9700\u8981\u52A0\u5BC6\u7684\u539F\u59CB\u5B57\u7B26\u4E32\r\n	String password = "123456";\r\n	SecurityPBE securityJdkPBE1 = SecurityPBE.getInstance(password, SecurityPBE.PBE_MODE_JDK);\r\n	byte[] encodeJdkPBE = securityJdkPBE1.encrypt(src.getBytes());\r\n	System.out.println("JDK PBE\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeJdkPBE));\r\n	SecurityPBE securityJdkPBE2 = SecurityPBE.getInstance(password, SecurityPBE.PBE_MODE_JDK);\r\n	byte[] decodeJdkPBE = securityJdkPBE2.decrypt(encodeJdkPBE);\r\n	System.out.println("JDK PBE\u89E3\u5BC6\uFF1A" + new String(decodeJdkPBE));\r\n\r\n	SecurityPBE securityBcPBE = SecurityPBE.getInstance(password, SecurityDES3.DES3_MODE_BC);\r\n	byte[] encodeBcPBE = securityBcPBE.encrypt(src.getBytes());\r\n	System.out.println("bouncyCastle PBE\u52A0\u5BC6\uFF1A" + Base64.getEncoder().encode(encodeBcPBE));\r\n	byte[] decodeBcPBE = securityBcPBE.decrypt(encodeBcPBE);\r\n	System.out.println("bouncyCastle PBE\u89E3\u5BC6\uFF1A" + new String(decodeBcPBE));\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"mac",children:"MAC"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"\u6D88\u606F\u6458\u8981\u7B97\u6CD5\u2014\u2014MAC\r\nMAC(Message Authentication Code)\uFF0C\u517C\u5BB9\u4E86MD\u548CSHA\u7684\u7279\u6027\uFF0C\u5E76\u4E14\u5728\u5B83\u4EEC\u7684\u57FA\u7840\u4E0A\u52A0\u5165\u4E86\u5BC6\u94A5\u3002\u56E0\u6B64MAC\u4E5F\u79F0\u4E3AHMAC\uFF08keyed-Hash Message Authentication Code\uFF09\u542B\u6709\u5BC6\u94A5\u7684\u6563\u5217\u51FD\u6570\u7B97\u6CD5\u3002\r\nMD\u7CFB\u5217\uFF1AHmacMD2\u3001HmacMD4\u3001HmacMD5\r\nSHA\u7CFB\u5217\uFF1AHmacSHA1\u3001HmacSHA224\u3001HmacSHA256\u3001HmacSHA384\u3001HmacSHA512\n"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.InvalidKeyException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport javax.crypto.Mac;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport org.apache.commons.codec.DecoderException;\r\nimport org.apache.commons.codec.binary.Hex;\r\nimport org.bouncycastle.crypto.digests.MD5Digest;\r\nimport org.bouncycastle.crypto.macs.HMac;\r\nimport org.bouncycastle.crypto.params.KeyParameter;\r\n\r\npublic class SecurityMac {\r\n    /**\r\n     * MAC(Message Authentication\r\n     * Code)\uFF0C\u517C\u5BB9\u4E86MD\u548CSHA\u7684\u7279\u6027\uFF0C\u5E76\u4E14\u5728\u5B83\u4EEC\u7684\u57FA\u7840\u4E0A\u52A0\u5165\u4E86\u5BC6\u94A5\u3002\u56E0\u6B64MAC\u4E5F\u79F0\u4E3AHMAC\uFF08keyed-Hash Message\r\n     * Authentication Code\uFF09\u542B\u6709\u5BC6\u94A5\u7684\u6563\u5217\u51FD\u6570\u7B97\u6CD5\u3002 MD\u7CFB\u5217\uFF1AHmacMD2\u3001HmacMD4\u3001HmacMD5\r\n     * SHA\u7CFB\u5217\uFF1AHmacSHA1\u3001HmacSHA224\u3001HmacSHA256\u3001HmacSHA384\u3001HmacSHA512\r\n     * \u4F8B\u5982\uFF1A\u5E38\u7528\u7684Linux\u5BA2\u6237\u7AEFSecurityCRT\r\n     */\r\n    \r\n    private static String privateKey = "aabbccddee";\r\n    \r\n    /**\r\n     * HmacMD5\u52A0\u5BC6\u7B97\u6CD5\r\n     * @return\r\n     */\r\n    public static String jdkHmacMD5(String src) {\r\n        byte[] hmacMD5Bytes = null;\r\n        try {\r\n            // 1.\u5F97\u5230\u5BC6\u94A5\r\n//            KeyGenerator keyGenerator = KeyGenerator.getInstance("HmacMD5");\r\n//            SecretKey secretKey = keyGenerator.generateKey();// \u751F\u6210\u5BC6\u94A5\r\n//            byte[] key = secretKey.getEncoded();//\u83B7\u5F97\u5BC6\u94A5\r\n            // 2.\u8FD8\u539F\u5BC6\u94A5\r\n            byte[] privKey = Hex.decodeHex(privateKey.toCharArray());\r\n            SecretKey restoreSecretKey = new SecretKeySpec(privKey, "HmacMD5");\r\n            // 3.\u4FE1\u606F\u6458\u8981\r\n            Mac mac = Mac.getInstance(restoreSecretKey.getAlgorithm());// \u5B9E\u4F8B\u5316mac\r\n            mac.init(restoreSecretKey);// \u521D\u59CB\u5316mac\r\n            hmacMD5Bytes = mac.doFinal(src.getBytes());// \u6267\u884C\u6458\u8981\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        } catch (DecoderException e) {\r\n            e.printStackTrace();\r\n        } catch (InvalidKeyException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Hex.encodeHexString(hmacMD5Bytes);\r\n    }\r\n    \r\n    /**\r\n     * HmacMD5\u52A0\u5BC6\u7B97\u6CD5\r\n     * @return\r\n     */\r\n    public static String bouncyCastleHmacMD5(String src) {\r\n        HMac hmac = new HMac(new MD5Digest());\r\n        //\u751F\u6210\u5BC6\u94A5\u7684\u65F6\u5019\u4EE5aabbccddee\u4E3A\u57FA\u51C6\r\n        hmac.init(new KeyParameter(org.bouncycastle.util.encoders.Hex.decode(privateKey)));\r\n        hmac.update(src.getBytes(), 0, src.getBytes().length);\r\n        // \u6267\u884C\u6458\u8981\r\n        byte[]hmacMDdBytes = new byte[hmac.getMacSize()];\r\n        hmac.doFinal(hmacMDdBytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(hmacMDdBytes));\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'@Test\r\npublic void mac() {\r\n	String src = "object-oriente";\r\n	System.out.println("jdkHmacMD5:\\t" + SecurityMac.jdkHmacMD5(src));\r\n	System.out.println("bcHmacMD5:\\t"+ SecurityMac.bouncyCastleHmacMD5(src));\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u54C8\u5E0C\u7B97\u6CD5",children:"\u54C8\u5E0C\u7B97\u6CD5"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\u54C8\u5E0C\u7B97\u6CD5\u53EF\u4EE5\u7B80\u5355\u5206\u4E3A\u4E24\u7C7B"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"\u52A0\u5BC6\u54C8\u5E0C\u7B97\u6CD5"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\u5B89\u5168\u6027\u8F83\u9AD8\u7684\u54C8\u5E0C\u7B97\u6CD5\uFF0C\u5B83\u53EF\u4EE5\u63D0\u4F9B\u4E00\u5B9A\u7684\u6570\u636E\u5B8C\u6574\u6027\u4FDD\u62A4\u548C\u6570\u636E\u9632\u7BE1\u6539\u80FD\u529B\uFF0C\u80FD\u591F\u62B5\u5FA1\u4E00\u5B9A\u7684\u653B\u51FB\u624B\u6BB5\uFF0C\u5B89\u5168\u6027\u76F8\u5BF9\u8F83\u9AD8\uFF0C\u4F46\u6027\u80FD\u8F83\u5DEE\uFF0C\u9002\u7528\u4E8E\u5BF9\u5B89\u5168\u6027\u8981\u6C42\u8F83\u9AD8\u7684\u573A\u666F\u3002\u4F8B\u5982 SHA2\u3001SHA3\u3001SM3\u3001RIPEMD-160\u3001BLAKE2\u3001SipHash \u7B49\u7B49"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"\u975E\u52A0\u5BC6\u54C8\u5E0C\u7B97\u6CD5"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"\u5B89\u5168\u6027\u76F8\u5BF9\u8F83\u4F4E\u7684\u54C8\u5E0C\u7B97\u6CD5\uFF0C\u6613\u53D7\u5230\u66B4\u529B\u7834\u89E3\u3001\u51B2\u7A81\u653B\u51FB\u7B49\u653B\u51FB\u624B\u6BB5\u7684\u5F71\u54CD\uFF0C\u4F46\u6027\u80FD\u8F83\u9AD8\uFF0C\u9002\u7528\u4E8E\u5BF9\u5B89\u5168\u6027\u6CA1\u6709\u8981\u6C42\u7684\u4E1A\u52A1\u573A\u666F\u3002\u4F8B\u5982 CRC32\u3001MurMurHash3\u3001SipHash \u7B49\u7B49"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["\u9664\u4E86\u8FD9\u4E24\u79CD\u4E4B\u5916\uFF0C\u8FD8\u6709\u4E00\u4E9B\u7279\u6B8A\u7684\u54C8\u5E0C\u7B97\u6CD5\uFF0C\u4F8B\u5982\u5B89\u5168\u6027\u66F4\u9AD8\u7684",(0,i.jsx)(e.strong,{children:"\u6162\u54C8\u5E0C\u7B97\u6CD5"}),"\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"\u79C1\u94A5\u516C\u94A5\u7B7E\u8BC1\u52A0\u5BC6",children:"\u79C1\u94A5\u516C\u94A5\u7B7E\u8BC1\u52A0\u5BC6"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'//utf-8\u7F16\u7801/\u89E3\u5BC6\r\nString encode = URLEncoder.encode("\u6D4B\u8BD5", "UTF-8");\r\nString decode = URLDecoder.decode("\u6D4B\u8BD5", "UTF-8");\r\n\r\n//Private\u8F6C\u6210String\r\nBase64.getEncoder().encodeToString(privateKey.getEncoded());\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'//\u81EA\u5B9A\u4E49\u5B9E\u73B0 -- utf-8\u7F16\u7801/\u89E3\u5BC6\r\npublic class EncodingUtil {\r\n public static String decodeURIComponent(String s) {\r\n   if (s == null) {\r\n    return null;\r\n   }\r\n   String result = null;\r\n   try {\r\n    result = URLDecoder.decode(s, "UTF-8");\r\n   }catch (UnsupportedEncodingException e) {\r\n    result = s;\r\n   }\r\n   return result;\r\n }\r\n public static String encodeURIComponent(String s) {\r\n   String result = null;\r\n   try {\r\n     result = URLEncoder.encode(s, "UTF-8")\r\n               .replaceAll("\\\\+", "%20")\r\n               .replaceAll("\\\\%21", "!")\r\n               .replaceAll("\\\\%27", "\'")\r\n               .replaceAll("\\\\%28", "(")\r\n               .replaceAll("\\\\%29", ")")\r\n               .replaceAll("\\\\%7E", "~");\r\n   }catch (UnsupportedEncodingException e) {\r\n     result = s;\r\n   }\r\n   return result;\r\n } \r\n  private EncodingUtil() {\r\n   super();\r\n  }\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'/**\r\n * pfx\u83B7\u53D6\u79C1\u94A5\u522B\u540D\u7B49\u4FE1\u606F\r\n */\r\npublic static byte[] getPrivateKeyInfo(String content){\r\n    String keyAlias = null;\r\n    try{\r\n        KeyStore keyStore = KeyStore.getInstance("PKCS12");\r\n        FileInputStream fileInputStream = new FileInputStream(new ClassPathResource(PRIVATE_ADDRESS).getFile());\r\n        char[] nPassword = PRIVATE_PASSWORD.toCharArray();\r\n        keyStore.load(fileInputStream, nPassword);\r\n        fileInputStream.close();\r\n        log.info( "keystore type=" + keyStore.getType());\r\n        Enumeration<String> enumeration = keyStore.aliases();\r\n        if (enumeration.hasMoreElements()){\r\n            keyAlias = enumeration.nextElement();\r\n            log.info( "alias=[" + keyAlias + "]");\r\n        }\r\n        log.info( "is key entry=" + keyStore.isKeyEntry(keyAlias));\r\n        PrivateKey privateKey = (PrivateKey) keyStore.getKey(keyAlias, nPassword);\r\n        System.out.println("private: "+Base64.getEncoder().encodeToString(privateKey.getEncoded()));\r\n        Certificate cert = keyStore.getCertificate(keyAlias);\r\n        PublicKey publickey = cert.getPublicKey();\r\n        // \u5BFC\u51FA\u4E3A cer \u8BC1\u4E66\r\n        try {\r\n            FileOutputStream fos = new FileOutputStream("C:\\\\Users\\\\chenx\\\\Desktop\\\\test" + ".cer");\r\n            fos.write(cert.getEncoded());\r\n            fos.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println("public: "+Base64.getEncoder().encodeToString(publickey.getEncoded()));\r\n        log.info( "cert class = " + cert.getClass().getName());\r\n        log.info( "cert = " + cert);\r\n        log.info( "public key = " + publickey);\r\n        log.info( "private key = " + privateKey);\r\n        //\u79C1\u94A5\u7B7E\u540D\r\n        byte[] signOne = sign(content, privateKey) ;\r\n        log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>\u7B7E\u540D\u540E>>>>>>>>>>>>\\n" + new String(Base64.getEncoder().encode(signOne)));\r\n        //\u516C\u94A5\u9A8C\u7B7E\r\n        boolean verifySign = verify(content,signOne,publickey);\r\n        log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\u9A8C\u7B7E\u7ED3\u679C>>>>>>>>>>>>>>>>\\n" + verifySign);\r\n        if (verifySign){\r\n            return signOne;\r\n        }\r\n    } catch (Exception e){\r\n        log.error(e.getMessage());\r\n    }\r\n    return new byte[0];\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'//\u79C1\u94A5\u7B7E\u540D\r\npublic static byte[] sign(String content, PrivateKey priKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\r\n    //\u8FD9\u91CC\u53EF\u4EE5\u4ECE\u8BC1\u4E66\u4E2D\u89E3\u6790\u51FA\u7B7E\u540D\u7B97\u6CD5\u540D\u79F0\r\n    //Signature signature = Signature.getInstance(getSigAlgName(pubCert));\r\n    Signature signature = Signature.getInstance("SHA256withRSA");\r\n    signature.initSign(priKey);\r\n    signature.update(content.getBytes());\r\n    return signature.sign();\r\n}\r\n//\u516C\u94A5\u9A8C\u7B7E\r\npublic static boolean verify(String content, byte[] sign, PublicKey pubKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\r\n    //\u8FD9\u91CC\u53EF\u4EE5\u4ECE\u8BC1\u4E66\u4E2D\u89E3\u6790\u51FA\u7B7E\u540D\u7B97\u6CD5\u540D\u79F0\r\n    //Signature signature = Signature.getInstance(getSigAlgName(priCert));\r\n    Signature signature = Signature.getInstance("SHA256withRSA");\r\n    signature.initVerify(pubKey);\r\n    signature.update(content.getBytes());\r\n    return signature.verify(sign);\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'//\u53C2\u6570\u6392\u5E8F -- \u6309\u5B57\u6BCD\u987A\u5E8F\r\nprivate static String getSordBaseParamsStr(String jose,String nonce,String timestamp) {\r\n    Map<String,String> params = getHeaderMaps(nonce,timestamp);\r\n    params.put("jose", jose);\r\n    TreeMap<String, String> sorted = new TreeMap<>(params);\r\n    Set<String> keys = params.keySet();\r\n    for (String key : keys) {\r\n        sorted.put(key, params.get(key));\r\n    }\r\n    StringBuilder builder = new StringBuilder();\r\n    for (Map.Entry<String, String> entry : sorted.entrySet()) {\r\n        if (builder.length() > 0) {\r\n            builder.append("&");\r\n        }\r\n        builder.append(entry.getKey()).append("=");\r\n        if (null != entry.getValue()) {\r\n            builder.append(entry.getValue());\r\n        }\r\n\r\n    }\r\n    log.info("*******sb.tostring:" + builder.toString());\r\n    return builder.toString();\r\n}\n'})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'/**\r\n     * \u83B7\u53D6\u79C1\u94A5\u522B\u540D\u7B49\u4FE1\u606F\r\n     */\r\npublic static PrivateKey getPrivateKeyInfo() {\r\n    String privKeyFileString = SHA256WithRSASignatureUtil.PRIVATE_ADDRESS;\r\n    String privKeyPswdString = SHA256WithRSASignatureUtil.PRIVATE_PASSWORD;\r\n    String keyAlias = null;\r\n    try\r\n    {\r\n        KeyStore keyStore = KeyStore.getInstance( "PKCS12");\r\n        FileInputStream fileInputStream = new FileInputStream(new ClassPathResource(privKeyFileString).getFile());\r\n        char[] nPassword = privKeyPswdString.toCharArray();\r\n        keyStore.load(fileInputStream, nPassword);\r\n        fileInputStream.close();\r\n        log.info( "keystore type=" + keyStore.getType());\r\n        Enumeration<String> enumeration = keyStore.aliases();\r\n        if (enumeration.hasMoreElements())\r\n        {\r\n            keyAlias = enumeration.nextElement();\r\n            log.info( "alias=[" + keyAlias + "]");\r\n        }\r\n        log.info( "is key entry=" + keyStore.isKeyEntry(keyAlias));\r\n        return  (PrivateKey) keyStore.getKey(keyAlias, nPassword);\r\n    } catch (Exception e) {\r\n        log.error("-------\u83B7\u53D6\u79C1\u94A5\u5931\u8D25------",e);\r\n        throw new JeecgBootException("\u83B7\u53D6\u79C1\u94A5\u5931\u8D25");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n     * \u83B7\u53D6\u516C\u94A5\u522B\u540D\u7B49\u4FE1\u606F\r\n     */\r\npublic static PublicKey getPublicKeyInfo()  {\r\n    String privKeyFileString = SHA256WithRSASignatureUtil.PRIVATE_ADDRESS;\r\n    String privKeyPswdString = SHA256WithRSASignatureUtil.PRIVATE_PASSWORD;\r\n    String keyAlias = null;\r\n    try{\r\n        KeyStore keyStore = KeyStore.getInstance( "PKCS12");\r\n        FileInputStream fileInputStream = new FileInputStream(new ClassPathResource(privKeyFileString).getFile());\r\n        char[] nPassword = privKeyPswdString.toCharArray();\r\n        keyStore.load(fileInputStream, nPassword);\r\n        fileInputStream.close();\r\n        log.info( "keystore type=" + keyStore.getType());\r\n        Enumeration<String> enumeration = keyStore.aliases();\r\n        if (enumeration.hasMoreElements()) {\r\n            keyAlias = enumeration.nextElement();\r\n            log.info( "alias=[" + keyAlias + "]");\r\n        }\r\n        return keyStore.getCertificate(keyAlias).getPublicKey();\r\n    } catch (Exception e) {\r\n        log.error("------\u83B7\u53D6\u516C\u94A5\u5931\u8D25-----",e);\r\n        throw new JeecgBootException("\u83B7\u53D6\u516C\u94A5\u5931\u8D25");\r\n    }\r\n}\r\n\r\n/**\r\n     * \u52A0\u5BC6\u6570\u636E\r\n     * @param publicKey\r\n     * @param payload\r\n     * @return\r\n     * @throws Exception\r\n     */\r\nprivate static String jweEncryption(Key publicKey, String payload)\r\n\r\n    throws Exception {\r\n\r\n    System.out.println("Payload before encryption :: " + payload);\r\n\r\n    /*Encryption*/\r\n\r\n    JWEHeader header = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP, EncryptionMethod.A256GCM).build();\r\n\r\n\r\n    JWEEncrypter encryptedJWE = new RSAEncrypter((RSAPublicKey) publicKey);\r\n    JWEObject jweObject = new JWEObject(header, new Payload(getSignedContent(payload)));\r\n\r\n    jweObject.encrypt(encryptedJWE);\r\n\r\n\r\n    return jweObject.serialize();\r\n\r\n}\r\n\r\npublic static JWSObject getSignedContent(String content) {\r\n    Payload contentPayload = new Payload(content);\r\n\r\n    try {\r\n        RSASSASigner rsa = new RSASSASigner(getPrivateKeyInfo());\r\n        JWSHeader header = new JWSHeader(JWSAlgorithm.RS256);\r\n        JWSObject jws = new JWSObject(header, contentPayload);\r\n        jws.sign(rsa);\r\n        return jws;\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\r\n\r\nprivate static String decryptJWE(String data){\r\n    JWEObject jweObject;\r\n    try {\r\n        jweObject = JWEObject.parse(data);\r\n        // Decrypt with shared key\r\n        jweObject.decrypt(new RSADecrypter(getPrivateKeyInfo()));\r\n\r\n        // Extract payload\r\n        SignedJWT signedJWT = jweObject.getPayload().toSignedJWT();\r\n\r\n        if (signedJWT.verify(new RSASSAVerifier((RSAPublicKey) getPublicKeyInfo()))) {\r\n            //\u89E3\u5BC6\u6570\u636E\r\n            return jweObject.getPayload().toString();\r\n        }\r\n    } catch (ParseException | JOSEException e) {\r\n        log.error(String.valueOf(e));\r\n    }\r\n\r\n    return null;\r\n}\n'})}),"\n",(0,i.jsx)(e.h2,{id:"\u96EA\u82B1\u7B97\u6CD5",children:"\u96EA\u82B1\u7B97\u6CD5"}),"\n","\n",(0,i.jsx)(s.A,{behavior:"\u53C2\u8003",description:"\u3010Java\u5168\u6808\u77E5\u8BC6\u4F53\u7CFB\u3011\u5206\u5E03\u5F0F\u7B97\u6CD5-Snowflake\u7B97\u6CD5",url:"https://pdai.tech/md/algorithm/alg-domain-id-snowflake.html"}),"\n",(0,i.jsxs)(e.blockquote,{children:["\n",(0,i.jsx)(e.p,{children:"Snowflake\uFF0C\u96EA\u82B1\u7B97\u6CD5\u662F\u7531Twitter\u5F00\u6E90\u7684\u5206\u5E03\u5F0FID\u751F\u6210\u7B97\u6CD5\uFF0C\u4EE5\u5212\u5206\u547D\u540D\u7A7A\u95F4\u7684\u65B9\u5F0F\u5C06 64-bit\u4F4D\u5206\u5272\u6210\u591A\u4E2A\u90E8\u5206\uFF0C\u6BCF\u4E2A\u90E8\u5206\u4EE3\u8868\u4E0D\u540C\u7684\u542B\u4E49\u3002\u8FD9\u79CD\u5C31\u662F\u5C0664\u4F4D\u5212\u5206\u4E3A\u4E0D\u540C\u7684\u6BB5\uFF0C\u6BCF\u6BB5\u4EE3\u8868\u4E0D\u540C\u7684\u6DB5\u4E49\uFF0C\u57FA\u672C\u5C31\u662F\u65F6\u95F4\u6233\u3001\u673A\u5668ID\u548C\u5E8F\u5217\u6570\u3002\u4E3A\u4EC0\u4E48\u5982\u6B64\u91CD\u8981\uFF1F\u56E0\u4E3A\u5B83\u63D0\u4F9B\u4E86\u4E00\u79CDID\u751F\u6210\u53CA\u751F\u6210\u7684\u601D\u8DEF\uFF0C\u5F53\u7136\u8FD9\u79CD\u65B9\u6848\u5C31\u662F\u9700\u8981\u8003\u8651\u65F6\u949F\u56DE\u62E8\u7684\u95EE\u9898\u4EE5\u53CA\u505A\u4E00\u4E9B buffer\u7684\u7F13\u51B2\u8BBE\u8BA1\u63D0\u9AD8\u6027\u80FD\u3002"}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"Snowflake\uFF0C\u96EA\u82B1\u7B97\u6CD5\u662F\u7531Twitter\u5F00\u6E90\u7684\u5206\u5E03\u5F0FID\u751F\u6210\u7B97\u6CD5\uFF0C\u4EE5\u5212\u5206\u547D\u540D\u7A7A\u95F4\u7684\u65B9\u5F0F\u5C06 64-bit\u4F4D\u5206\u5272\u6210\u591A\u4E2A\u90E8\u5206\uFF0C\u6BCF\u4E2A\u90E8\u5206\u4EE3\u8868\u4E0D\u540C\u7684\u542B\u4E49\u3002\u800C Java\u4E2D64bit\u7684\u6574\u6570\u662FLong\u7C7B\u578B\uFF0C\u6240\u4EE5\u5728 Java \u4E2D SnowFlake \u7B97\u6CD5\u751F\u6210\u7684 ID \u5C31\u662F long \u6765\u5B58\u50A8\u7684\u3002"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"\u7B2C1\u4F4D\u5360\u75281bit"}),"\uFF0C\u5176\u503C\u59CB\u7EC8\u662F0\uFF0C\u53EF\u770B\u505A\u662F\u7B26\u53F7\u4F4D\u4E0D\u4F7F\u7528\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"\u7B2C2\u4F4D\u5F00\u59CB\u768441\u4F4D\u662F\u65F6\u95F4\u6233"}),"\uFF0C41-bit\u4F4D\u53EF\u8868\u793A2^41\u4E2A\u6570\uFF0C\u6BCF\u4E2A\u6570\u4EE3\u8868\u6BEB\u79D2\uFF0C\u90A3\u4E48\u96EA\u82B1\u7B97\u6CD5\u53EF\u7528\u7684\u65F6\u95F4\u5E74\u9650\u662F",(0,i.jsx)(e.code,{children:"(1L<<41)/(1000L360024*365)\\=69"})," \u5E74\u7684\u65F6\u95F4\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"\u4E2D\u95F4\u768410-bit\u4F4D\u53EF\u8868\u793A\u673A\u5668\u6570"}),"\uFF0C\u53732^10 = 1024\u53F0\u673A\u5668\uFF0C\u4F46\u662F\u4E00\u822C\u60C5\u51B5\u4E0B\u6211\u4EEC\u4E0D\u4F1A\u90E8\u7F72\u8FD9\u4E48\u53F0\u673A\u5668\u3002\u5982\u679C\u6211\u4EEC\u5BF9IDC\uFF08\u4E92\u8054\u7F51\u6570\u636E\u4E2D\u5FC3\uFF09\u6709\u9700\u6C42\uFF0C\u8FD8\u53EF\u4EE5\u5C06 10-bit \u5206 5-bit \u7ED9 IDC\uFF0C\u52065-bit\u7ED9\u5DE5\u4F5C\u673A\u5668\u3002\u8FD9\u6837\u5C31\u53EF\u4EE5\u8868\u793A32\u4E2AIDC\uFF0C\u6BCF\u4E2AIDC\u4E0B\u53EF\u4EE5\u670932\u53F0\u673A\u5668\uFF0C\u5177\u4F53\u7684\u5212\u5206\u53EF\u4EE5\u6839\u636E\u81EA\u8EAB\u9700\u6C42\u5B9A\u4E49\u3002"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"\u6700\u540E12-bit\u4F4D\u662F\u81EA\u589E\u5E8F\u5217"}),"\uFF0C\u53EF\u8868\u793A2^12 = 4096\u4E2A\u6570\u3002"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:"\u8FD9\u6837\u7684\u5212\u5206\u4E4B\u540E\u76F8\u5F53\u4E8E\u5728\u4E00\u6BEB\u79D2\u4E00\u4E2A\u6570\u636E\u4E2D\u5FC3\u7684\u4E00\u53F0\u673A\u5668\u4E0A\u53EF\u4EA7\u751F4096\u4E2A\u6709\u5E8F\u7684\u4E0D\u91CD\u590D\u7684ID\u3002\u4F46\u662F\u6211\u4EEC IDC \u548C\u673A\u5668\u6570\u80AF\u5B9A\u4E0D\u6B62\u4E00\u4E2A\uFF0C\u6240\u4EE5\u6BEB\u79D2\u5185\u80FD\u751F\u6210\u7684\u6709\u5E8FID\u6570\u662F\u7FFB\u500D\u7684\u3002"}),"\n","\n",(0,i.jsx)("img",{src:o,alt:"Snowflake",width:"50%"}),"\n",(0,i.jsx)(e.p,{children:"Snowflake \u7684Twitter\u5B98\u65B9\u539F\u7248\u662F\u7528Scala\u5199\u7684\uFF0C\u5BF9Scala\u8BED\u8A00\u6709\u7814\u7A76\u7684\u540C\u5B66\u53EF\u4EE5\u53BB\u9605\u8BFB\u4E0B\uFF0C\u4EE5\u4E0B\u662F Java \u7248\u672C\u7684\u5199\u6CD5\u3002"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:'package com.jajian.demo.distribute;\r\n\r\n/**\r\n * Twitter_Snowflake<br>\r\n * SnowFlake\u7684\u7ED3\u6784\u5982\u4E0B(\u6BCF\u90E8\u5206\u7528-\u5206\u5F00):<br>\r\n * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 <br>\r\n * 1\u4F4D\u6807\u8BC6\uFF0C\u7531\u4E8Elong\u57FA\u672C\u7C7B\u578B\u5728Java\u4E2D\u662F\u5E26\u7B26\u53F7\u7684\uFF0C\u6700\u9AD8\u4F4D\u662F\u7B26\u53F7\u4F4D\uFF0C\u6B63\u6570\u662F0\uFF0C\u8D1F\u6570\u662F1\uFF0C\u6240\u4EE5id\u4E00\u822C\u662F\u6B63\u6570\uFF0C\u6700\u9AD8\u4F4D\u662F0<br>\r\n * 41\u4F4D\u65F6\u95F4\u622A(\u6BEB\u79D2\u7EA7)\uFF0C\u6CE8\u610F\uFF0C41\u4F4D\u65F6\u95F4\u622A\u4E0D\u662F\u5B58\u50A8\u5F53\u524D\u65F6\u95F4\u7684\u65F6\u95F4\u622A\uFF0C\u800C\u662F\u5B58\u50A8\u65F6\u95F4\u622A\u7684\u5DEE\u503C\uFF08\u5F53\u524D\u65F6\u95F4\u622A - \u5F00\u59CB\u65F6\u95F4\u622A)\r\n * \u5F97\u5230\u7684\u503C\uFF09\uFF0C\u8FD9\u91CC\u7684\u7684\u5F00\u59CB\u65F6\u95F4\u622A\uFF0C\u4E00\u822C\u662F\u6211\u4EEC\u7684id\u751F\u6210\u5668\u5F00\u59CB\u4F7F\u7528\u7684\u65F6\u95F4\uFF0C\u7531\u6211\u4EEC\u7A0B\u5E8F\u6765\u6307\u5B9A\u7684\uFF08\u5982\u4E0B\u4E0B\u9762\u7A0B\u5E8FIdWorker\u7C7B\u7684startTime\u5C5E\u6027\uFF09\u300241\u4F4D\u7684\u65F6\u95F4\u622A\uFF0C\u53EF\u4EE5\u4F7F\u752869\u5E74\uFF0C\u5E74T = (1L << 41) / (1000L * 60 * 60 * 24 * 365) = 69<br>\r\n * 10\u4F4D\u7684\u6570\u636E\u673A\u5668\u4F4D\uFF0C\u53EF\u4EE5\u90E8\u7F72\u57281024\u4E2A\u8282\u70B9\uFF0C\u5305\u62EC5\u4F4DdatacenterId\u548C5\u4F4DworkerId<br>\r\n * 12\u4F4D\u5E8F\u5217\uFF0C\u6BEB\u79D2\u5185\u7684\u8BA1\u6570\uFF0C12\u4F4D\u7684\u8BA1\u6570\u987A\u5E8F\u53F7\u652F\u6301\u6BCF\u4E2A\u8282\u70B9\u6BCF\u6BEB\u79D2(\u540C\u4E00\u673A\u5668\uFF0C\u540C\u4E00\u65F6\u95F4\u622A)\u4EA7\u751F4096\u4E2AID\u5E8F\u53F7<br>\r\n * \u52A0\u8D77\u6765\u521A\u597D64\u4F4D\uFF0C\u4E3A\u4E00\u4E2ALong\u578B\u3002<br>\r\n * SnowFlake\u7684\u4F18\u70B9\u662F\uFF0C\u6574\u4F53\u4E0A\u6309\u7167\u65F6\u95F4\u81EA\u589E\u6392\u5E8F\uFF0C\u5E76\u4E14\u6574\u4E2A\u5206\u5E03\u5F0F\u7CFB\u7EDF\u5185\u4E0D\u4F1A\u4EA7\u751FID\u78B0\u649E(\u7531\u6570\u636E\u4E2D\u5FC3ID\u548C\u673A\u5668ID\u4F5C\u533A\u5206)\uFF0C\u5E76\u4E14\u6548\u7387\u8F83\u9AD8\uFF0C\u7ECF\u6D4B\u8BD5\uFF0CSnowFlake\u6BCF\u79D2\u80FD\u591F\u4EA7\u751F26\u4E07ID\u5DE6\u53F3\u3002\r\n */\r\npublic class SnowflakeDistributeId {\r\n\r\n\r\n    // ==============================Fields===========================================\r\n    /**\r\n     * \u5F00\u59CB\u65F6\u95F4\u622A (2015-01-01)\r\n     */\r\n    private final long twepoch = 1420041600000L;\r\n\r\n    /**\r\n     * \u673A\u5668id\u6240\u5360\u7684\u4F4D\u6570\r\n     */\r\n    private final long workerIdBits = 5L;\r\n\r\n    /**\r\n     * \u6570\u636E\u6807\u8BC6id\u6240\u5360\u7684\u4F4D\u6570\r\n     */\r\n    private final long datacenterIdBits = 5L;\r\n\r\n    /**\r\n     * \u652F\u6301\u7684\u6700\u5927\u673A\u5668id\uFF0C\u7ED3\u679C\u662F31 (\u8FD9\u4E2A\u79FB\u4F4D\u7B97\u6CD5\u53EF\u4EE5\u5F88\u5FEB\u7684\u8BA1\u7B97\u51FA\u51E0\u4F4D\u4E8C\u8FDB\u5236\u6570\u6240\u80FD\u8868\u793A\u7684\u6700\u5927\u5341\u8FDB\u5236\u6570)\r\n     */\r\n    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\r\n\r\n    /**\r\n     * \u652F\u6301\u7684\u6700\u5927\u6570\u636E\u6807\u8BC6id\uFF0C\u7ED3\u679C\u662F31\r\n     */\r\n    private final long maxDatacenterId = -1L ^ (-1L << datacenterIdBits);\r\n\r\n    /**\r\n     * \u5E8F\u5217\u5728id\u4E2D\u5360\u7684\u4F4D\u6570\r\n     */\r\n    private final long sequenceBits = 12L;\r\n\r\n    /**\r\n     * \u673A\u5668ID\u5411\u5DE6\u79FB12\u4F4D\r\n     */\r\n    private final long workerIdShift = sequenceBits;\r\n\r\n    /**\r\n     * \u6570\u636E\u6807\u8BC6id\u5411\u5DE6\u79FB17\u4F4D(12+5)\r\n     */\r\n    private final long datacenterIdShift = sequenceBits + workerIdBits;\r\n\r\n    /**\r\n     * \u65F6\u95F4\u622A\u5411\u5DE6\u79FB22\u4F4D(5+5+12)\r\n     */\r\n    private final long timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;\r\n\r\n    /**\r\n     * \u751F\u6210\u5E8F\u5217\u7684\u63A9\u7801\uFF0C\u8FD9\u91CC\u4E3A4095 (0b111111111111=0xfff=4095)\r\n     */\r\n    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\r\n\r\n    /**\r\n     * \u5DE5\u4F5C\u673A\u5668ID(0~31)\r\n     */\r\n    private long workerId;\r\n\r\n    /**\r\n     * \u6570\u636E\u4E2D\u5FC3ID(0~31)\r\n     */\r\n    private long datacenterId;\r\n\r\n    /**\r\n     * \u6BEB\u79D2\u5185\u5E8F\u5217(0~4095)\r\n     */\r\n    private long sequence = 0L;\r\n\r\n    /**\r\n     * \u4E0A\u6B21\u751F\u6210ID\u7684\u65F6\u95F4\u622A\r\n     */\r\n    private long lastTimestamp = -1L;\r\n\r\n    //==============================Constructors=====================================\r\n\r\n    /**\r\n     * \u6784\u9020\u51FD\u6570\r\n     *\r\n     * @param workerId     \u5DE5\u4F5CID (0~31)\r\n     * @param datacenterId \u6570\u636E\u4E2D\u5FC3ID (0~31)\r\n     */\r\n    public SnowflakeDistributeId(long workerId, long datacenterId) {\r\n        if (workerId > maxWorkerId || workerId < 0) {\r\n            throw new IllegalArgumentException(String.format("worker Id can\'t be greater than %d or less than 0", maxWorkerId));\r\n        }\r\n        if (datacenterId > maxDatacenterId || datacenterId < 0) {\r\n            throw new IllegalArgumentException(String.format("datacenter Id can\'t be greater than %d or less than 0", maxDatacenterId));\r\n        }\r\n        this.workerId = workerId;\r\n        this.datacenterId = datacenterId;\r\n    }\r\n\r\n    // ==============================Methods==========================================\r\n\r\n    /**\r\n     * \u83B7\u5F97\u4E0B\u4E00\u4E2AID (\u8BE5\u65B9\u6CD5\u662F\u7EBF\u7A0B\u5B89\u5168\u7684)\r\n     *\r\n     * @return SnowflakeId\r\n     */\r\n    public synchronized long nextId() {\r\n        long timestamp = timeGen();\r\n\r\n        //\u5982\u679C\u5F53\u524D\u65F6\u95F4\u5C0F\u4E8E\u4E0A\u4E00\u6B21ID\u751F\u6210\u7684\u65F6\u95F4\u6233\uFF0C\u8BF4\u660E\u7CFB\u7EDF\u65F6\u949F\u56DE\u9000\u8FC7\u8FD9\u4E2A\u65F6\u5019\u5E94\u5F53\u629B\u51FA\u5F02\u5E38\r\n        if (timestamp < lastTimestamp) {\r\n            throw new RuntimeException(\r\n                    String.format("Clock moved backwards.  Refusing to generate id for %d milliseconds", lastTimestamp - timestamp));\r\n        }\r\n\r\n        //\u5982\u679C\u662F\u540C\u4E00\u65F6\u95F4\u751F\u6210\u7684\uFF0C\u5219\u8FDB\u884C\u6BEB\u79D2\u5185\u5E8F\u5217\r\n        if (lastTimestamp == timestamp) {\r\n            sequence = (sequence + 1) & sequenceMask;\r\n            //\u6BEB\u79D2\u5185\u5E8F\u5217\u6EA2\u51FA\r\n            if (sequence == 0) {\r\n                //\u963B\u585E\u5230\u4E0B\u4E00\u4E2A\u6BEB\u79D2,\u83B7\u5F97\u65B0\u7684\u65F6\u95F4\u6233\r\n                timestamp = tilNextMillis(lastTimestamp);\r\n            }\r\n        }\r\n        //\u65F6\u95F4\u6233\u6539\u53D8\uFF0C\u6BEB\u79D2\u5185\u5E8F\u5217\u91CD\u7F6E\r\n        else {\r\n            sequence = 0L;\r\n        }\r\n\r\n        //\u4E0A\u6B21\u751F\u6210ID\u7684\u65F6\u95F4\u622A\r\n        lastTimestamp = timestamp;\r\n\r\n        //\u79FB\u4F4D\u5E76\u901A\u8FC7\u6216\u8FD0\u7B97\u62FC\u5230\u4E00\u8D77\u7EC4\u621064\u4F4D\u7684ID\r\n        return ((timestamp - twepoch) << timestampLeftShift) //\r\n                | (datacenterId << datacenterIdShift) //\r\n                | (workerId << workerIdShift) //\r\n                | sequence;\r\n    }\r\n\r\n    /**\r\n     * \u963B\u585E\u5230\u4E0B\u4E00\u4E2A\u6BEB\u79D2\uFF0C\u76F4\u5230\u83B7\u5F97\u65B0\u7684\u65F6\u95F4\u6233\r\n     *\r\n     * @param lastTimestamp \u4E0A\u6B21\u751F\u6210ID\u7684\u65F6\u95F4\u622A\r\n     * @return \u5F53\u524D\u65F6\u95F4\u6233\r\n     */\r\n    protected long tilNextMillis(long lastTimestamp) {\r\n        long timestamp = timeGen();\r\n        while (timestamp <= lastTimestamp) {\r\n            timestamp = timeGen();\r\n        }\r\n        return timestamp;\r\n    }\r\n\r\n    /**\r\n     * \u8FD4\u56DE\u4EE5\u6BEB\u79D2\u4E3A\u5355\u4F4D\u7684\u5F53\u524D\u65F6\u95F4\r\n     *\r\n     * @return \u5F53\u524D\u65F6\u95F4(\u6BEB\u79D2)\r\n     */\r\n    protected long timeGen() {\r\n        return System.currentTimeMillis();\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(e.p,{children:"\u6D4B\u8BD5\u7684\u4EE3\u7801\u5982\u4E0B"}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-java",children:"public static void main(String[] args) {\r\n    SnowflakeDistributeId idWorker = new SnowflakeDistributeId(0, 0);\r\n    for (int i = 0; i < 1000; i++) {\r\n        long id = idWorker.nextId();\r\n//      System.out.println(Long.toBinaryString(id));\r\n        System.out.println(id);\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:"\u96EA\u82B1\u7B97\u6CD5\u63D0\u4F9B\u4E86\u4E00\u4E2A\u5F88\u597D\u7684\u8BBE\u8BA1\u601D\u60F3\uFF0C\u96EA\u82B1\u7B97\u6CD5\u751F\u6210\u7684ID\u662F\u8D8B\u52BF\u9012\u589E\uFF0C\u4E0D\u4F9D\u8D56\u6570\u636E\u5E93\u7B49\u7B2C\u4E09\u65B9\u7CFB\u7EDF\uFF0C\u4EE5\u670D\u52A1\u7684\u65B9\u5F0F\u90E8\u7F72\uFF0C\u7A33\u5B9A\u6027\u66F4\u9AD8\uFF0C\u751F\u6210ID\u7684\u6027\u80FD\u4E5F\u662F\u975E\u5E38\u9AD8\u7684\uFF0C\u800C\u4E14\u53EF\u4EE5\u6839\u636E\u81EA\u8EAB\u4E1A\u52A1\u7279\u6027\u5206\u914Dbit\u4F4D\uFF0C\u975E\u5E38\u7075\u6D3B\u3002"}),"\n",(0,i.jsx)(e.p,{children:"\u4F46\u662F\u96EA\u82B1\u7B97\u6CD5\u5F3A\u4F9D\u8D56\u673A\u5668\u65F6\u949F\uFF0C\u5982\u679C\u673A\u5668\u4E0A\u65F6\u949F\u56DE\u62E8\uFF0C\u4F1A\u5BFC\u81F4\u53D1\u53F7\u91CD\u590D\u6216\u8005\u670D\u52A1\u4F1A\u5904\u4E8E\u4E0D\u53EF\u7528\u72B6\u6001\u3002\u5982\u679C\u6070\u5DE7\u56DE\u9000\u524D\u751F\u6210\u8FC7\u4E00\u4E9BID\uFF0C\u800C\u65F6\u95F4\u56DE\u9000\u540E\uFF0C\u751F\u6210\u7684ID\u5C31\u6709\u53EF\u80FD\u91CD\u590D\u3002\u5B98\u65B9\u5BF9\u4E8E\u6B64\u5E76\u6CA1\u6709\u7ED9\u51FA\u89E3\u51B3\u65B9\u6848\uFF0C\u800C\u662F\u7B80\u5355\u7684\u629B\u9519\u5904\u7406\uFF0C\u8FD9\u6837\u4F1A\u9020\u6210\u5728\u65F6\u95F4\u88AB\u8FFD\u56DE\u4E4B\u524D\u7684\u8FD9\u6BB5\u65F6\u95F4\u670D\u52A1\u4E0D\u53EF\u7528\u3002"}),"\n",(0,i.jsxs)(e.p,{children:["\u5F88\u591A\u5176\u4ED6\u7C7B\u96EA\u82B1\u7B97\u6CD5\u4E5F\u662F\u5728\u6B64\u601D\u60F3\u4E0A\u7684\u8BBE\u8BA1\u7136\u540E\u6539\u8FDB\u89C4\u907F\u5B83\u7684\u7F3A\u9677\uFF0C",(0,i.jsx)(e.code,{children:"\u767E\u5EA6 UidGenerator"})," \u548C ",(0,i.jsx)(e.code,{children:"\u7F8E\u56E2\u5206\u5E03\u5F0FID\u751F\u6210\u7CFB\u7EDF Leaf"}),"\u7B49\u7B97\u6CD5\u4E2Dsnowflake\u6A21\u5F0F\u90FD\u662F\u5728 snowflake \u7684\u57FA\u7840\u4E0A\u6F14\u8FDB\u51FA\u6765\u7684\u3002"]})]})}function S(r={}){let{wrapper:e}={...(0,a.R)(),...r.components};return e?(0,i.jsx)(e,{...r,children:(0,i.jsx)(u,{...r})}):u(r)}},9276:(r,e,n)=>{n.d(e,{A:()=>a});var t=n(4848),i=n(6540);function a(r){let{behavior:e,description:n,url:a}=r,c=Array.isArray(n)?n:[n],s=Array.isArray(a)?a:[a];return(0,t.jsxs)("p",{children:["\xa9 ",new Date().getFullYear()," mhuahe. ",e,"\uFF1A",c.map((r,e)=>(0,t.jsxs)(i.Fragment,{children:[e>0&&" \u3001",(0,t.jsx)("a",{href:s[e].trim(),target:"_blank",rel:"noopener noreferrer",children:r.trim()})]},e))]})}},8453:(r,e,n)=>{n.d(e,{R:()=>c,x:()=>s});var t=n(6540);let i={},a=t.createContext(i);function c(r){let e=t.useContext(a);return t.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function s(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(i):r.components||i:c(r.components),t.createElement(a.Provider,{value:e},r.children)}}}]);