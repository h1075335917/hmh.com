"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9636],{5688:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>l,frontMatter:()=>a,metadata:()=>s,toc:()=>y});var t=n(4848),i=n(8453);const a={},c="JAVA-\u52a0\u5bc6\u65b9\u5f0f",s={id:"java/JAVA-Encryption",title:"JAVA-\u52a0\u5bc6\u65b9\u5f0f",description:"\u522b\u7528MD5\u52a0\u5bc6\u5bc6\u7801\u4e86",source:"@site/docs/java/JAVA-Encryption.md",sourceDirName:"java",slug:"/java/JAVA-Encryption",permalink:"/mhuahe.com/docs/java/JAVA-Encryption",draft:!1,unlisted:!1,editUrl:"https://github.dev/mhuahe/mhuahe.com/blob/master-ts/docs/java/JAVA-Encryption.md",tags:[],version:"current",frontMatter:{},sidebar:"java",previous:{title:"JAVA-ES",permalink:"/mhuahe.com/docs/java/JAVA-Elaticsearch"},next:{title:"JAVA-\u9519\u8bef\u8bb0\u5f55",permalink:"/mhuahe.com/docs/java/JAVA-Error-Record"}},o={},y=[{value:"\u522b\u7528MD5\u52a0\u5bc6\u5bc6\u7801\u4e86",id:"\u522b\u7528md5\u52a0\u5bc6\u5bc6\u7801\u4e86",level:3},{value:"MD5",id:"md5",level:3},{value:"DES",id:"des",level:3},{value:"RSA",id:"rsa",level:3},{value:"IDEA",id:"idea",level:3},{value:"DSA",id:"dsa",level:3},{value:"AES",id:"aes",level:3},{value:"Elgamal",id:"elgamal",level:3},{value:"Base64",id:"base64",level:3},{value:"SHA",id:"sha",level:3},{value:"PKCS",id:"pkcs",level:3},{value:"ECDSA",id:"ecdsa",level:3},{value:"DH",id:"dh",level:3},{value:"PBE",id:"pbe",level:3},{value:"MAC",id:"mac",level:3},{value:"\u54c8\u5e0c\u7b97\u6cd5",id:"\u54c8\u5e0c\u7b97\u6cd5",level:3},{value:"\u79c1\u94a5\u516c\u94a5\u7b7e\u8bc1\u52a0\u5bc6",id:"\u79c1\u94a5\u516c\u94a5\u7b7e\u8bc1\u52a0\u5bc6",level:3}];function p(e){const r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"java-\u52a0\u5bc6\u65b9\u5f0f",children:"JAVA-\u52a0\u5bc6\u65b9\u5f0f"})}),"\n",(0,t.jsx)(r.h3,{id:"\u522b\u7528md5\u52a0\u5bc6\u5bc6\u7801\u4e86",children:"\u522b\u7528MD5\u52a0\u5bc6\u5bc6\u7801\u4e86"}),"\n",(0,t.jsx)(r.p,{children:"\u89e3\u91ca"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"MD \u7b97\u6cd5\u6709\u591a\u4e2a\u7248\u672c\uff0c\u5305\u62ec MD2\u3001MD4\u3001MD5 \u7b49\uff0c\u5176\u4e2d MD5 \u662f\u6700\u5e38\u7528\u7684\u7248\u672c\uff0c\u5b83\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a 128 \u4f4d\uff0816 \u5b57\u8282\uff09\u7684\u54c8\u5e0c\u503c\u3002\u4ece\u5b89\u5168\u6027\u4e0a\u8bf4\uff1aMD5 > MD4 > MD2\u3002\u9664\u4e86\u8fd9\u4e9b\u7248\u672c\uff0c\u8fd8\u6709\u4e00\u4e9b\u57fa\u4e8e MD4 \u6216 MD5 \u6539\u8fdb\u7684\u7b97\u6cd5\uff0c\u5982 RIPEMD\u3001HAVAL \u7b49\u3002\u5373\u4f7f\u662f\u6700\u5b89\u5168 MD \u7b97\u6cd5 MD5 \u4e5f\u5b58\u5728\u88ab\u7834\u89e3\u7684\u98ce\u9669\uff0c\u653b\u51fb\u8005\u53ef\u4ee5\u901a\u8fc7\u66b4\u529b\u7834\u89e3\u6216\u5f69\u8679\u8868\u653b\u51fb\u7b49\u65b9\u5f0f\uff0c\u627e\u5230\u4e0e\u539f\u59cb\u6570\u636e\u76f8\u540c\u7684\u54c8\u5e0c\u503c\uff0c\u4ece\u800c\u7834\u89e3\u6570\u636e\u3002"}),"\n",(0,t.jsx)(r.p,{children:"\u4e3a\u4e86\u589e\u52a0\u7834\u89e3\u96be\u5ea6\uff0c\u901a\u5e38\u53ef\u4ee5\u9009\u62e9\u52a0\u76d0\u3002\u76d0\uff08Salt\uff09\u5728\u5bc6\u7801\u5b66\u4e2d\uff0c\u662f\u6307\u901a\u8fc7\u5728\u5bc6\u7801\u4efb\u610f\u56fa\u5b9a\u4f4d\u7f6e\u63d2\u5165\u7279\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u8ba9\u54c8\u5e0c\u540e\u7684\u7ed3\u679c\u548c\u4f7f\u7528\u539f\u59cb\u5bc6\u7801\u7684\u54c8\u5e0c\u7ed3\u679c\u4e0d\u76f8\u7b26\uff0c\u8fd9\u79cd\u8fc7\u7a0b\u79f0\u4e4b\u4e3a\u201c\u52a0\u76d0\u201d\u3002\u52a0\u76d0\u4e4b\u540e\u5c31\u5b89\u5168\u4e86\u5417\uff1f\u5e76\u4e0d\u4e00\u5b9a\uff0c\u8fd9\u53ea\u662f\u589e\u52a0\u4e86\u7834\u89e3\u96be\u5ea6\uff0c\u4e0d\u4ee3\u8868\u65e0\u6cd5\u7834\u89e3\u3002\u800c\u4e14\uff0cMD5 \u7b97\u6cd5\u672c\u8eab\u5c31\u5b58\u5728\u5f31\u78b0\u649e\uff08Collision\uff09\u95ee\u9898\uff0c\u5373\u591a\u4e2a\u4e0d\u540c\u7684\u8f93\u5165\u4ea7\u751f\u76f8\u540c\u7684 MD5 \u503c\u3002\u56e0\u6b64\uff0c\u4e0d\u5efa\u8bae\u4f7f\u7528 MD5 \u52a0\u5bc6\u5bc6\u7801\uff0c\u5373\u4f7f\u52a0\u76d0\u4e5f\u5b58\u5728\u5b89\u5168\u98ce\u9669\u3002"}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u66ff\u6362\u65b9\u6848"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["\u4e3a\u4e86\u589e\u52a0\u5b89\u5168\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528",(0,t.jsx)(r.strong,{children:"\u5b89\u5168\u6027\u8f83\u9ad8\u7684\u52a0\u5bc6\u54c8\u5e0c\u7b97\u6cd5+ Salt\uff08\u76d0\uff09"}),"\uff08\u4f8b\u5982 SHA2\u3001SHA3\u3001SM3\uff0c\u66f4\u9ad8\u7684\u5b89\u5168\u6027\u66f4\u5f3a\u7684\u6297\u78b0\u649e\u6027\uff09\u3002\u5efa\u8bae\u6bcf\u4e2a\u7528\u6237\u7684 Salt \u503c\u4e0d\u540c\uff08\u6700\u597d\u5bf9\u4e0d\u540c\u7528\u6237\u7684\u5bc6\u7801\u968f\u673a\u751f\u6210\u4e0d\u540c\u7684 Salt\uff0cSalt \u5e93\u548c\u5bc6\u7801\u5e93\u5206\u79bb\u5f00\uff09\uff0c\u8fd9\u6837\u5c31\u6ca1\u529e\u6cd5\u7528\u5f69\u8679\u8868\u8fdb\u884c\u6279\u91cf\u7834\u89e3\u3002\u4e0d\u8fc7\uff0c\u8fd9\u4e0d\u4ee3\u8868\u6ca1\u6709\u7834\u89e3\u98ce\u9669\u4e86\uff08\u5229\u7528\u5bc6\u7801\u7834\u89e3\u786c\u4ef6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u4e00\u79d2\u949f\u5185\u8fdb\u884c\u6570\u5341\u4ebf\u6b21\u7684\u54c8\u5e0c\u8ba1\u7b97\uff09\u3002"]}),"\n",(0,t.jsxs)(r.p,{children:["\u5b89\u5168\u6027\u66f4\u9ad8\u7684\u4e00\u79cd\u65b9\u6848\u662f\u4f7f\u7528 ",(0,t.jsx)(r.strong,{children:"\u5bc6\u94a5\u6d3e\u751f\u7b97\u6cd5\uff08Key Derivation Function\uff0c\u7b80\u79f0 KDF\uff0c\u4e5f\u79f0\u4e3a\u5bc6\u7801\u54c8\u5e0c\u7b97\u6cd5\uff09"}),"\u3002\u76f8\u6bd4\u5176\u4ed6\u52a0\u5bc6\u54c8\u5e0c\u7b97\u6cd5\uff0cKDF \u5177\u6709\u4e00\u4e2a\u72ec\u7279\u5c5e\u6027\u2014\u2014\u8ba1\u7b97\u901f\u5ea6\u5f88\u6162\uff0c\u800c\u4e14\u4ece\u8bbe\u8ba1\u4e0a\u5c31\u4f7f\u5176\u8ba1\u7b97\u901f\u5ea6\u96be\u4ee5\u63d0\u5347\uff0c\u6240\u4ee5 KDF \u4e5f\u88ab\u79f0\u4e3a ",(0,t.jsx)(r.strong,{children:"\u6162\u54c8\u5e0c\u7b97\u6cd5"})," \u3002\u8fd9\u4e2a\u6162\u76f8\u6bd4\u4e8e\u5176\u5e26\u6765\u7684\u5b89\u5168\u6027\u6765\u8bf4\u662f\u53ef\u4ee5\u63a5\u53d7\u7684\uff0c\u6bd5\u7adf\u4e3b\u8981\u4e5f\u662f\u5728\u767b\u5f55\u65f6\u6267\u884c\u4e00\u6b21\u3002"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u5e38\u89c1\u7684 KDF \u7b97\u6cd5\u4e3b\u8981\u6709\uff08\u5b89\u5168\u7a0b\u5ea6\u4f9d\u6b21\u9012\u589e\uff09\uff1a"}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"https://docs.spring.io/spring-security/reference/features/authentication/password-storage.html",children:"\u5177\u4f53\u4ee3\u7801\u5b9e\u73b0"})}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsx)(r.li,{children:"PBKDF2\uff1a\u5176\u6838\u5fc3\u662f\u5bf9 HMAC \u8fdb\u884c\u591a\u6b21\u8fed\u4ee3\u4ee5\u589e\u52a0\u7834\u89e3\u96be\u5ea6\u3002PBKDF2 \u5bf9\u5185\u5b58\u7684\u8981\u6c42\u8f83\u4f4e\uff0c\u5e76\u4e0d\u80fd\u62b5\u6297\u5bc6\u7801\u7834\u89e3\u786c\u4ef6\uff08\u5982 GPU\u3001ASIC\u3001FPGA\uff09\u653b\u51fb\u3002\u8fd9\u4e2a KDF \u7b97\u6cd5\u6bd4\u8f83\u8001\u4e86\uff0c\u76ee\u524d\u5df2\u7ecf\u4e0d\u63a8\u8350\u4f7f\u7528\u3002"}),"\n",(0,t.jsx)(r.li,{children:"Bcrypt\uff1a\u4e00\u79cd\u57fa\u4e8e Blowfish \u52a0\u5bc6\u7b97\u6cd5\u7684\u5bc6\u7801\u54c8\u5e0c\u7b97\u6cd5\uff0c\u4e13\u95e8\u4e3a\u5bc6\u7801\u52a0\u5bc6\u800c\u8bbe\u8ba1\uff0c\u5b89\u5168\u6027\u9ad8\u4e8e PBKDF2\u3002Bcrypt \u5bf9\u5185\u5b58\u7684\u8981\u6c42\u8f83\u4f4e\uff0c\u540c\u6837\u4e0d\u80fd\u62b5\u6297\u5bc6\u7801\u7834\u89e3\u786c\u4ef6\u653b\u51fb\u3002"}),"\n",(0,t.jsx)(r.li,{children:"Scrypt\uff1a\u76f8\u6bd4\u4e8e PBKDF2 \u548c Bcrypt\uff0c\u5176\u5360\u7528\u7684\u5185\u5b58\u66f4\u591a\uff0c\u5b89\u5168\u6027\u4e5f\u8981\u66f4\u9ad8\u3002\u5b83\u8fd8\u53ef\u4ee5\u901a\u8fc7\u8c03\u6574\u5185\u5b58\u548c CPU \u7684\u4f7f\u7528\u91cf\u6765\u589e\u52a0\u7834\u89e3\u7684\u96be\u5ea6\u3002"}),"\n",(0,t.jsx)(r.li,{children:"Argon2\uff1a\u76ee\u524d\u6700\u5f3a\u7684\u5bc6\u7801 Hash \u7b97\u6cd5\uff0c\u5728 2015 \u5e74\u8d62\u5f97\u4e86\u5bc6\u7801 Hash \u7ade\u8d5b\u3002\u548c Scrypt \u4e00\u6837\uff0cArgon2 \u540c\u6837\u9700\u8981\u5927\u91cf\u7684\u5185\u5b58\u3002\u4e8c\u8005\u7efc\u5408\u4f7f\u7528\u52a0\u76d0\u3001\u591a\u6b21\u8fed\u4ee3\u3001\u5927\u91cf\u6d88\u8017 CPU \u65f6\u95f4\u548c\u5185\u5b58\u8d44\u6e90\u7b49\u624b\u6bb5\uff0c\u5927\u5927\u63d0\u5347\u4e86\u5bf9\u6297\u5bc6\u7801\u7834\u89e3\u786c\u4ef6\u7684\u80fd\u529b\u3002"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"\u5efa\u8bae\u65b9\u6848"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"\u5bf9\u4e8e\u7edd\u5927\u90e8\u5206\u9879\u76ee\u6765\u8bf4\uff0c Bcrypt \u5c31\u8db3\u591f\u4e86\uff0c\u867d\u7136\u5b83\u7684\u5b89\u5168\u6027\u6bd4\u4e0d\u4e0a Scrypt \u548c Argon2\uff0c\u4f46\u7efc\u5408\u8d77\u6765\u6027\u4ef7\u6bd4\u8f83\u9ad8"}),"\n",(0,t.jsx)(r.p,{children:"Bcrypt \u91c7\u7528\u4e86 salt\uff08\u76d0\uff09 \u548c cost\uff08\u6210\u672c\uff09 \u4e24\u79cd\u673a\u5236\uff0c\u5b83\u53ef\u4ee5\u6709\u6548\u5730\u9632\u6b62\u5f69\u8679\u8868\u653b\u51fb\u548c\u66b4\u529b\u7834\u89e3\u653b\u51fb\uff0c\u4ece\u800c\u4fdd\u8bc1\u5bc6\u7801\u7684\u5b89\u5168\u6027\u3002\u52a0 salt \u53ef\u4ee5\u9632\u6b62\u5f69\u8679\u8868\u653b\u51fb\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u4f7f\u7528 Bcrypt \u52a0\u5bc6\u5bc6\u7801\u65f6\u5df2\u7ecf\u5305\u542b\u4e86\u4e00\u4e2a\u968f\u673a\u52a0\u76d0\u7684\u8fc7\u7a0b\uff0c\u4e0d\u9700\u8981\u989d\u5916\u52a0\u76d0\u4e86\u3002"}),"\n",(0,t.jsx)(r.p,{children:"cost \u53c8\u79f0\u4e3a\u5de5\u4f5c\u56e0\u5b50\uff0c\u5b9a\u4e49\u4e86\u54c8\u5e0c\u8ba1\u7b97\u7684\u590d\u6742\u5ea6\u3002\u6210\u672c\u8d8a\u9ad8\uff0c\u8ba1\u7b97\u6240\u9700\u7684\u65f6\u95f4\u548c\u8d44\u6e90\u5c31\u8d8a\u591a\uff0c\u8fd9\u4f7f\u5f97\u66b4\u529b\u7834\u89e3\u653b\u51fb\u53d8\u5f97\u66f4\u52a0\u56f0\u96be\u3002\u5b9e\u9645\u9879\u76ee\u4e2d\uff0c\u53ef\u4ee5\u6839\u636e\u7cfb\u7edf\u7684\u6027\u80fd\u548c\u5b89\u5168\u9700\u6c42\u8c03\u6574 cost\u3002"}),"\n",(0,t.jsxs)(r.p,{children:["Spring Security \u63d0\u4f9b\u7684",(0,t.jsx)(r.code,{children:"BCryptPasswordEncoder"})," \u5de5\u4f5c\u56e0\u5b50\u8303\u56f4\u5728 4-31 \uff0c\u9ed8\u8ba4\u662f 10"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"\r\n /**\r\n  * @param strength the log rounds to use, between 4 and 31\r\n  */\r\n public BCryptPasswordEncoder(int strength) {\r\n  this(strength, null);\r\n }\n"})}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"md5",children:(0,t.jsx)(r.a,{href:"https://blog.csdn.net/yb546822612/article/details/103953034",children:"MD5"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"1.MD5\u52a0\u5bc6\r\n\u52a0\u5bc6\u540e\u7684\u4f4d\u6570\u5206\u4e3a16\u4f4d\u548c32\u4f4d\r\n16\u4f4d\u5b9e\u9645\u4e3a32\u4f4d\u4e2d\u53d69-24\r\nString md5_16 = md5_32.substring(8, 24);\r\nJava \u4e2d MD5 \u52a0\u5bc6\u7684\u7ed3\u679c\u9ed8\u8ba4\u662f32\u4f4d\u5c0f\u5199\u3002\n"})}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.img,{src:"https://hayes-typora.oss-cn-shenzhen.aliyuncs.com/MD5-1.png",alt:""})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"1.MD5\u52a0\u5bc6\u7b97\u6cd5(\u7ecf\u5e38\u4f7f\u7528MD5+salt\u4f5c\u4e3a\u7528\u6237\u5bc6\u7801\u52a0\u5bc6\u6216MD5\u52a0\u5bc6\u540e\u518d\u4f7f\u7528MD5\u52a0\u5bc6)\r\nMD5\u7684\u5168\u79f0\u662fMessage-Digest Algorithm 5\uff0cMD5\u53ef\u4ee5\u5c06\u4efb\u610f\u957f\u5ea6\u7684\u201c\u5b57\u8282\u4e32\u201d\u53d8\u6362\u6210\u2f00\u4e2a128bit\u7684\u2f24\u6574\u6570\uff0c\u5e76\u4e14\u5b83\u662f\u2f00\u4e2a\u4e0d\u53ef\u9006\u7684\u5b57\u7b26\u4e32\u53d8\u6362\u7b97\u6cd5\uff0c\u6362\u53e5\u8bdd\u8bf4\u662f\uff0c\u5373\u4f7f\u4f60\u770b\u5230\u6e90\u7a0b\u5e8f\u548c\u7b97\u6cd5\u63cf\u8ff0\uff0c\u4e5f\u2f46\u6cd5\u5c06\u2f00\u4e2aMD5\u7684\u503c\u53d8\u6362\u56de\u539f\u59cb\u7684\u5b57\u7b26\u4e32\uff0c\u4ece\u6570\u5b66\u539f\u7406\u4e0a\u8bf4\uff0c\u662f\u56e0\u4e3a\r\n\u539f\u59cb\u7684\u5b57\u7b26\u4e32\u6709\u2f46\u7a77\u591a\u4e2a\uff0c\u8fd9\u6709\u70b9\u8c61\u4e0d\u5b58\u5728\u53cd\u51fd\u6570\u7684\u6570\u5b66\u51fd\u6570\u3002\r\n2004\u5e74\uff0c\u8bc1\u5b9eMD5\u7b97\u6cd5\u65e0\u6cd5\u9632\u6b62\u78b0\u649e\uff08collision\uff09(\u4e0d\u540c\u7684\u503c\u52a0\u5bc6\u540e\u751f\u6210\u76f8\u540c\u7684\u5b57\u7b26\u4e32)\uff0c\u56e0\u6b64\u4e0d\u9002\u7528\u4e8e\u5b89\u5168\u6027\u8ba4\u8bc1\uff0c\u5982SSL\u516c\u5f00\u5bc6\u94a5\u8ba4\u8bc1\u6216\u662f\u6570\u5b57\u7b7e\u540d\u7b49\u7528\u9014\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.Security;\r\nimport org.apache.commons.codec.binary.Hex;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.bouncycastle.crypto.Digest;\r\nimport org.bouncycastle.crypto.digests.MD2Digest;\r\nimport org.bouncycastle.crypto.digests.MD5Digest;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class MDUtil {\r\n\r\n    /**\r\n     * MD5\u52a0\u5bc6\uff0c\u65b9\u5f0f1\r\n     * @param pwd\r\n     * @return\r\n     */\r\n    public static String commonsCodecMd5(String pwd) {\r\n        return DigestUtils.md5Hex(pwd.getBytes());\r\n    }\r\n    public static String commonsCodecMd2(String pwd) {\r\n        return DigestUtils.md2Hex(pwd.getBytes());\r\n    }\r\n\r\n    /**\r\n     * MD5\u52a0\u5bc6\uff0c\u65b9\u5f0f2\r\n     * \r\n     * @param pwd\r\n     * @return\r\n     */\r\n    public static String jdkMd5(String pwd) {\r\n        byte[] message = null;\r\n        message = pwd.getBytes();\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("MD5");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        byte[] encrypwd = md.digest(message);\r\n        String md5code = new BigInteger(1, encrypwd).toString(16);\r\n        for (int i = 0; i < 32 - md5code.length(); i++) {\r\n            md5code = "0" + md5code;\r\n        }\r\n        return md5code;\r\n    }\r\n    \r\n    public static String jdkMd2(String pwd) {\r\n        byte[] message = null;\r\n        message = pwd.getBytes();\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("md2");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        byte[] encrypwd = md.digest(message);\r\n        String md5code = Hex.encodeHexString(encrypwd);\r\n        for (int i = 0; i < 32 - md5code.length(); i++) {\r\n            md5code = "0" + md5code;\r\n        }\r\n        return md5code;\r\n    }\r\n    \r\n     /**\r\n      * Bouncy Castle\u5b9e\u73b0MD4\u52a0\u5bc6 \r\n      */\r\n     public static String bouncyCastleMD4(String src) {\r\n         /*\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u7ed9JDK\u52a8\u6001\u6dfb\u52a0\u4e00\u4e2aprovider,\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u83b7\u5f97JDK\u672c\u8eab\u4e0d\u652f\u6301\u7684MD4\u4e86*/\r\n         Security.addProvider(new BouncyCastleProvider());\r\n         MessageDigest md = null;\r\n         try {\r\n            md = MessageDigest.getInstance("md4");\r\n         } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n         }\r\n         byte[] md4Bytes = md.digest(src.getBytes());\r\n         return new String(org.bouncycastle.util.encoders.Hex.encode(md4Bytes));\r\n     }\r\n     \r\n     /** \r\n      * Bouncy Castle\u5b9e\u73b0MD5\u52a0\u5bc6 \r\n      */\r\n     public static String bouncyCastleMD5(String src){\r\n         Digest digest = new MD5Digest();\r\n         digest.update(src.getBytes(), 0, src.getBytes().length);\r\n         byte[]md5Bytes = new byte[digest.getDigestSize()];\r\n         digest.doFinal(md5Bytes, 0);\r\n         return new String(org.bouncycastle.util.encoders.Hex.encode(md5Bytes));\r\n     }\r\n     \r\n     /** \r\n      * Bouncy Castle\u5b9e\u73b0MD2\u52a0\u5bc6 \r\n      */\r\n     public static String bouncyCastleMD2(String src){\r\n         Digest digest = new MD2Digest();\r\n         digest.update(src.getBytes(), 0, src.getBytes().length);\r\n         byte[]md2Bytes = new byte[digest.getDigestSize()];\r\n         digest.doFinal(md2Bytes, 0);\r\n         return new String(org.bouncycastle.util.encoders.Hex.encode(md2Bytes));\r\n     }\r\n\r\n    /**\r\n     *  \u53ef\u9006\u7684\u52a0\u5bc6\u7b97\u6cd5\r\n     * @param inStr\r\n     * @return\r\n     */\r\n    public static String KL(String inStr) {\r\n        char[] a = inStr.toCharArray();\r\n        for (int i = 0; i < a.length; i++) {\r\n            a[i] = (char) (a[i] ^ \'t\');\r\n        }\r\n        String s = new String(a);\r\n        return s;\r\n    }\r\n\r\n    /**\r\n     *  \u52a0\u5bc6\u540e\u89e3\u5bc6\r\n     * @param inStr\r\n     * @return\r\n     */\r\n    public static String JM(String inStr) {\r\n        char[] a = inStr.toCharArray();\r\n        for (int i = 0; i < a.length; i++) {\r\n            a[i] = (char) (a[i] ^ \'t\');\r\n        }\r\n        String k = new String(a);\r\n        return k;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void md5(){\r\n\tString str = "md5";\r\n\t//Java\u539f\u751f\r\n\tbyte[] digest = null;\r\n\ttry {\r\n        MessageDigest md5 = MessageDigest.getInstance("md5");\r\n        digest  = md5.digest(str.getBytes(StandardCharsets.UTF_8));\r\n        //16\u662f\u8868\u793a\u8f6c\u6362\u4e3a16\u8fdb\u5236\u6570\r\n        String md5StrJava = new BigInteger(1, digest).toString(16);\r\n        System.out.println(md5StrJava);\r\n\t} catch (NoSuchAlgorithmException e) {\r\n        e.printStackTrace();\r\n\t}\r\n\t//spring\u81ea\u5e26\u5de5\u5177\u7c7b\r\n\tString md5StrSpring = DigestUtils.md5DigestAsHex(str.getBytes());\r\n\tSystem.out.println(md5StrSpring);\r\n}\r\n@Test\r\npublic void md() {\r\n\tString inStr = "000000";\r\n\tSystem.out.println("\u539f\u59cb\u5b57\u7b26\u4e32\uff1a"+inStr);\r\n\tSystem.out.println("MD2\u52a0\u5bc6\uff1a" + MDUtil.jdkMd2(inStr));\r\n\tSystem.out.println("MD2\u52a0\u5bc6\uff1a" + MDUtil.commonsCodecMd2(inStr));\r\n\tSystem.out.println("MD2\u52a0\u5bc6\uff1a" + MDUtil.bouncyCastleMD2(inStr));\r\n\t//670b14728ad9902aecba32e22fa4f6bd  32\u4f4d \r\n\tSystem.out.println("MD4\u52a0\u5bc6\uff1a" + MDUtil.bouncyCastleMD4(inStr));\r\n\t//bf85aaf547303397450fbc8ede0ec3a5  32\u4f4d \r\n\tSystem.out.println("MD5\u52a0\u5bc6\uff1a" + MDUtil.jdkMd5(inStr));\r\n\tSystem.out.println("MD5\u52a0\u5bc6\uff1a" + MDUtil.commonsCodecMd5(inStr));\r\n\tSystem.out.println("MD5\u52a0\u5bc6\uff1a" + MDUtil.bouncyCastleMD5(inStr));\r\n\t//670b14728ad9902aecba32e22fa4f6bd  32\u4f4d\r\n\tString encrypMode = MDUtil.jdkMd5(inStr);\r\n\tSystem.out.println("MD5\u540e\u518d\u52a0\u5bc6\uff1a" + MDUtil.KL(encrypMode));\r\n\tSystem.out.println("\u89e3\u5bc6\u4e3aMD5\u540e\u7684\uff1a" + MDUtil.JM(MDUtil.KL(encrypMode)));\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"des",children:"DES"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"2. DES\u52a0\u5bc6\u7b97\u6cd5--3DES--AES\r\nDES\u5168\u79f0\u4e3aData Encryption Standard\uff0c\u5373\u6570\u636e\u52a0\u5bc6\u6807\u51c6\uff0c\u662f\u2f00\u79cd\u4f7f\u2f64\u5bc6\u94a5\u52a0\u5bc6\u7684\u5757\u7b97\u6cd5\uff0c DES\u7b97\u6cd5\u7684\u2f0a\u2f1d\u53c2\u6570\u6709\u4e09\u4e2a\uff1aKey\u3001Data\u3001Mode\u3002\r\nKey\u4e3a7\u4e2a\u5b57\u8282\u517156\u4f4d,\u662fDES\u7b97\u6cd5\u7684\u2f2f\u4f5c\u5bc6\u94a5\u3002\r\nData\u4e3a8\u4e2a\u5b57\u828264\u4f4d\uff0c\u662f\u8981\u88ab\u52a0\u5bc6\u6216\u88ab\u89e3\u5bc6\u7684\u6570\u636e\u3002\r\nMode\u4e3aDES\u7684\u5de5\u4f5c\u65b9\u5f0f,\u6709\u4e24\u79cd:\u52a0\u5bc6\u6216\u89e3\u5bc6\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.CipherInputStream;\r\nimport javax.crypto.CipherOutputStream;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.DESKeySpec;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport java.io.*;\r\nimport java.security.Key;\r\nimport java.util.Base64;\r\n\r\npublic class DESUtil {\r\n \r\n    /**\r\n     * \u504f\u79fb\u53d8\u91cf\uff0c\u56fa\u5b9a\u53608\u4f4d\u5b57\u8282\r\n     */\r\n    private final static String IV_PARAMETER = "12345678";\r\n    /**\r\n     * \u5bc6\u94a5\u7b97\u6cd5\r\n     */\r\n    private static final String ALGORITHM = "DES";\r\n    /**\r\n     * \u52a0\u5bc6/\u89e3\u5bc6\u7b97\u6cd5-\u5de5\u4f5c\u6a21\u5f0f-\u586b\u5145\u6a21\u5f0f\r\n     */\r\n    private static final String CIPHER_ALGORITHM = "DES/CBC/PKCS5Padding";\r\n    /**\r\n     * \u9ed8\u8ba4\u7f16\u7801\r\n     */\r\n    private static final String CHARSET = "utf-8";\r\n \r\n    /**\r\n     * \u751f\u6210key\r\n     *\r\n     * @param password\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    private static Key generateKey(String password) throws Exception {\r\n        DESKeySpec dks = new DESKeySpec(password.getBytes(CHARSET));\r\n        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(ALGORITHM);\r\n        return keyFactory.generateSecret(dks);\r\n    }\r\n \r\n \r\n    /**\r\n     * DES\u52a0\u5bc6\u5b57\u7b26\u4e32\r\n     *\r\n     * @param password \u52a0\u5bc6\u5bc6\u7801\uff0c\u957f\u5ea6\u4e0d\u80fd\u591f\u5c0f\u4e8e8\u4f4d\r\n     * @param data \u5f85\u52a0\u5bc6\u5b57\u7b26\u4e32\r\n     * @return \u52a0\u5bc6\u540e\u5185\u5bb9\r\n     */\r\n    public static String encrypt(String password, String data) {\r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52a0\u5bc6\u5931\u8d25\uff0ckey\u4e0d\u80fd\u5c0f\u4e8e8\u4f4d");\r\n        }\r\n        if (data == null) {\r\n            return null;\r\n        }\r\n        try {\r\n            Key secretKey = generateKey(password);\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            cipher.init(Cipher.ENCRYPT_MODE, secretKey, iv);\r\n            byte[] bytes = cipher.doFinal(data.getBytes(CHARSET));\r\n \r\n            //JDK1.8\u53ca\u4ee5\u4e0a\u53ef\u76f4\u63a5\u4f7f\u7528Base64\uff0cJDK1.7\u53ca\u4ee5\u4e0b\u53ef\u4ee5\u4f7f\u7528BASE64Encoder\r\n            //Android\u5e73\u53f0\u53ef\u4ee5\u4f7f\u7528android.util.Base64\r\n            return new String(Base64.getEncoder().encode(bytes));\r\n \r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return data;\r\n        }\r\n    }\r\n \r\n    /**\r\n     * DES\u89e3\u5bc6\u5b57\u7b26\u4e32\r\n     *\r\n     * @param password \u89e3\u5bc6\u5bc6\u7801\uff0c\u957f\u5ea6\u4e0d\u80fd\u591f\u5c0f\u4e8e8\u4f4d\r\n     * @param data \u5f85\u89e3\u5bc6\u5b57\u7b26\u4e32\r\n     * @return \u89e3\u5bc6\u540e\u5185\u5bb9\r\n     */\r\n    public static String decrypt(String password, String data) {\r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52a0\u5bc6\u5931\u8d25\uff0ckey\u4e0d\u80fd\u5c0f\u4e8e8\u4f4d");\r\n        }\r\n        if (data == null) {\r\n            return null;\r\n        }\r\n        try {\r\n            Key secretKey = generateKey(password);\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            cipher.init(Cipher.DECRYPT_MODE, secretKey, iv);\r\n            return new String(cipher.doFinal(Base64.getDecoder().decode(data.getBytes(CHARSET))), CHARSET);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return data;\r\n        }\r\n    }\r\n \r\n    /**\r\n     * DES\u52a0\u5bc6\u6587\u4ef6\r\n     *\r\n     * @param srcFile  \u5f85\u52a0\u5bc6\u7684\u6587\u4ef6\r\n     * @param destFile \u52a0\u5bc6\u540e\u5b58\u653e\u7684\u6587\u4ef6\u8def\u5f84\r\n     * @return \u52a0\u5bc6\u540e\u7684\u6587\u4ef6\u8def\u5f84\r\n     */\r\n    public static String encryptFile(String password, String srcFile, String destFile) {\r\n \r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52a0\u5bc6\u5931\u8d25\uff0ckey\u4e0d\u80fd\u5c0f\u4e8e8\u4f4d");\r\n        }\r\n        try {\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            cipher.init(Cipher.ENCRYPT_MODE, generateKey(password), iv);\r\n            InputStream is = new FileInputStream(srcFile);\r\n            OutputStream out = new FileOutputStream(destFile);\r\n            CipherInputStream cis = new CipherInputStream(is, cipher);\r\n            byte[] buffer = new byte[1024];\r\n            int r;\r\n            while ((r = cis.read(buffer)) > 0) {\r\n                out.write(buffer, 0, r);\r\n            }\r\n            cis.close();\r\n            is.close();\r\n            out.close();\r\n            return destFile;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /**\r\n     * DES\u89e3\u5bc6\u6587\u4ef6\r\n     *\r\n     * @param srcFile  \u5df2\u52a0\u5bc6\u7684\u6587\u4ef6\r\n     * @param destFile \u89e3\u5bc6\u540e\u5b58\u653e\u7684\u6587\u4ef6\u8def\u5f84\r\n     * @return \u89e3\u5bc6\u540e\u7684\u6587\u4ef6\u8def\u5f84\r\n     */\r\n    public static String decryptFile(String password, String srcFile, String destFile) {\r\n        if (password== null || password.length() < 8) {\r\n            throw new RuntimeException("\u52a0\u5bc6\u5931\u8d25\uff0ckey\u4e0d\u80fd\u5c0f\u4e8e8\u4f4d");\r\n        }\r\n        try {\r\n            File file = new File(destFile);\r\n            if (!file.exists()) {\r\n                file.getParentFile().mkdirs();\r\n                file.createNewFile();\r\n            }\r\n            IvParameterSpec iv = new IvParameterSpec(IV_PARAMETER.getBytes(CHARSET));\r\n            Cipher cipher = Cipher.getInstance(CIPHER_ALGORITHM);\r\n            cipher.init(Cipher.DECRYPT_MODE, generateKey(password), iv);\r\n            InputStream is = new FileInputStream(srcFile);\r\n            OutputStream out = new FileOutputStream(destFile);\r\n            CipherOutputStream cos = new CipherOutputStream(out, cipher);\r\n            byte[] buffer = new byte[1024];\r\n            int r;\r\n            while ((r = is.read(buffer)) >= 0) {\r\n                cos.write(buffer, 0, r);\r\n            }\r\n            cos.close();\r\n            is.close();\r\n            out.close();\r\n            return destFile;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyGenerator;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityDES {\r\n    \r\n    public static String DES_MODE_JDK = "jdk";\r\n    public static String DES_MODE_BC = "bouncyCastle";\r\n    private Key key;\r\n\r\n    //\u5355\u4f8b\u6a21\u5f0f\r\n    private static SecurityDES securityDES;\r\n    public static SecurityDES getInstance(String password, String succurityMode) {\r\n        if(securityDES == null) {\r\n            securityDES = new SecurityDES(password, succurityMode);\r\n        }\r\n        return securityDES;\r\n    }\r\n    \r\n    private SecurityDES(String password, String succurityMode)  {\r\n        try{\r\n            KeyGenerator generator;\r\n            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");\r\n            secureRandom.setSeed(password.getBytes());\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(DES_MODE_BC, succurityMode)) {\r\n                Security.addProvider(new BouncyCastleProvider());//\u589e\u52a0provider\r\n                generator = KeyGenerator.getInstance("DES", "BC");\r\n                generator.init(56, secureRandom);\r\n                generator.getProvider();\r\n            }else {\r\n                generator = KeyGenerator.getInstance("DES");\r\n                generator.init(56, secureRandom);\r\n            }\r\n            key = generator.generateKey();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch (Exception e) { \r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("DES/ECB/PKCS5Padding");\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void des() {\r\n\tString src = "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0cobject-oriented\uff01@#*5"; // \u9700\u8981\u52a0\u5bc6\u7684\u539f\u59cb\u5b57\u7b26\u4e32\r\n\tString password = "123456";\r\n\tSecurityDES securityJdkDES = SecurityDES.getInstance(password, SecurityDES.DES_MODE_JDK);\r\n\tbyte[] encodeJdkDES = securityJdkDES.encrypt(src.getBytes());\r\n\tSystem.out.println("JDK DES\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeJdkDES));\r\n\tbyte[] decodeJdkDES = securityJdkDES.decrypt(encodeJdkDES);\r\n\tSystem.out.println("JDK DES\u89e3\u5bc6\uff1a" + new String(decodeJdkDES));\r\n\tSecurityDES securityBcDES = SecurityDES.getInstance(password, SecurityDES.DES_MODE_BC);\r\n\tbyte[] encodeBcDES = securityBcDES.encrypt(src.getBytes());\r\n\tSystem.out.println("bouncyCastle DES\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeBcDES));\r\n\tbyte[] decodeBcDES = securityBcDES.decrypt(encodeBcDES);\r\n\tSystem.out.println("bouncyCastle DES\u89e3\u5bc6\uff1a" + new String(decodeBcDES));\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.DESedeKeySpec;\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityDES3 {\r\n    \r\n    public static String DES3_MODE_JDK = "jdk";\r\n    public static String DES3_MODE_BC = "bouncyCastle";\r\n    private Key key;\r\n    \r\n    //\u5355\u4f8b\u6a21\u5f0f\r\n    private static SecurityDES3 securityDES3;\r\n    public static SecurityDES3 getInstance(String password, String succurityMode) {\r\n        if(securityDES3 == null) {\r\n            securityDES3 = new SecurityDES3(password, succurityMode);\r\n        }\r\n        return securityDES3;\r\n    }\r\n    \r\n    private SecurityDES3(String password, String succurityMode)  {\r\n        try{\r\n            //1.\u751f\u6210key\r\n            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");\r\n            secureRandom.setSeed(password.getBytes());\r\n            KeyGenerator keyGenerator;\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(DES3_MODE_BC, succurityMode)) {\r\n                 Security.addProvider(new BouncyCastleProvider());\r\n                 keyGenerator = KeyGenerator.getInstance("desede", "BC");\r\n            }else {\r\n                keyGenerator = KeyGenerator.getInstance("desede");\r\n            }\r\n            keyGenerator.init(168, secureRandom);//\u521d\u59cb\u5316key\u7684\u957f\u5ea6\uff0c\u53ea\u80fd\u662f128\uff0c\r\n            SecretKey secretKey = keyGenerator.generateKey();//\u751f\u6210key\r\n            byte[] keyBytes = secretKey.getEncoded();//\u5f97\u5230key\u7684\u5b57\u8282\u6570\u7ec4\r\n            //2.key\u7684\u8f6c\u6362\r\n            DESedeKeySpec deSedeKeySpec = new DESedeKeySpec(keyBytes);\r\n            SecretKeyFactory factory = SecretKeyFactory.getInstance("desede");//\u79d8\u5bc6\u5bc6\u94a5\u5de5\u5382\r\n            key = factory.generateSecret(deSedeKeySpec);\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("desede/ECB/PKCS5Padding");//\u52a0\u89e3\u5bc6\u65b9\u5f0f+\u5de5\u4f5c\u6a21\u5f0f+\u586b\u5145\u65b9\u5f0f\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);//\u4ee5\u52a0\u5bc6\u6a21\u5f0f\u521d\u59cb\u5316\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("desede/ECB/PKCS5Padding");//\u52a0\u89e3\u5bc6\u65b9\u5f0f+\u5de5\u4f5c\u6a21\u5f0f+\u586b\u5145\u65b9\u5f0f\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void des3() {\r\n\tString src = "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0cobject-oriented\uff01@#*5"; // \u9700\u8981\u52a0\u5bc6\u7684\u539f\u59cb\u5b57\u7b26\u4e32\r\n\tString password = "123456";\r\n\tSecurityDES3 securityJdkDES3 = SecurityDES3.getInstance(password, SecurityDES3.DES3_MODE_JDK);\r\n\tbyte[] encodeJdkDES3 = securityJdkDES3.encrypt(src.getBytes());\r\n\tSystem.out.println("JDK DES3\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeJdkDES3));\r\n\tbyte[] decodeJdkDES3 = securityJdkDES3.decrypt(encodeJdkDES3);\r\n\tSystem.out.println("JDK DES3\u89e3\u5bc6\uff1a" + new String(decodeJdkDES3));\r\n\tSecurityDES3 securityBcDES3 = SecurityDES3.getInstance(password, SecurityDES3.DES3_MODE_BC);\r\n\tbyte[] encodeBcDES3 = securityBcDES3.encrypt(src.getBytes());\r\n\tSystem.out.println("bouncyCastle DES3\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeBcDES3));\r\n\tbyte[] decodeBcDES3 = securityBcDES3.decrypt(encodeBcDES3);\r\n\tSystem.out.println("bouncyCastle DES3\u89e3\u5bc6\uff1a" + new String(decodeBcDES3));\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"rsa",children:"RSA"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"3. RSA\u52a0\u5bc6\u7b97\u6cd5\r\nRSA\u662f\u2f6c\u524d\u6700\u6709\u5f71\u54cd\u2f12\u7684\u516c\u94a5\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5b83\u80fd\u591f\u62b5\u6297\u5230\u2f6c\u524d\u4e3a\u2f4c\u5df2\u77e5\u7684\u7edd\u2f24\u591a\u6570\u5bc6\u7801\u653b\u51fb\uff0c\u5df2\u88abISO\u63a8\u8350\u4e3a\u516c\u94a5\u6570\u636e\u52a0\u5bc6\u6807\u51c6\u3002RSA\u662f\u88ab\u7814\u7a76\u5f97\u6700\u2f34\u6cdb\u7684\u516c\u94a5\u7b97\u6cd5\uff0c\u4ece\u63d0\u51fa\u5230\u73b0\u5728\uff0c\u7ecf\u5386\u4e86\u5404\u79cd\u653b\u51fb\u7684\u8003\u9a8c\uff0c\u9010\u6e10\u4e3a\u2f08\u4eec\u63a5\u53d7\uff0c\u666e\u904d\u8ba4\u4e3a\u662f\u2f6c\u524d\u6700\u4f18\u79c0\u7684\u516c\u94a5\u2f45\u6848\u4e4b\u2f00\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport sun.misc.BASE64Decoder;\r\nimport sun.misc.BASE64Encoder;\r\n\r\nimport javax.crypto.BadPaddingException;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.IllegalBlockSizeException;\r\nimport javax.crypto.NoSuchPaddingException;\r\nimport java.io.IOException;\r\nimport java.security.*;\r\n\r\n/**\r\n * @title: RSAUtil\r\n * @Author hmh\r\n * @Date: 2022/7/4 16:06\r\n * @Version 1.0\r\n */\r\npublic class RSAUtil {\r\n    \r\n    public static KeyPair keyPairGenerator(){\r\n        KeyPair keyPair = null;\r\n        try {\r\n            //\u4f7f\u7528RSA\u7b97\u6cd5\u83b7\u5f97\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\u5bf9\u8c61keyPairGenerator\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\r\n            //\u8bbe\u7f6e\u5bc6\u94a5\u957f\u5ea6\u4e3a1024\r\n            keyPairGenerator.initialize(1024);\r\n            //\u751f\u6210\u5bc6\u94a5\u5bf9\r\n            keyPair = keyPairGenerator.generateKeyPair();\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return keyPair;\r\n    }\r\n\r\n    /**\r\n     * \u516c\u94a5\u52a0\u5bc6\r\n     * @param password \u52a0\u5bc6\u6570\u636e\r\n     * @param publicKey \u516c\u94a5\r\n     * @return \u52a0\u5bc6\u540e\u6570\u636e\r\n     */\r\n    public static String encrypt(String password, PublicKey publicKey){\r\n        byte[] secret = new byte[0];\r\n        try {\r\n            //\u83b7\u53d6\u4e00\u4e2a\u52a0\u5bc6\u7b97\u6cd5\u4e3aRSA\u7684\u52a0\u89e3\u5bc6\u5668\u5bf9\u8c61cipher\u3002\r\n            Cipher cipher = Cipher.getInstance("RSA");\r\n            //\u8bbe\u7f6e\u4e3a\u52a0\u5bc6\u6a21\u5f0f,\u5e76\u5c06\u516c\u94a5\u7ed9cipher\u3002\r\n            cipher.init(Cipher.ENCRYPT_MODE, publicKey);\r\n            //\u83b7\u5f97\u5bc6\u6587\r\n            secret = cipher.doFinal(password.getBytes());\r\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | InvalidKeyException | IllegalBlockSizeException | BadPaddingException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //\u8fdb\u884cBase64\u7f16\u7801\u5e76\u8fd4\u56de\r\n        return new BASE64Encoder().encode(secret);\r\n    }\r\n\r\n    /**\r\n     * \u79c1\u94a5\u89e3\u5bc6\r\n     * @param password \u89e3\u5bc6\u6570\u636e\r\n     * @param privateKey \u79c1\u94a5\r\n     * @return \u89e3\u5bc6\u540e\u7684\u6570\u636e\r\n     */\r\n    public static String decrypt(String password, PrivateKey privateKey){\r\n        byte[] b = new byte[0];\r\n        try {\r\n            Cipher cipher = Cipher.getInstance("RSA");\r\n            //\u4f20\u9012\u79c1\u94a5\uff0c\u8bbe\u7f6e\u4e3a\u89e3\u5bc6\u6a21\u5f0f\u3002\r\n            cipher.init(Cipher.DECRYPT_MODE, privateKey);\r\n            //\u89e3\u5bc6\u5668\u89e3\u5bc6\u7531Base64\u89e3\u7801\u540e\u7684\u5bc6\u6587,\u83b7\u5f97\u660e\u6587\u5b57\u8282\u6570\u7ec4\r\n            b = cipher.doFinal(new BASE64Decoder().decodeBuffer(password));\r\n        } catch (NoSuchAlgorithmException | NoSuchPaddingException | IllegalBlockSizeException | BadPaddingException | IOException | InvalidKeyException e) {\r\n            e.printStackTrace();\r\n        }\r\n        //\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\r\n        return new String(b);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void rsa() {\r\n\tKeyPair keyPair = RSAUtil.keyPairGenerator();\r\n\tPrivateKey privateKey = keyPair.getPrivate();\r\n\tPublicKey publicKey = keyPair.getPublic();\r\n\tSystem.out.println(RSAUtil.encrypt("rsa", publicKey));\r\n\tSystem.out.println(RSAUtil.decrypt(RSAUtil.encrypt("rsa", publicKey), privateKey));\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Signature;\r\nimport java.security.interfaces.RSAPrivateKey;\r\nimport java.security.interfaces.RSAPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DigitalSignRSA {\r\n    //\u516c\u94a5\r\n    private static final String PUBLIC_KEY = "RSAPublicKey";\r\n    //\u79c1\u94a5\r\n    private static final String PRIVATE_KEY = "RSAPrivateKey";\r\n \r\n    /** \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\r\n     * @return Map \u5bc6\u94a5\u5bf9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("RSA");\r\n            // \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\uff0c\u5bc6\u94a5\u5927\u5c0f\u4e3a96-1024\u4f4d\r\n            keyPairGenerator.initialize(512, new SecureRandom());\r\n            //\u751f\u6210\u5bc6\u94a5\u5bf9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516c\u94a5\r\n            RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();\r\n            //\u79c1\u94a5\r\n            RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();\r\n            //\u5c06\u5bc6\u94a5\u5bf9\u5b58\u50a8\u5728Map\u4e2d\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6267\u884c\u6570\u5b57\u7b7e\u540d\u3010\u79c1\u94a5\u7b7e\u540d\u3011\r\n     * @param data \u5f85\u52a0\u5bc6\u6570\u636e\r\n     * @param privKey  \u79c1\u94a5\r\n     * @return byte[] \u52a0\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] digitalSign(byte[] data, byte[] privKey) {\r\n        try {\r\n            PrivateKey privateKey = (PrivateKey) KeyFactory.getInstance("RSA")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(privKey));\r\n            Signature signature = Signature.getInstance("MD5WithRSA");\r\n            signature.initSign(privateKey);\r\n            signature.update(data);\r\n            return signature.sign();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u9a8c\u8bc1\u7b7e\u540d\u3010\u516c\u94a5\u9a8c\u8bc1\u3011\r\n     * @param data \u5f85\u89e3\u5bc6\u6570\u636e\r\n     * @param pubKey  \u516c\u94a5\r\n     * @return byte[] \u89e3\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static boolean signVerify(byte[] data, byte[] rsaData, byte[] pubKey) {\r\n        try {\r\n            PublicKey publicKey = (PublicKey) KeyFactory.getInstance("RSA")\r\n                    .generatePublic(new X509EncodedKeySpec(pubKey));\r\n            Signature signature = Signature.getInstance("MD5WithRSA");\r\n            signature.initVerify(publicKey);\r\n            signature.update(data);\r\n            return signature.verify(rsaData);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n \r\n    /** \u53d6\u5f97\u79c1\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u79c1\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53d6\u5f97\u516c\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u516c\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void rsa() {\r\n\t//\u516c\u94a5\r\n\tbyte[] publicKey;\r\n\t//\u79c1\u94a5\r\n\tbyte[] privateKey;\r\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\r\n\t//\u751f\u6210\u5bc6\u94a5\u5bf9\r\n\tMap<String, Object> keyMap = DigitalSignRSA.initKey();\r\n\tpublicKey = DigitalSignRSA.getPublicKey(keyMap);\r\n\tprivateKey = DigitalSignRSA.getPrivateKey(keyMap);\r\n\tSystem.out.println("RSA\u516c\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n\tSystem.out.println("RSA\u79c1\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n\tSystem.out.println();\r\n\tString msgA2B = "What can I do for you?";\r\n\t//\u6267\u884c\u6570\u5b57\u7b7e\u540d\u3010\u79c1\u94a5\u7b7e\u540d\u3011\r\n\tbyte[] encodeMsgA2B = DigitalSignRSA.digitalSign(msgA2B.getBytes(), privateKey);\r\n\tSystem.out.println("JDK RSA\u7b7e\u540d\uff1a:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n\t//\u9a8c\u8bc1\u7b7e\u540d\u3010\u516c\u94a5\u9a8c\u8bc1\u3011\r\n\tboolean bool = DigitalSignRSA.signVerify(msgA2B.getBytes(), encodeMsgA2B, publicKey);\r\n\tSystem.out.println("\u6570\u5b57\u7b7e\u540d\u662f\u5426\u6709\u6548\uff1f:\\n" + bool);\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"idea",children:"IDEA"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"4.IDEA\u52a0\u5bc6\u7b97\u6cd5\r\nIDEA\uff08International Data Encryption Algorithm\uff09\u56fd\u9645\u6570\u636e\u52a0\u5bc6\u7b97\u6cd5\uff1a\u4f7f\u2f64 128 \u4f4d\u5bc6\u94a5\u63d0\u4f9b\u2fae\u5e38\u5f3a\u7684\u5b89\u5168\u6027\u3002\n"})}),"\n",(0,t.jsx)(r.h3,{id:"dsa",children:"DSA"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"5. DSA\u52a0\u5bc6\u7b97\u6cd5\r\nDSA\uff08Digital Signature Algorithm\uff09\uff1a\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff0c\u662f\u2f00\u79cd\u6807\u51c6\u7684 DSS\uff08\u6570\u5b57\u7b7e\u540d\u6807\u51c6\uff09\u3002\u53ea\u80fd\u7528\u4e8e\u7b7e\u540d\uff0c\u4e0d\u80fd\u7528\u4e8e\u52a0\u89e3\u5bc6\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Signature;\r\nimport java.security.interfaces.DSAPrivateKey;\r\nimport java.security.interfaces.DSAPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DSAUtil {\r\n    //\u516c\u94a5\r\n    private static final String PUBLIC_KEY = "DSAPublicKey";\r\n    //\u79c1\u94a5\r\n    private static final String PRIVATE_KEY = "DSAPrivateKey";\r\n \r\n    /** \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\r\n     * @return Map \u5bc6\u94a5\u5bf9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DSA");\r\n            // \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\uff0c\u5bc6\u94a5\u5927\u5c0f\u4e3a96-1024\u4f4d\r\n            keyPairGenerator.initialize(512, new SecureRandom());\r\n            //\u751f\u6210\u5bc6\u94a5\u5bf9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516c\u94a5\r\n            DSAPublicKey publicKey = (DSAPublicKey) keyPair.getPublic();\r\n            //\u79c1\u94a5\r\n            DSAPrivateKey privateKey = (DSAPrivateKey) keyPair.getPrivate();\r\n            //\u5c06\u5bc6\u94a5\u5bf9\u5b58\u50a8\u5728Map\u4e2d\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6267\u884c\u6570\u5b57\u7b7e\u540d\u3010\u79c1\u94a5\u7b7e\u540d\u3011\r\n     * @param data \u5f85\u52a0\u5bc6\u6570\u636e\r\n     * @param privKey  \u79c1\u94a5\r\n     * @return byte[] \u52a0\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] digitalSign(byte[] data, byte[] privKey) {\r\n        try {\r\n            PrivateKey privateKey = (PrivateKey) KeyFactory.getInstance("DSA")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(privKey));\r\n            Signature signature = Signature.getInstance("SHA1WithDSA");\r\n            signature.initSign(privateKey);\r\n            signature.update(data);\r\n            return signature.sign();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u9a8c\u8bc1\u7b7e\u540d\u3010\u516c\u94a5\u9a8c\u8bc1\u3011\r\n     * @param data \u5f85\u89e3\u5bc6\u6570\u636e\r\n     * @param pubKey  \u516c\u94a5\r\n     * @return byte[] \u89e3\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static boolean signVerify(byte[] data, byte[] rsaData, byte[] pubKey) {\r\n        try {\r\n            PublicKey publicKey = (PublicKey) KeyFactory.getInstance("DSA")\r\n                    .generatePublic(new X509EncodedKeySpec(pubKey));\r\n            Signature signature = Signature.getInstance("SHA1WithDSA");\r\n            signature.initVerify(publicKey);\r\n            signature.update(data);\r\n            return signature.verify(rsaData);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n \r\n    /** \u53d6\u5f97\u79c1\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u79c1\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53d6\u5f97\u516c\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u516c\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void dsa() {\r\n\t//\u516c\u94a5\r\n\tbyte[] publicKey;\r\n\t//\u79c1\u94a5\r\n\tbyte[] privateKey;\r\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\r\n\t//\u751f\u6210\u5bc6\u94a5\u5bf9\r\n\tMap<String, Object> keyMap = DSAUtil.initKey();\r\n\tpublicKey = DSAUtil.getPublicKey(keyMap);\r\n\tprivateKey = DSAUtil.getPrivateKey(keyMap);\r\n\tSystem.out.println("DSA\u516c\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n\tSystem.out.println("DSA\u79c1\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n\tSystem.out.println();\r\n\tString msgA2B = "What can I do for you?";\r\n\t//\u6267\u884c\u6570\u5b57\u7b7e\u540d\u3010\u79c1\u94a5\u7b7e\u540d\u3011\r\n\tbyte[] encodeMsgA2B = DSAUtil.digitalSign(msgA2B.getBytes(), privateKey);\r\n\tSystem.out.println("JDK DSA\u7b7e\u540d\uff1a:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n\t//\u9a8c\u8bc1\u7b7e\u540d\u3010\u516c\u94a5\u9a8c\u8bc1\u3011\r\n\tboolean bool = DSAUtil.signVerify(msgA2B.getBytes(), encodeMsgA2B, publicKey);\r\n\tSystem.out.println("\u6570\u5b57\u7b7e\u540d\u662f\u5426\u6709\u6548\uff1f:\\n" + bool);\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"aes",children:"AES"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"6.AES\u52a0\u5bc6\u7b97\u6cd5\r\nAES\u52a0\u5bc6\u7b97\u6cd5\u2f1c\u79f0Rijndael\u52a0\u5bc6\u6cd5\uff0c\u2f6c\u524d\u5df2\u7ecf\u88ab\u591a\u2f45\u5206\u6790\u4e14\u2f34\u4e3a\u5168\u4e16\u754c\u6240\u4f7f\u2f64\u3002\u7ecf\u8fc7\u4e94\u5e74\u53d1\u5c55\uff0cAES\u52a0\u5bc6\u7b97\u6cd5\u5df2\u7136\u6210\u4e3a\u5bf9\u79f0\u5bc6\u94a5\u52a0\u5bc6\u4e2d\u6700\u6d41\u884c\u7684\u7b97\u6cd5\u4e4b\u2f00\u3002\r\n\u95ee\u9898\uff1a\r\n(1) Illegal key size or default parameters\uff1a\r\n\u9700\u8981\u66f4\u6539jce\uff0c\u4e0b\u8f7d\u5730\u5740\r\nhttp://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-429243.html\r\n\u66f4\u6362\u76ee\u5f55jar\uff1a\r\n#{jdk}\\jre\\lib\\security\r\n(2)Jurisdiction policy files are not signed by trusted signers!\r\njce\u7248\u672c\u4e0d\u5bf9\uff0c\u5bf9\u5e94jdk\u7248\u672c\u4e0b\u8f7d\u6b63\u786e\u7684jce\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.IvParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.apache.commons.codec.binary.Hex;\r\n\r\nimport java.security.Security;\r\nimport java.util.Locale;\r\n\r\n/**\r\n * @author \uff1asmallkinghjm\r\n * @description\uff1aTODO\r\n * @date \uff1a2022/3/2 11:20\r\n */\r\n@Slf4j\r\npublic class AESUtil {\r\n\r\n    /**\r\n     * AES\u52a0\u5bc6\r\n     *\r\n     * @param content \u660e\u6587\r\n     * @param key     \u79d8\u94a5\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static String encrypt(String content, String key) throws Exception {\r\n        // \u5c06\u8fd4\u56de\u7684\u52a0\u5bc6\u8fc7\u7684 byte[] \u8f6c\u6362\u6210Base64\u7f16\u7801\u5b57\u7b26\u4e32 \uff01\uff01\uff01\uff01\u5f88\u5173\u952e\r\n        return base64ToString(AES_ECB_Encrypt(content.getBytes(), key.getBytes()));\r\n    }\r\n\r\n    /**\r\n     * AES\u89e3\u5bc6\r\n     *\r\n     * @param content Base64\u7f16\u7801\u7684\u5bc6\u6587\r\n     * @param key     \u79d8\u94a5\r\n     * @return\r\n     * @throws Exception\r\n     */\r\n    public static String decrypt(String content, String key) {\r\n        // stringToBase64() \u5c06 Base64\u7f16\u7801\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u6210 byte[] !!!\u4e0ebase64ToString(\uff09\u914d\u5957\u4f7f\u7528\r\n        try {\r\n            byte[] base64 = stringToBase64(content);\r\n            byte[] bytes = AES_ECB_Decrypt(base64, key.getBytes());\r\n            String result = new String(bytes);\r\n            return result.replaceAll("\\"","");\r\n        } catch (Exception e) {\r\n            log.info("AES\u89e3\u5bc6\u51fa\u9519\uff01\uff01\uff01");\r\n            e.printStackTrace();\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    public static byte[] AES_ECB_Encrypt(byte[] content, byte[] keyBytes) {\r\n        try {\r\n            SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");\r\n            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS7Padding");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);\r\n            byte[] result = cipher.doFinal(content);\r\n            return result;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public static byte[] AES_ECB_Decrypt(byte[] content, byte[] keyBytes) {\r\n        try {\r\n            SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");\r\n            Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS7Padding");\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            byte[] result = cipher.doFinal(content);\r\n            return result;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * \u5b57\u7b26\u4e32\u88c5\u6362\u6210 Base64\r\n     */\r\n\r\n    public static byte[] stringToBase64(String key) throws Exception {\r\n        return Base64.decodeBase64(key.getBytes());\r\n    }\r\n\r\n    /**\r\n     * Base64\u88c5\u6362\u6210\u5b57\u7b26\u4e32\r\n     */\r\n    public static String base64ToString(byte[] key) throws Exception {\r\n        return new Base64().encodeToString(key);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void aes() throws Exception {\r\n\tString key = "5F6B2AK33DZE20A05E74C231B47AC8F6";\r\n\tString content = "smallkinghjm_2022";//\u660e\u6587\r\n\tString encrypt = AESUtil.encrypt(content, key);\r\n\tSystem.out.println("\u52a0\u5bc6\uff1a" + encrypt);\r\n\tString decrypt = AESUtil.decrypt(encrypt, key);\r\n\tSystem.out.println("\u89e3\u5bc6\uff1a"+decrypt);\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\n\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityAES {\r\n    \r\n    public static String AES_MODE_JDK = "jdk";\r\n    public static String AES_MODE_BC = "bouncyCastle";\r\n    private Key key;\r\n    \r\n    //\u5355\u4f8b\u6a21\u5f0f\r\n    private static SecurityAES securityAES;\r\n    public static SecurityAES getInstance(String password, String succurityMode) {\r\n        if(securityAES == null) {\r\n            securityAES = new SecurityAES(password, succurityMode);\r\n        }\r\n        return securityAES;\r\n    }\r\n    \r\n    private SecurityAES(String password, String succurityMode)  {\r\n        try{\r\n            //1.\u751f\u6210key\r\n            SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");\r\n            secureRandom.setSeed(password.getBytes());\r\n            KeyGenerator keyGenerator;\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(AES_MODE_BC, succurityMode)) {\r\n                 Security.addProvider(new BouncyCastleProvider());\r\n                 keyGenerator = KeyGenerator.getInstance("aes", "BC");\r\n            }else {\r\n                keyGenerator = KeyGenerator.getInstance("aes");\r\n            }\r\n            keyGenerator.init(128, secureRandom);//\u521d\u59cb\u5316key\u7684\u957f\u5ea6\uff0c\u53ea\u80fd\u662f128\uff0c\r\n            SecretKey secretKey = keyGenerator.generateKey();//\u751f\u6210key\r\n            byte[] keyBytes = secretKey.getEncoded();//\u5f97\u5230key\u7684\u5b57\u8282\u6570\u7ec4\r\n            //2.key\u7684\u8f6c\u6362\r\n            key = new SecretKeySpec(keyBytes, "aes");\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//\u52a0\u89e3\u5bc6\u65b9\u5f0f+\u5de5\u4f5c\u6a21\u5f0f+\u586b\u5145\u65b9\u5f0f\r\n            cipher.init(Cipher.ENCRYPT_MODE, key);//\u4ee5\u52a0\u5bc6\u6a21\u5f0f\u521d\u59cb\u5316\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5Padding");//\u52a0\u89e3\u5bc6\u65b9\u5f0f+\u5de5\u4f5c\u6a21\u5f0f+\u586b\u5145\u65b9\u5f0f\r\n            cipher.init(Cipher.DECRYPT_MODE, key);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void aes() {\r\n\tString src = "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0cobject-oriented\uff01@#*5"; // \u9700\u8981\u52a0\u5bc6\u7684\u539f\u59cb\u5b57\u7b26\u4e32\r\n\tString password = "123456";\r\n\tSecurityAES securityJdkAES = SecurityAES.getInstance(password, SecurityAES.AES_MODE_JDK);\r\n\tbyte[] encodeJdkAES = securityJdkAES.encrypt(src.getBytes());\r\n\tSystem.out.println("JDK AES\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeJdkAES));\r\n\tbyte[] decodeJdkAES = securityJdkAES.decrypt(encodeJdkAES);\r\n\tSystem.out.println("JDK AES\u89e3\u5bc6\uff1a" + new String(decodeJdkAES));\r\n\r\n\tSecurityAES securityBcAES = SecurityAES.getInstance(password, SecurityAES.AES_MODE_BC);\r\n\tbyte[] encodeBcAES = securityBcAES.encrypt(src.getBytes());\r\n\tSystem.out.println("bouncyCastle AES\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeBcAES));\r\n\tbyte[] decodeBcAES = securityBcAES.decrypt(encodeBcAES);\r\n\tSystem.out.println("bouncyCastle AES\u89e3\u5bc6\uff1a" + new String(decodeBcAES));\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"elgamal",children:"Elgamal"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"7. Elgamal\u52a0\u5bc6\u7b97\u6cd5\r\nElGamal\u7b97\u6cd5\uff0c\u662f\u2f00\u79cd\u8f83\u4e3a\u5e38\u89c1\u7684\u52a0\u5bc6\u7b97\u6cd5\uff0c\u5b83\u662f\u57fa\u4e8e1984\u5e74\u63d0\u51fa\u7684\u516c\u94a5\u5bc6\u7801\u4f53\u5236\u548c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\u4f53\u7cfb\u3002\u65e2\u80fd\u2f64\u4e8e\u6570\u636e\u52a0\u5bc6\u4e5f\u80fd\u2f64\u4e8e\u6570\u5b57\u7b7e\u540d\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.AlgorithmParameterGenerator;\r\nimport java.security.AlgorithmParameters;\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.spec.DHParameterSpec;\r\n\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class ElgamalUtil {\r\n    \r\n    /**\r\n     * \u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u2014\u2014ELGamal\u7b97\u6cd5\r\n     * \u5bf9\u4e8e\uff1a\u201cIllegal key size or default parameters\u201d\u5f02\u5e38\uff0c\u662f\u56e0\u4e3a\u7f8e\u56fd\u7684\u51fa\u53e3\u9650\u5236\uff0cSun\u901a\u8fc7\u6743\u9650\u6587\u4ef6\uff08local_policy.jar\u3001US_export_policy.jar\uff09\u505a\u4e86\u76f8\u5e94\u9650\u5236\u3002\r\n     * Java 7 \u65e0\u653f\u7b56\u9650\u5236\u6587\u4ef6\uff1ahttp://www.oracle.com/technetwork/java/javase/downloads/jce-7-download-432124.html,\r\n     * \u4e0b\u8f7d\u540e\u5f97\u5230UnlimitedJCEPolicyJDK7.zip\uff0c\u89e3\u538b\u66ff\u6362%JAVA_HOME%/jre/lib/security\u7684\u4e24\u4e2a\u6587\u4ef6\u5373\u53ef\r\n     */\r\n    \r\n    //\u516c\u94a5\r\n    private static final String PUBLIC_KEY = "elgamalPublicKey";\r\n    //\u79c1\u94a5\r\n    private static final String PRIVATE_KEY = "elgamalPrivateKey";\r\n \r\n    /** \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\r\n     * @return Map \u5bc6\u94a5\u5bf9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            Security.addProvider(new BouncyCastleProvider());//\u52a0\u5165\u5bf9Bouncy Castle\u7684\u652f\u6301\r\n            //1.\u521d\u59cb\u5316\u53d1\u9001\u65b9\u5bc6\u94a5\r\n            AlgorithmParameterGenerator algorithmParameterGenerator = AlgorithmParameterGenerator.getInstance("ELGamal");\r\n            algorithmParameterGenerator.init(256);//\u521d\u59cb\u5316\u53c2\u6570\u751f\u6210\u5668\r\n            AlgorithmParameters algorithmParameters = algorithmParameterGenerator.generateParameters();//\u751f\u6210\u7b97\u6cd5\u53c2\u6570\r\n            DHParameterSpec dhParameterSpec = algorithmParameters.getParameterSpec(DHParameterSpec.class);//\u6784\u5efa\u53c2\u6570\u6750\u6599\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("ELGamal");//\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            //\u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            keyPairGenerator.initialize(dhParameterSpec, new SecureRandom());\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516c\u94a5\u548c\u79c1\u94a5\r\n            PublicKey elGamalPublicKey = keyPair.getPublic();\r\n            PrivateKey elGamalPrivateKey = keyPair.getPrivate();\r\n            //\u5c06\u5bc6\u94a5\u5bf9\u5b58\u50a8\u5728Map\u4e2d\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, elGamalPublicKey);\r\n            keyMap.put(PRIVATE_KEY, elGamalPrivateKey);\r\n            return keyMap;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u52a0\u5bc6\u3010\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6\u3011\r\n     * @param data \u5f85\u52a0\u5bc6\u6570\u636e\r\n     * @param key  \u516c\u94a5\r\n     * @return byte[] \u52a0\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] encrypt(byte[] data, byte[] key) {\r\n        try {\r\n            PublicKey pubKey = (PublicKey) KeyFactory.getInstance("ELGamal")\r\n                    .generatePublic(new X509EncodedKeySpec(key));\r\n            Cipher cipher = Cipher.getInstance("ELGamal","BC");\r\n            cipher.init(Cipher.ENCRYPT_MODE, pubKey);\r\n            byte[] result = cipher.doFinal(data);\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /**  \u89e3\u5bc6\u3010\u516c\u94a5\u52a0\u5bc6\uff0c\u79c1\u94a5\u89e3\u5bc6\u3011\r\n     * @param data \u5f85\u89e3\u5bc6\u6570\u636e\r\n     * @param key  \u79c1\u94a5\r\n     * @return byte[] \u89e3\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] decrypt(byte[] data, byte[] key) {\r\n        try {\r\n            PrivateKey priKey = (PrivateKey) KeyFactory.getInstance("ELGamal")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(key));\r\n            //\u5b9e\u4f8b\u5316\r\n            Cipher cipher = Cipher.getInstance("ELGamal","BC");\r\n            //\u4f7f\u7528\u5bc6\u94a5\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u4e3a\u89e3\u5bc6\u6a21\u5f0f\r\n            cipher.init(Cipher.DECRYPT_MODE, priKey);\r\n            //\u6267\u884c\u64cd\u4f5c\r\n            byte[] result = cipher.doFinal(data);\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u53d6\u5f97\u79c1\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u79c1\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53d6\u5f97\u516c\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u516c\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void elgamal() {\r\n\t//\u516c\u94a5\r\n\tbyte[] publicKey;\r\n\t//\u79c1\u94a5\r\n\tbyte[] privateKey;\r\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\r\n\t//\u751f\u6210\u7532\u65b9\u5bc6\u94a5\u5bf9\r\n\tMap<String, Object> keyMap = ElgamalUtil.initKey();\r\n\tpublicKey = ElgamalUtil.getPublicKey(keyMap);\r\n\tprivateKey = ElgamalUtil.getPrivateKey(keyMap);\r\n\tSystem.out.println("Elgamal\u516c\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n\tSystem.out.println("Elgamal\u79c1\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n\r\n\tSystem.out.println();\r\n\tSystem.out.println("===\u7532\u65b9\u5411\u4e59\u65b9\u53d1\u9001\u52a0\u5bc6\u6570\u636e===");\r\n\tString msgA2B = "\u6c42\u77e5\u82e5\u9965\uff0c\u865a\u5fc3\u82e5\u611a\u3002";\r\n\tSystem.out.println("\u539f\u6587:\\n" + msgA2B);\r\n\tSystem.out.println("---\u7532\u65b9\u4f7f\u7528\u516c\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6---");\r\n\t//\u4f7f\u7528\u516c\u94a5\u5bf9\u6570\u636e\u52a0\u5bc6\r\n\tbyte[] encodeMsgA2B = ElgamalUtil.encrypt(msgA2B.getBytes(), publicKey);\r\n\tSystem.out.println("Elgamal\u52a0\u5bc6:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n\tSystem.out.println("---\u4e59\u65b9\u4f7f\u7528\u79c1\u94a5\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u89e3\u5bc6---");\r\n\t//\u4f7f\u7528\u79c1\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u5bc6\r\n\tbyte[] msgB2A = ElgamalUtil.decrypt(encodeMsgA2B, privateKey);\r\n\tString output1 = new String(msgB2A);\r\n\tSystem.out.println("Elgamal\u89e3\u5bc6:\\n" + output1);\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"base64",children:"Base64"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"8. Base64\u52a0\u5bc6\u7b97\u6cd5\r\nBase64\u52a0\u5bc6\u7b97\u6cd5\u662f\u2f79\u7edc\u4e0a\u6700\u5e38\u89c1\u7684\u2f64\u4e8e\u4f20\u8f938bit\u5b57\u8282\u4ee3\u7801\u7684\u7f16\u7801\u2f45\u5f0f\u4e4b\u2f00\uff0cBase64\u7f16\u7801\u53ef\u2f64\u4e8e\u5728HTTP\u73af\u5883\u4e0b\u4f20\u9012\u8f83\u957f\u7684\u6807\u8bc6\u4fe1\u606f\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"//base64\u52a0\u5bc6\u89e3\u5bc6\r\nBase64.getEncoder().encode(String)\r\nBase64.getDecoder().decode(String)\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"package org.jeecg.modules.p14.key;\r\n\r\nimport org.apache.commons.codec.binary.Base64;\r\n\r\npublic class SecurityBASE64 {\r\n    \r\n    /**\r\n     * base64\u7b97\u6cd5\u662f\u57fa\u4e8e64\u4e2a\u5b57\u7b26\u7684\u4e00\u79cd\u66ff\u6362\u7b97\u6cd5\u3002base64\u52a0\u5bc6\u7684\u4ea7\u751f\u5f0f\u7535\u5b50\u90ae\u4ef6\u7684\u201c\u5386\u53f2\u95ee\u9898\u201d\u2014\u2014\u90ae\u4ef6\u53ea\u80fd\u4f20\u8f93ASCII\u7801\u3002\r\n     * base64\u52a0\u5bc6\u7684\u5e94\u7528\u573a\u666f\uff1aemail\u3001\u5bc6\u94a5\u3001\u8bc1\u4e66\u6587\u4ef6\u3002\r\n     *  \u8be5\u7b97\u6cd5\u53ef\u4ee5\u75312\u79cd\u65b9\u5f0f\u5b9e\u73b0\uff1aBouncy Castle\u3001Commons Codec\r\n     */\r\n    \r\n    /** \r\n     * Commons Codec\u5b9e\u73b0base64\u7f16\u7801 \r\n     */\r\n    public static String encodeCC(String src) {\r\n        byte[] encode = Base64.encodeBase64(src.getBytes());\r\n        return new String(encode);\r\n    }\r\n    public static String decodeCC(String src) {\r\n        byte[] decode = Base64.decodeBase64(src);\r\n        return new String(decode);\r\n    }\r\n    \r\n    /**\r\n     * Bouncy Castle\u5b9e\u73b0base64\u7f16\u7801 \r\n     */\r\n    public static String encodeBC(String src) {\r\n        byte[] encode = org.bouncycastle.util.encoders.Base64.encode(src.getBytes());\r\n        return new String(encode);\r\n    }\r\n    public static String decodeBC(String src) {\r\n        byte[] decode = org.bouncycastle.util.encoders.Base64.decode(src);\r\n        return new String(decode);\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void base64() {\r\n\tString inStr = "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0cobject-oriented\uff01@#*5";\r\n\tString encodeCC = SecurityBASE64.encodeCC(inStr);\r\n\tSystem.out.println("Commons Codec\u5b9e\u73b0base64\u7f16\u7801\uff1a\\t" + encodeCC);\r\n\tString decodeCC = SecurityBASE64.decodeCC(encodeCC);\r\n\tSystem.out.println("Commons Codec\u5b9e\u73b0base64\u89e3\u7801\uff1a\\t" + decodeCC);\r\n\tString encodeBC = SecurityBASE64.encodeBC(inStr);\r\n\tSystem.out.println("Bouncy Castle\u5b9e\u73b0base64\u7f16\u7801\uff1a\\t" + encodeBC);\r\n\tString decodeBC = SecurityBASE64.decodeBC(encodeBC);\r\n\tSystem.out.println("Bouncy Castle\u5b9e\u73b0base64\u89e3\u7801\uff1a\\t" + decodeBC);\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"sha",children:"SHA"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"9. SHA1\u52a0\u5bc6\u7b97\u6cd5\r\nSHA1\u662f\u548cMD5\u2f00\u6837\u6d41\u2f8f\u7684\u6d88\u606f\u6458\u8981\u7b97\u6cd5\u3002SHA\u52a0\u5bc6\u7b97\u6cd5\u6a21\u4effMD4\u52a0\u5bc6\u7b97\u6cd5\u3002SHA1\u4e3b\u8981\u9002\u2f64\u4e8e\u6570\u5b57\u7b7e\u540d\u6807\u51c6\u2fa5\u2faf\u5b9a\u4e49\u7684\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\u3002\u4e0d\u53ef\u9006\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport org.apache.commons.codec.binary.Hex;\r\nimport org.apache.commons.codec.digest.DigestUtils;\r\nimport org.bouncycastle.crypto.Digest;\r\nimport org.bouncycastle.crypto.digests.SHA1Digest;\r\nimport org.bouncycastle.crypto.digests.SHA224Digest;\r\nimport org.bouncycastle.crypto.digests.SHA256Digest;\r\n\r\npublic class SHAUtil {\r\n    \r\n    /**\r\n     *  \u5b89\u5168\u6563\u5217\u7b97\u6cd5\uff0c\u56fa\u5b9a\u957f\u5ea6\u7684\u6458\u8981\u4fe1\u606f\u3002\u88ab\u8ba4\u4e3a\u662fMD5\u7684\u7ee7\u627f\u8005\u3002\u662f\u4e00\u4e2a\u7cfb\u5217\uff0c\u5305\u62ecSHA-1\u3001SHA-2\uff08SHA-224\u3001SHA-256\u3001SHA-384\u3001SHA-512\uff09\r\n     */\r\n    \r\n    /**\r\n     * JDK\u5b9e\u73b0sha-1 \r\n     */\r\n    public static String jdkSHA1(String src) {\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("sha");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }// sha1\u7b97\u6cd5\u4f20\u5165\u53c2\u6570\u4e3asha\r\n        byte[] sha1Bytes = md.digest(src.getBytes());\r\n        return Hex.encodeHexString(sha1Bytes);\r\n    }\r\n    \r\n    /** \r\n     * JDK\u5b9e\u73b0sha-256 \r\n     */\r\n    public static String jdkSHA256(String src) {\r\n        MessageDigest md = null;\r\n        try {\r\n            md = MessageDigest.getInstance("sha-256");\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        md.update(src.getBytes());\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(md.digest()));\r\n    }\r\n    \r\n    /** \r\n     * Commons Codec\u5b9e\u73b0sha-1 \r\n     */\r\n    public static String commonsCodecSAH1(String src){\r\n//        return DigestUtils.sha1Hex(src.getBytes());\r\n        return DigestUtils.sha1Hex(src);\r\n    }\r\n    \r\n    /**\r\n     * Bouncy Castle\u5b9e\u73b0sha-1 \r\n     * @param src\r\n     * @return\r\n     */\r\n    public static String bouncyCastleSHA1(String src){\r\n        Digest digest = new SHA1Digest();\r\n        digest.update(src.getBytes(), 0, src.getBytes().length);\r\n        byte[]sha1Bytes = new byte[digest.getDigestSize()];\r\n        digest.doFinal(sha1Bytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(sha1Bytes));\r\n    }\r\n    \r\n    /** \r\n     * Bouncy Castle\u5b9e\u73b0sha-224 \r\n     */\r\n    public static String bouncyCastleSHA224(String src){\r\n        Digest digest = new SHA224Digest();\r\n        digest.update(src.getBytes(), 0, src.getBytes().length);\r\n        byte[]sha224Bytes = new byte[digest.getDigestSize()];\r\n        digest.doFinal(sha224Bytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(sha224Bytes));\r\n    }\r\n\r\n    /** \r\n     * Bouncy Castle\u5b9e\u73b0sha-256 \r\n     */\r\n    public static String bouncyCastleSHA256(String src) {\r\n        Digest digest = new SHA256Digest();\r\n        digest.update(src.getBytes(), 0, src.getBytes().length);\r\n        byte[] sha256Bytes = new byte[digest.getDigestSize()];\r\n        digest.doFinal(sha256Bytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(sha256Bytes));\r\n    } \r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void sha() {\r\n\tString src = "object-oriente"; // \u9700\u8981\u52a0\u5bc6\u7684\u539f\u59cb\u5b57\u7b26\u4e32\r\n\tSystem.out.println("JDK SHA-1:\\t" + SHAUtil.jdkSHA1(src));\r\n\tSystem.out.println("cc SHA-1:\\t" + SHAUtil.commonsCodecSAH1(src));\r\n\tSystem.out.println("bc SHA-1:\\t" + SHAUtil.bouncyCastleSHA1(src));\r\n\tSystem.out.println("bc SHA-224:\\t" + SHAUtil.bouncyCastleSHA224(src));\r\n\tSystem.out.println("JDK SHA-256:\\t" + SHAUtil.jdkSHA256(src));\r\n\tSystem.out.println("bc SHA-256:\\t" + SHAUtil.bouncyCastleSHA256(src));\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"pkcs",children:"PKCS"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"10. PKCS\u52a0\u5bc6\u7b97\u6cd5\r\nPKCS\u662f\u7531\u7f8e\u56fdRSA\u6570\u636e\u5b89\u5168\u516c\u53f8\u53ca\u5176\u5408\u4f5c\u4f19\u4f34\u5236\u5b9a\u7684\u2f00\u7ec4\u516c\u94a5\u5bc6\u7801\u5b66\u6807\u51c6\uff0c\u5176\u4e2d\u5305\u62ec\u8bc1\u4e66\u7533\u8bf7\u3001\u8bc1\u4e66\u66f4\u65b0\u3001\u8bc1\u4e66\u4f5c\u5e9f\u8868\u53d1\u5e03\u3001\u6269\u5c55\u8bc1\u4e66\u5185\u5bb9\u4ee5\u53ca\u6570\u5b57\u7b7e\u540d\u3001\u6570\u5b57\u4fe1\u5c01\u7684\u683c\u5f0f\u7b49\u2f45\u2faf\u7684\u2f00\u7cfb\u5217\u76f8\u5173\u534f\u8bae\u3002\n"})}),"\n",(0,t.jsx)(r.h3,{id:"ecdsa",children:"ECDSA"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"11.ECDSA\r\n\u5fae\u8f6f\u7684Office\u3001Windows\u64cd\u4f5c\u7cfb\u7edf\u7684\u9a8c\u8bc1\u5c31\u662fECDSA\u7b97\u6cd5\u2014\u2014\u692d\u5706\u66f2\u7ebf\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\uff08Elliptic Curve Digital Signature Algorithm\uff09\uff0c\u57282000\u5e74\u7684\u65f6\u5019\u79f0\u4e3a\u4e86ANSI\u548cIEEE\u7684\u6807\u51c6\u3002\u7279\u70b9\u662f\uff1a\u901f\u5ea6\u5feb\u3001\u7b7e\u540d\u77ed\u3001\u5f3a\u5ea6\u9ad8\u3002\u5728JDK1.7update4\u4e4b\u540e\u63d0\u4f9b\u4e86\u5bf9ECDSA\u7684\u652f\u6301\u3002\u8be5\u7b7e\u540d\u7684\u7b97\u6cd5\u4e5f\u548cRSA\u7684\u6570\u5b57\u7b7e\u540d\u7b97\u6cd5\u4e5f\u662f\u5927\u540c\u5c0f\u5f02\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.Signature;\r\nimport java.security.interfaces.ECPrivateKey;\r\nimport java.security.interfaces.ECPublicKey;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\npublic class DigitalSignECDSA {\r\n    //\u516c\u94a5\r\n    private static final String PUBLIC_KEY = "ECDSAPublicKey";\r\n    //\u79c1\u94a5\r\n    private static final String PRIVATE_KEY = "ECDSAPrivateKey";\r\n \r\n    /** \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\r\n     * @return Map \u5bc6\u94a5\u5bf9Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("EC");\r\n            // \u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\uff0c\u5bc6\u94a5\u5927\u5c0f\u4e3a256\u4f4d\r\n            keyPairGenerator.initialize(256, new SecureRandom());\r\n            //\u751f\u6210\u5bc6\u94a5\u5bf9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u516c\u94a5\r\n            ECPublicKey publicKey = (ECPublicKey) keyPair.getPublic();\r\n            //\u79c1\u94a5\r\n            ECPrivateKey privateKey = (ECPrivateKey) keyPair.getPrivate();\r\n            //\u5c06\u5bc6\u94a5\u5bf9\u5b58\u50a8\u5728Map\u4e2d\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6267\u884c\u6570\u5b57\u7b7e\u540d\u3010\u79c1\u94a5\u7b7e\u540d\u3011\r\n     * @param data \u5f85\u52a0\u5bc6\u6570\u636e\r\n     * @param privKey  \u79c1\u94a5\r\n     * @return byte[] \u52a0\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] digitalSign(byte[] data, byte[] privKey) {\r\n        try {\r\n            PrivateKey privateKey = (PrivateKey) KeyFactory.getInstance("EC")\r\n                    .generatePrivate(new PKCS8EncodedKeySpec(privKey));\r\n            Signature signature = Signature.getInstance("SHA1WithECDSA");\r\n            signature.initSign(privateKey);\r\n            signature.update(data);\r\n            return signature.sign();\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u9a8c\u8bc1\u7b7e\u540d\u3010\u516c\u94a5\u9a8c\u8bc1\u3011\r\n     * @param data \u5f85\u89e3\u5bc6\u6570\u636e\r\n     * @param pubKey  \u516c\u94a5\r\n     * @return byte[] \u89e3\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static boolean signVerify(byte[] data, byte[] rsaData, byte[] pubKey) {\r\n        try {\r\n            PublicKey publicKey = (PublicKey) KeyFactory.getInstance("EC")\r\n                    .generatePublic(new X509EncodedKeySpec(pubKey));\r\n            Signature signature = Signature.getInstance("SHA1WithECDSA");\r\n            signature.initVerify(publicKey);\r\n            signature.update(data);\r\n            return signature.verify(rsaData);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return false;\r\n    }\r\n \r\n    /** \u53d6\u5f97\u79c1\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u79c1\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53d6\u5f97\u516c\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u516c\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void ecdsa() {\r\n\t//\u516c\u94a5\r\n\tbyte[] publicKey;\r\n\t//\u79c1\u94a5\r\n\tbyte[] privateKey;\r\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\r\n\t//\u751f\u6210\u5bc6\u94a5\u5bf9\r\n\tMap<String, Object> keyMap = DigitalSignECDSA.initKey();\r\n\tpublicKey = DigitalSignECDSA.getPublicKey(keyMap);\r\n\tprivateKey = DigitalSignECDSA.getPrivateKey(keyMap);\r\n\tSystem.out.println("ECDSA\u516c\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKey));\r\n\tSystem.out.println("ECDSA\u79c1\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKey));\r\n\r\n\tSystem.out.println();\r\n\tString msgA2B = "What can I do for you?";\r\n\t//\u6267\u884c\u6570\u5b57\u7b7e\u540d\u3010\u79c1\u94a5\u7b7e\u540d\u3011\r\n\tbyte[] encodeMsgA2B = DigitalSignECDSA.digitalSign(msgA2B.getBytes(), privateKey);\r\n\tSystem.out.println("JDK ECDSA\u7b7e\u540d\uff1a:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n\t//\u9a8c\u8bc1\u7b7e\u540d\u3010\u516c\u94a5\u9a8c\u8bc1\u3011\r\n\tboolean bool = DigitalSignECDSA.signVerify(msgA2B.getBytes(), encodeMsgA2B, publicKey);\r\n\tSystem.out.println("\u6570\u5b57\u7b7e\u540d\u662f\u5426\u6709\u6548\uff1f:\\n" + bool);\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"dh",children:"DH"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\r\n\u52a0\u5bc6\u5bc6\u94a5\u5206\u4e3a\u516c\u94a5\u548c\u79c1\u94a5\u3002\u53ef\u4ee5\u4f7f\u7528\u516c\u94a5\u52a0\u5bc6\u79c1\u94a5\u89e3\u5bc6\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u79c1\u94a5\u52a0\u5bc6\u516c\u94a5\u89e3\u5bc6\u3002\u975e\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u4e3b\u8981\u6709\uff1aDH\uff08Diffie-Hellman\uff09\u5bc6\u94a5\u4ea4\u6362\u7b97\u6cd5\u3001RSA\uff08\u57fa\u4e8e\u56e0\u5b50\u5206\u89e3\uff09\u3001Elgamal\uff08\u57fa\u4e8e\u79bb\u6563\u5bf9\u6570\uff09\u3001ECC\uff08Elliptical Curve Cryptography\uff0c\u692d\u5706\u66f2\u7ebf\u52a0\u5bc6\uff09\u3002\r\nDH\uff08\u5bc6\u94a5\u4ea4\u6362\uff09\u7b97\u6cd5\r\n\u5982\u4f55\u5b89\u5168\u5730\u4f20\u9001\u5bc6\u94a5\u662f\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u7684\u75c7\u7ed3\u6240\u5728\u3002\u5bc6\u94a5\u4ea4\u6362\u7b97\u6cd5\u662f\u901a\u8fc7\u6784\u5efa\u672c\u5730\u5bc6\u94a5\u6765\u89e3\u51b3\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u4e2d\u7684\u5bc6\u94a5\u4f20\u9012\u7684\u95ee\u9898\u7684\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.Key;\r\nimport java.security.KeyFactory;\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.SecureRandom;\r\nimport java.security.spec.PKCS8EncodedKeySpec;\r\nimport java.security.spec.X509EncodedKeySpec;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.KeyAgreement;\r\nimport javax.crypto.KeyGenerator;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.interfaces.DHPrivateKey;\r\nimport javax.crypto.interfaces.DHPublicKey;\r\nimport javax.crypto.spec.DHParameterSpec;\r\nimport javax.crypto.spec.SecretKeySpec;\r\n\r\npublic class SecurityDH {\r\n    \r\n    /** \u4f7f\u7528DH\u65b9\u5f0f\u52a0\u89e3\u5bc6\u7684\u524d\u63d0\u6761\u4ef6\uff1a\u5426\u5219\u62a5\u9519 java.security.NoSuchAlgorithmException: Unsupported secret key algorithm: AES\r\n     *     1.\u5f53\u524d\u5f00\u53d1\u73af\u5883\u4e2d\u7684\u8fd0\u884c\u7684java\u7a0b\u5e8f, \u5728jre\u4e2d\u914d\u7f6e\u7f3a\u7701VM\u53d8\u91cf -Djdk.crypto.KeyAgreement.legacyKDF=true\r\n     *         A.\u70b9\u51fb\u7a97\u53e3\uff0c\u9009\u62e9\u9996\u9009\u9879  B.\u70b9\u51fbinstalled JREs, \u9009\u62e9JRE\u914d\u7f6e\uff0c\u7136\u540e\u7f16\u8f91  C.\u5728\u7f3a\u7701VM\u53c2\u6570\uff1a-Djdk.crypto.KeyAgreement.legacyKDF=true\r\n     *  2.\u53ef\u8fd0\u884cjar\u5305\uff0c\u5219\u9700\u8981\u5728\u8fd0\u884c\u65f6\u91c7\u7528\u547d\u4ee4\u63d0\u793a\u7b26\u8fd0\u884c\uff0c\u5728\u8fd0\u884c\u65f6\u6dfb\u52a0VM\u53c2\u6570\uff0c\u8fd0\u884c\u547d\u4ee4\u4e3a\uff1ajava -jar -Djdk.crypto.KeyAgreement.legacyKDF=true jarPackName.jar\r\n     *         A.\u7f16\u8f91\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u914d\u7f6eVM\u53c2\u6570\uff1a-Djdk.crypto.KeyAgreement.legacyKDF=true\r\n     */\r\n    \r\n    /** \u672c\u5730\u5bc6\u94a5\u7b97\u6cd5\uff0c\u5373\u5bf9\u79f0\u52a0\u5bc6\u5bc6\u94a5\u7b97\u6cd5  \u53ef\u9009DES\u3001DESede\u6216\u8005AES*/\r\n    private static final String SELECT_ALGORITHM = "AES";\r\n    /** \u9ed8\u8ba4\u7684\u52a0\u5bc6\u7b97\u6cd5 */\r\n    private static final String DEFAULT_CIPHER_ALGORITHM = "AES/ECB/PKCS5Padding";\r\n    /** \u5bc6\u94a5\u957f\u5ea6 */\r\n    private static final int KEY_SIZE = 512;\r\n    //\u516c\u94a5\r\n    private static final String PUBLIC_KEY = "DHPublicKey";\r\n    //\u79c1\u94a5\r\n    private static final String PRIVATE_KEY = "DHPrivateKey";\r\n \r\n    /**  \u521d\u59cb\u5316\u7532\u65b9\u5bc6\u94a5\r\n     * @return Map \u7532\u65b9\u5bc6\u94a5Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey() {\r\n        try {\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DH");\r\n            //\u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            keyPairGenerator.initialize(KEY_SIZE);\r\n            //\u751f\u6210\u5bc6\u94a5\u5bf9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u7532\u65b9\u516c\u94a5\r\n            DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();\r\n            //\u7532\u65b9\u79c1\u94a5\r\n            DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();\r\n            //\u5c06\u5bc6\u94a5\u5bf9\u5b58\u50a8\u5728Map\u4e2d\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u521d\u59cb\u5316\u4e59\u65b9\u5bc6\u94a5\r\n     * @param key \u7532\u65b9\u516c\u94a5\r\n     * @return Map \u4e59\u65b9\u5bc6\u94a5Map\r\n     * @throws Exception\r\n     */\r\n    public static Map<String, Object> initKey(byte[] key) {\r\n        try {\r\n            //\u89e3\u6790\u7532\u65b9\u516c\u94a5\r\n            //\u8f6c\u6362\u516c\u94a5\u6750\u6599\r\n            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(key);\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5de5\u5382\r\n            KeyFactory keyFactory = KeyFactory.getInstance("DH");\r\n            //\u4ea7\u751f\u516c\u94a5\r\n            PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);\r\n            //\u7531\u7532\u65b9\u516c\u94a5\u6784\u5efa\u4e59\u65b9\u5bc6\u94a5\r\n            DHParameterSpec dhParameterSpec = ((DHPublicKey) pubKey).getParams();\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance("DH");\r\n            //\u521d\u59cb\u5316\u5bc6\u94a5\u5bf9\u751f\u6210\u5668\r\n            keyPairGenerator.initialize(dhParameterSpec);\r\n            //\u4ea7\u751f\u5bc6\u94a5\u5bf9\r\n            KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n            //\u4e59\u65b9\u516c\u94a5\r\n            DHPublicKey publicKey = (DHPublicKey) keyPair.getPublic();\r\n            //\u4e59\u65b9\u79c1\u7ea6\r\n            DHPrivateKey privateKey = (DHPrivateKey) keyPair.getPrivate();\r\n            //\u5c06\u5bc6\u94a5\u5bf9\u5b58\u50a8\u5728Map\u4e2d\r\n            Map<String, Object> keyMap = new HashMap<String, Object>(2);\r\n            keyMap.put(PUBLIC_KEY, publicKey);\r\n            keyMap.put(PRIVATE_KEY, privateKey);\r\n            return keyMap;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u751f\u6210\u52a0\u5bc6\u79d8\u94a5\r\n     * @return\r\n     */\r\n    private static SecretKeySpec getSecretKey(final byte[] key) {\r\n        //\u8fd4\u56de\u751f\u6210\u6307\u5b9a\u7b97\u6cd5\u5bc6\u94a5\u751f\u6210\u5668\u7684 KeyGenerator \u5bf9\u8c61\r\n        KeyGenerator kg = null;\r\n        try {\r\n            kg = KeyGenerator.getInstance(SELECT_ALGORITHM);\r\n            //AES \u8981\u6c42\u5bc6\u94a5\u957f\u5ea6\u4e3a 128\r\n            kg.init(128, new SecureRandom(key));\r\n            //\u751f\u6210\u4e00\u4e2a\u5bc6\u94a5\r\n            SecretKey secretKey = kg.generateKey();\r\n            return new SecretKeySpec(secretKey.getEncoded(), SELECT_ALGORITHM);// \u8f6c\u6362\u4e3aAES\u4e13\u7528\u5bc6\u94a5\r\n        } catch (NoSuchAlgorithmException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n \r\n        return null;\r\n    }\r\n \r\n    /** \u52a0\u5bc6\r\n     * @param data \u5f85\u52a0\u5bc6\u6570\u636e\r\n     * @param key  \u5bc6\u94a5\r\n     * @return byte[] \u52a0\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] encrypt(byte[] data, byte[] key) {\r\n        try {\r\n            Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);// \u521b\u5efa\u5bc6\u7801\u5668\r\n            byte[] byteContent = data;\r\n            cipher.init(Cipher.ENCRYPT_MODE, getSecretKey(key));// \u521d\u59cb\u5316\u4e3a\u52a0\u5bc6\u6a21\u5f0f\u7684\u5bc6\u7801\u5668\r\n            byte[] result = cipher.doFinal(byteContent);// \u52a0\u5bc6\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /**  \u89e3\u5bc6\r\n     * @param data \u5f85\u89e3\u5bc6\u6570\u636e\r\n     * @param key  \u5bc6\u94a5\r\n     * @return byte[] \u89e3\u5bc6\u6570\u636e\r\n     * @throws Exception\r\n     */\r\n    public static byte[] decrypt(byte[] data, byte[] key) {\r\n        try {\r\n            //\u5b9e\u4f8b\u5316\r\n            Cipher cipher = Cipher.getInstance(DEFAULT_CIPHER_ALGORITHM);\r\n            //\u4f7f\u7528\u5bc6\u94a5\u521d\u59cb\u5316\uff0c\u8bbe\u7f6e\u4e3a\u89e3\u5bc6\u6a21\u5f0f\r\n            cipher.init(Cipher.DECRYPT_MODE, getSecretKey(key));\r\n            //\u6267\u884c\u64cd\u4f5c\r\n            byte[] result = cipher.doFinal(data);\r\n            return result;\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u6784\u5efa\u5bc6\u94a5\r\n     * @param publicKey  \u516c\u94a5\r\n     * @param privateKey \u79c1\u94a5\r\n     * @return byte[] \u672c\u5730\u5bc6\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getSecretKey(byte[] publicKey, byte[] privateKey) {\r\n        try {\r\n            //\u5b9e\u4f8b\u5316\u5bc6\u94a5\u5de5\u5382\r\n            KeyFactory keyFactory = KeyFactory.getInstance("DH");\r\n            //\u521d\u59cb\u5316\u516c\u94a5\r\n            //\u5bc6\u94a5\u6750\u6599\u8f6c\u6362\r\n            X509EncodedKeySpec x509KeySpec = new X509EncodedKeySpec(publicKey);\r\n            //\u4ea7\u751f\u516c\u94a5\r\n            PublicKey pubKey = keyFactory.generatePublic(x509KeySpec);\r\n            //\u521d\u59cb\u5316\u79c1\u94a5\r\n            //\u5bc6\u94a5\u6750\u6599\u8f6c\u6362\r\n            PKCS8EncodedKeySpec pkcs8KeySpec = new PKCS8EncodedKeySpec(privateKey);\r\n            //\u4ea7\u751f\u79c1\u94a5\r\n            PrivateKey priKey = keyFactory.generatePrivate(pkcs8KeySpec);\r\n            //\u5b9e\u4f8b\u5316\r\n            KeyAgreement keyAgree = KeyAgreement.getInstance(keyFactory.getAlgorithm());\r\n            //\u521d\u59cb\u5316\r\n            keyAgree.init(priKey);\r\n            keyAgree.doPhase(pubKey, true);\r\n            //\u751f\u6210\u672c\u5730\u5bc6\u94a5\r\n            SecretKey secretKey = keyAgree.generateSecret(SELECT_ALGORITHM);\r\n            return secretKey.getEncoded();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n \r\n    /** \u53d6\u5f97\u79c1\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u79c1\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPrivateKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PRIVATE_KEY);\r\n        return key.getEncoded();\r\n    }\r\n \r\n    /** \u53d6\u5f97\u516c\u94a5\r\n     * @param keyMap \u5bc6\u94a5Map\r\n     * @return byte[] \u516c\u94a5\r\n     * @throws Exception\r\n     */\r\n    public static byte[] getPublicKey(Map<String, Object> keyMap) {\r\n        Key key = (Key) keyMap.get(PUBLIC_KEY);\r\n        return key.getEncoded();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void dh() {\r\n\t//\u7532\u65b9\u516c\u94a5\r\n\tbyte[] publicKeyA;\r\n\t//\u7532\u65b9\u79c1\u94a5\r\n\tbyte[] privateKeyA;\r\n\t//\u7532\u65b9\u672c\u5730\u5bc6\u94a5\r\n\tbyte[] localKeyA;\r\n\t//\u4e59\u65b9\u516c\u94a5\r\n\tbyte[] publicKeyB;\r\n\t//\u4e59\u65b9\u79c1\u94a5\r\n\tbyte[] privateKeyB;\r\n\t//\u4e59\u65b9\u672c\u5730\u5bc6\u94a5\r\n\tbyte[] localKeyB;\r\n\r\n\t//\u521d\u59cb\u5316\u5bc6\u94a5\r\n\t//\u751f\u6210\u7532\u65b9\u5bc6\u94a5\u5bf9\r\n\tMap<String, Object> keyMapA = SecurityDH.initKey();\r\n\tpublicKeyA = SecurityDH.getPublicKey(keyMapA);\r\n\tprivateKeyA = SecurityDH.getPrivateKey(keyMapA);\r\n\tSystem.out.println("\u7532\u65b9\u516c\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKeyA));\r\n\tSystem.out.println("\u7532\u65b9\u79c1\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKeyA));\r\n\t//\u7531\u7532\u65b9\u516c\u94a5\u4ea7\u751f\u4e59\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\r\n\tMap<String, Object> keyMapB = SecurityDH.initKey(publicKeyA);\r\n\tpublicKeyB = SecurityDH.getPublicKey(keyMapB);\r\n\tprivateKeyB = SecurityDH.getPrivateKey(keyMapB);\r\n\tSystem.out.println("\u4e59\u65b9\u516c\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(publicKeyB));\r\n\tSystem.out.println("\u4e59\u65b9\u79c1\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(privateKeyB));\r\n\tlocalKeyA = SecurityDH.getSecretKey(publicKeyB, privateKeyA);\r\n\tSystem.out.println("\u7532\u65b9\u672c\u5730\u5bc6\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(localKeyA));\r\n\tlocalKeyB = SecurityDH.getSecretKey(publicKeyA, privateKeyB);\r\n\tSystem.out.println("\u4e59\u65b9\u672c\u5730\u5bc6\u94a5:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(localKeyB));\r\n\r\n\tSystem.out.println();\r\n\tSystem.out.println("===\u7532\u65b9\u5411\u4e59\u65b9\u53d1\u9001\u52a0\u5bc6\u6570\u636e===");\r\n\tString msgA2B = "\u6c42\u77e5\u82e5\u9965\uff0c\u865a\u5fc3\u82e5\u611a\u3002";\r\n\tSystem.out.println("\u539f\u6587:\\n" + msgA2B);\r\n\tSystem.out.println("---\u4f7f\u7528\u7532\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6---");\r\n\t//\u4f7f\u7528\u7532\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u52a0\u5bc6\r\n\tbyte[] encodeMsgA2B = SecurityDH.encrypt(msgA2B.getBytes(), localKeyA);\r\n\tSystem.out.println("\u52a0\u5bc6:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encodeMsgA2B));\r\n\tSystem.out.println("---\u4f7f\u7528\u4e59\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u5e93\u8fdb\u884c\u89e3\u5bc6---");\r\n\t//\u4f7f\u7528\u4e59\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u5bc6\r\n\tbyte[] msgB2A = SecurityDH.decrypt(encodeMsgA2B, localKeyB);\r\n\tString output1 = new String(msgB2A);\r\n\tSystem.out.println("\u89e3\u5bc6:\\n" + output1);\r\n\r\n\tSystem.out.println("/~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~..~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~.~/");\r\n\tSystem.out.println("===\u4e59\u65b9\u5411\u7532\u65b9\u53d1\u9001\u52a0\u5bc6\u6570\u636e===");\r\n\tString input2 = "\u597d\u597d\u5b66\u4e60\uff0c\u5929\u5929\u5411\u4e0a\u3002";\r\n\tSystem.out.println("\u539f\u6587:\\n" + input2);\r\n\tSystem.out.println("---\u4f7f\u7528\u4e59\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6---");\r\n\t//\u4f7f\u7528\u4e59\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u52a0\u5bc6\r\n\tbyte[] encode2 = SecurityDH.encrypt(input2.getBytes(), localKeyB);\r\n\tSystem.out.println("\u52a0\u5bc6:\\n" + org.apache.commons.codec.binary.Base64.encodeBase64String(encode2));\r\n\tSystem.out.println("---\u4f7f\u7528\u7532\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u5bc6---");\r\n\t//\u4f7f\u7528\u7532\u65b9\u672c\u5730\u5bc6\u94a5\u5bf9\u6570\u636e\u8fdb\u884c\u89e3\u5bc6\r\n\tbyte[] decode2 = SecurityDH.decrypt(encode2, localKeyA);\r\n\tString output2 = new String(decode2);\r\n\tSystem.out.println("\u89e3\u5bc6:\\n" + output2);\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"pbe",children:"PBE"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"PBE\u7b97\u6cd5\u7ed3\u5408\u4e86\u6d88\u606f\u6458\u8981\u7b97\u6cd5\u548c\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u7684\u4f18\u70b9\uff0c\u662f\u4e00\u79cd\u7279\u6b8a\u7684\u5bf9\u79f0\u52a0\u5bc6\u7b97\u6cd5\u3002Password Based Encryption\uff0c\u57fa\u4e8e\u53e3\u4ee4\u7684\u52a0\u5bc6\u3002\u56e0\u4e3a\u53e3\u4ee4\u662f\u6bd4\u8f83\u597d\u8bb0\u7684\uff0c\u5c31\u5bb9\u6613\u901a\u8fc7\u7a77\u4e3e\u3001\u731c\u6d4b\u7684\u65b9\u5f0f\u83b7\u5f97\u53e3\u4ee4\u2014\u2014\u9488\u5bf9\u8fd9\u79cd\u60c5\u51b5\uff0c\u6211\u4eec\u91c7\u7528\u7684\u65b9\u5f0f\u662f\u52a0\u76d0\uff08Salt\uff09\uff0c\u901a\u8fc7\u52a0\u5165\u4e00\u4e9b\u989d\u5916\u7684\u5185\u5bb9\uff08\u901a\u5e38\u662f\u968f\u673a\u5b57\u7b26\uff09\u53bb\u6270\u4e71\u3002\u5b9e\u73b0\u7684\u65b9\u5f0f\u67092\u79cd\uff1aJDK\u548cBC\u3002\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'import java.security.Key;\r\nimport java.security.SecureRandom;\r\nimport java.security.Security;\r\nimport javax.crypto.Cipher;\r\nimport javax.crypto.SecretKeyFactory;\r\nimport javax.crypto.spec.PBEKeySpec;\r\nimport javax.crypto.spec.PBEParameterSpec;\r\n\r\nimport org.apache.commons.lang3.StringUtils;\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider;\r\n\r\npublic class SecurityPBE {\r\n    \r\n    public static String PBE_MODE_JDK = "jdk";\r\n    public static String PBE_MODE_BC = "bouncyCastle";\r\n    private PBEParameterSpec parameterSpec;\r\n    private Key key;\r\n    \r\n    //\u5355\u4f8b\u6a21\u5f0f\r\n    private static SecurityPBE securityPBE;\r\n    public static SecurityPBE getInstance(String password, String succurityMode) {\r\n        if(securityPBE == null) {\r\n            securityPBE = new SecurityPBE(password, succurityMode);\r\n        }\r\n        return securityPBE;\r\n    }\r\n    \r\n    private SecurityPBE(String password, String succurityMode)  {\r\n        try{\r\n            //1.\u521d\u59cb\u5316\u76d0\r\n            SecureRandom secureRandom = new SecureRandom();//\u5f3a\u52a0\u5bc6\u968f\u673a\u6570\u751f\u6210\u5668\r\n            byte[] salt= secureRandom.generateSeed(8);//\u4ea7\u751f\u76d0\u5fc5\u987b\u662f8\u4f4d\r\n            //2.\u53e3\u4ee4\u4e0e\u5bc6\u94a5\r\n            if(StringUtils.isNotBlank(succurityMode) && StringUtils.equals(PBE_MODE_BC, succurityMode)) {\r\n                Security.addProvider(new BouncyCastleProvider());//\u6dfb\u52a0\u5230provider\r\n                PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());\r\n                SecretKeyFactory factory = SecretKeyFactory.getInstance("PBEWithMD5AndDES","BC");//\u6307\u5b9aprovider\r\n                key = factory.generateSecret(pbeKeySpec);\r\n                parameterSpec = new PBEParameterSpec(salt, 50);\r\n            }else {\r\n                PBEKeySpec pbeKeySpec = new PBEKeySpec(password.toCharArray());//\u5bc6\u94a5\u8f6c\u6362\u7684\u5bf9\u8c61\r\n                SecretKeyFactory factory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");//\u5b9e\u4f8b\u5316\u5bc6\u94a5\u8f6c\u6362\u5de5\u5382\r\n                key = factory.generateSecret(pbeKeySpec);//\u7531\u5de5\u5382\u4ea7\u751fkey\r\n                parameterSpec = new PBEParameterSpec(salt, 100);//PBE\u8f93\u5165\u53c2\u6570\u7684\u6750\u6599\uff0c\u76d0\uff0c\u8fed\u4ee3100\u6b21\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n    \r\n    public byte[] encrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\r\n            cipher.init(Cipher.ENCRYPT_MODE, key, parameterSpec);\r\n            byte[] result = cipher.doFinal(array);\r\n            return result;\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n    \r\n    public byte[] decrypt(byte[] array) {\r\n        try{\r\n            Cipher cipher = Cipher.getInstance("PBEWithMD5AndDES");\r\n            cipher.init(Cipher.DECRYPT_MODE, key, parameterSpec);\r\n            return cipher.doFinal(array);\r\n        } catch(Exception e ){\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void pbe() {\r\n\tString src = "\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff0cobject-oriented\uff01@#*5"; // \u9700\u8981\u52a0\u5bc6\u7684\u539f\u59cb\u5b57\u7b26\u4e32\r\n\tString password = "123456";\r\n\tSecurityPBE securityJdkPBE1 = SecurityPBE.getInstance(password, SecurityPBE.PBE_MODE_JDK);\r\n\tbyte[] encodeJdkPBE = securityJdkPBE1.encrypt(src.getBytes());\r\n\tSystem.out.println("JDK PBE\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeJdkPBE));\r\n\tSecurityPBE securityJdkPBE2 = SecurityPBE.getInstance(password, SecurityPBE.PBE_MODE_JDK);\r\n\tbyte[] decodeJdkPBE = securityJdkPBE2.decrypt(encodeJdkPBE);\r\n\tSystem.out.println("JDK PBE\u89e3\u5bc6\uff1a" + new String(decodeJdkPBE));\r\n\r\n\tSecurityPBE securityBcPBE = SecurityPBE.getInstance(password, SecurityDES3.DES3_MODE_BC);\r\n\tbyte[] encodeBcPBE = securityBcPBE.encrypt(src.getBytes());\r\n\tSystem.out.println("bouncyCastle PBE\u52a0\u5bc6\uff1a" + Base64.getEncoder().encode(encodeBcPBE));\r\n\tbyte[] decodeBcPBE = securityBcPBE.decrypt(encodeBcPBE);\r\n\tSystem.out.println("bouncyCastle PBE\u89e3\u5bc6\uff1a" + new String(decodeBcPBE));\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"mac",children:"MAC"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"\u6d88\u606f\u6458\u8981\u7b97\u6cd5\u2014\u2014MAC\r\nMAC(Message Authentication Code)\uff0c\u517c\u5bb9\u4e86MD\u548cSHA\u7684\u7279\u6027\uff0c\u5e76\u4e14\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u5bc6\u94a5\u3002\u56e0\u6b64MAC\u4e5f\u79f0\u4e3aHMAC\uff08keyed-Hash Message Authentication Code\uff09\u542b\u6709\u5bc6\u94a5\u7684\u6563\u5217\u51fd\u6570\u7b97\u6cd5\u3002\r\nMD\u7cfb\u5217\uff1aHmacMD2\u3001HmacMD4\u3001HmacMD5\r\nSHA\u7cfb\u5217\uff1aHmacSHA1\u3001HmacSHA224\u3001HmacSHA256\u3001HmacSHA384\u3001HmacSHA512\n"})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package org.jeecg.modules.p14.key;\r\n\r\nimport java.security.InvalidKeyException;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport javax.crypto.Mac;\r\nimport javax.crypto.SecretKey;\r\nimport javax.crypto.spec.SecretKeySpec;\r\nimport org.apache.commons.codec.DecoderException;\r\nimport org.apache.commons.codec.binary.Hex;\r\nimport org.bouncycastle.crypto.digests.MD5Digest;\r\nimport org.bouncycastle.crypto.macs.HMac;\r\nimport org.bouncycastle.crypto.params.KeyParameter;\r\n\r\npublic class SecurityMac {\r\n    /**\r\n     * MAC(Message Authentication\r\n     * Code)\uff0c\u517c\u5bb9\u4e86MD\u548cSHA\u7684\u7279\u6027\uff0c\u5e76\u4e14\u5728\u5b83\u4eec\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86\u5bc6\u94a5\u3002\u56e0\u6b64MAC\u4e5f\u79f0\u4e3aHMAC\uff08keyed-Hash Message\r\n     * Authentication Code\uff09\u542b\u6709\u5bc6\u94a5\u7684\u6563\u5217\u51fd\u6570\u7b97\u6cd5\u3002 MD\u7cfb\u5217\uff1aHmacMD2\u3001HmacMD4\u3001HmacMD5\r\n     * SHA\u7cfb\u5217\uff1aHmacSHA1\u3001HmacSHA224\u3001HmacSHA256\u3001HmacSHA384\u3001HmacSHA512\r\n     * \u4f8b\u5982\uff1a\u5e38\u7528\u7684Linux\u5ba2\u6237\u7aefSecurityCRT\r\n     */\r\n    \r\n    private static String privateKey = "aabbccddee";\r\n    \r\n    /**\r\n     * HmacMD5\u52a0\u5bc6\u7b97\u6cd5\r\n     * @return\r\n     */\r\n    public static String jdkHmacMD5(String src) {\r\n        byte[] hmacMD5Bytes = null;\r\n        try {\r\n            // 1.\u5f97\u5230\u5bc6\u94a5\r\n//            KeyGenerator keyGenerator = KeyGenerator.getInstance("HmacMD5");\r\n//            SecretKey secretKey = keyGenerator.generateKey();// \u751f\u6210\u5bc6\u94a5\r\n//            byte[] key = secretKey.getEncoded();//\u83b7\u5f97\u5bc6\u94a5\r\n            // 2.\u8fd8\u539f\u5bc6\u94a5\r\n            byte[] privKey = Hex.decodeHex(privateKey.toCharArray());\r\n            SecretKey restoreSecretKey = new SecretKeySpec(privKey, "HmacMD5");\r\n            // 3.\u4fe1\u606f\u6458\u8981\r\n            Mac mac = Mac.getInstance(restoreSecretKey.getAlgorithm());// \u5b9e\u4f8b\u5316mac\r\n            mac.init(restoreSecretKey);// \u521d\u59cb\u5316mac\r\n            hmacMD5Bytes = mac.doFinal(src.getBytes());// \u6267\u884c\u6458\u8981\r\n        } catch (NoSuchAlgorithmException e) {\r\n            e.printStackTrace();\r\n        } catch (DecoderException e) {\r\n            e.printStackTrace();\r\n        } catch (InvalidKeyException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return Hex.encodeHexString(hmacMD5Bytes);\r\n    }\r\n    \r\n    /**\r\n     * HmacMD5\u52a0\u5bc6\u7b97\u6cd5\r\n     * @return\r\n     */\r\n    public static String bouncyCastleHmacMD5(String src) {\r\n        HMac hmac = new HMac(new MD5Digest());\r\n        //\u751f\u6210\u5bc6\u94a5\u7684\u65f6\u5019\u4ee5aabbccddee\u4e3a\u57fa\u51c6\r\n        hmac.init(new KeyParameter(org.bouncycastle.util.encoders.Hex.decode(privateKey)));\r\n        hmac.update(src.getBytes(), 0, src.getBytes().length);\r\n        // \u6267\u884c\u6458\u8981\r\n        byte[]hmacMDdBytes = new byte[hmac.getMacSize()];\r\n        hmac.doFinal(hmacMDdBytes, 0);\r\n        return new String(org.bouncycastle.util.encoders.Hex.encode(hmacMDdBytes));\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Test\r\npublic void mac() {\r\n\tString src = "object-oriente";\r\n\tSystem.out.println("jdkHmacMD5:\\t" + SecurityMac.jdkHmacMD5(src));\r\n\tSystem.out.println("bcHmacMD5:\\t"+ SecurityMac.bouncyCastleHmacMD5(src));\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"\u54c8\u5e0c\u7b97\u6cd5",children:"\u54c8\u5e0c\u7b97\u6cd5"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"\u54c8\u5e0c\u7b97\u6cd5\u53ef\u4ee5\u7b80\u5355\u5206\u4e3a\u4e24\u7c7b"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"\u52a0\u5bc6\u54c8\u5e0c\u7b97\u6cd5"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"\u5b89\u5168\u6027\u8f83\u9ad8\u7684\u54c8\u5e0c\u7b97\u6cd5\uff0c\u5b83\u53ef\u4ee5\u63d0\u4f9b\u4e00\u5b9a\u7684\u6570\u636e\u5b8c\u6574\u6027\u4fdd\u62a4\u548c\u6570\u636e\u9632\u7be1\u6539\u80fd\u529b\uff0c\u80fd\u591f\u62b5\u5fa1\u4e00\u5b9a\u7684\u653b\u51fb\u624b\u6bb5\uff0c\u5b89\u5168\u6027\u76f8\u5bf9\u8f83\u9ad8\uff0c\u4f46\u6027\u80fd\u8f83\u5dee\uff0c\u9002\u7528\u4e8e\u5bf9\u5b89\u5168\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u666f\u3002\u4f8b\u5982 SHA2\u3001SHA3\u3001SM3\u3001RIPEMD-160\u3001BLAKE2\u3001SipHash \u7b49\u7b49"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"\u975e\u52a0\u5bc6\u54c8\u5e0c\u7b97\u6cd5"}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsx)(r.p,{children:"\u5b89\u5168\u6027\u76f8\u5bf9\u8f83\u4f4e\u7684\u54c8\u5e0c\u7b97\u6cd5\uff0c\u6613\u53d7\u5230\u66b4\u529b\u7834\u89e3\u3001\u51b2\u7a81\u653b\u51fb\u7b49\u653b\u51fb\u624b\u6bb5\u7684\u5f71\u54cd\uff0c\u4f46\u6027\u80fd\u8f83\u9ad8\uff0c\u9002\u7528\u4e8e\u5bf9\u5b89\u5168\u6027\u6ca1\u6709\u8981\u6c42\u7684\u4e1a\u52a1\u573a\u666f\u3002\u4f8b\u5982 CRC32\u3001MurMurHash3\u3001SipHash \u7b49\u7b49"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["\u9664\u4e86\u8fd9\u4e24\u79cd\u4e4b\u5916\uff0c\u8fd8\u6709\u4e00\u4e9b\u7279\u6b8a\u7684\u54c8\u5e0c\u7b97\u6cd5\uff0c\u4f8b\u5982\u5b89\u5168\u6027\u66f4\u9ad8\u7684",(0,t.jsx)(r.strong,{children:"\u6162\u54c8\u5e0c\u7b97\u6cd5"}),"\u3002"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"\u79c1\u94a5\u516c\u94a5\u7b7e\u8bc1\u52a0\u5bc6",children:"\u79c1\u94a5\u516c\u94a5\u7b7e\u8bc1\u52a0\u5bc6"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'//utf-8\u7f16\u7801/\u89e3\u5bc6\r\nString encode = URLEncoder.encode("\u6d4b\u8bd5", "UTF-8");\r\nString decode = URLDecoder.decode("\u6d4b\u8bd5", "UTF-8");\r\n\r\n//Private\u8f6c\u6210String\r\nBase64.getEncoder().encodeToString(privateKey.getEncoded());\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'//\u81ea\u5b9a\u4e49\u5b9e\u73b0 -- utf-8\u7f16\u7801/\u89e3\u5bc6\r\npublic class EncodingUtil {\r\n public static String decodeURIComponent(String s) {\r\n   if (s == null) {\r\n    return null;\r\n   }\r\n   String result = null;\r\n   try {\r\n    result = URLDecoder.decode(s, "UTF-8");\r\n   }catch (UnsupportedEncodingException e) {\r\n    result = s;\r\n   }\r\n   return result;\r\n }\r\n public static String encodeURIComponent(String s) {\r\n   String result = null;\r\n   try {\r\n     result = URLEncoder.encode(s, "UTF-8")\r\n               .replaceAll("\\\\+", "%20")\r\n               .replaceAll("\\\\%21", "!")\r\n               .replaceAll("\\\\%27", "\'")\r\n               .replaceAll("\\\\%28", "(")\r\n               .replaceAll("\\\\%29", ")")\r\n               .replaceAll("\\\\%7E", "~");\r\n   }catch (UnsupportedEncodingException e) {\r\n     result = s;\r\n   }\r\n   return result;\r\n } \r\n  private EncodingUtil() {\r\n   super();\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'/**\r\n * pfx\u83b7\u53d6\u79c1\u94a5\u522b\u540d\u7b49\u4fe1\u606f\r\n */\r\npublic static byte[] getPrivateKeyInfo(String content){\r\n    String keyAlias = null;\r\n    try{\r\n        KeyStore keyStore = KeyStore.getInstance("PKCS12");\r\n        FileInputStream fileInputStream = new FileInputStream(new ClassPathResource(PRIVATE_ADDRESS).getFile());\r\n        char[] nPassword = PRIVATE_PASSWORD.toCharArray();\r\n        keyStore.load(fileInputStream, nPassword);\r\n        fileInputStream.close();\r\n        log.info( "keystore type=" + keyStore.getType());\r\n        Enumeration<String> enumeration = keyStore.aliases();\r\n        if (enumeration.hasMoreElements()){\r\n            keyAlias = enumeration.nextElement();\r\n            log.info( "alias=[" + keyAlias + "]");\r\n        }\r\n        log.info( "is key entry=" + keyStore.isKeyEntry(keyAlias));\r\n        PrivateKey privateKey = (PrivateKey) keyStore.getKey(keyAlias, nPassword);\r\n        System.out.println("private: "+Base64.getEncoder().encodeToString(privateKey.getEncoded()));\r\n        Certificate cert = keyStore.getCertificate(keyAlias);\r\n        PublicKey publickey = cert.getPublicKey();\r\n        // \u5bfc\u51fa\u4e3a cer \u8bc1\u4e66\r\n        try {\r\n            FileOutputStream fos = new FileOutputStream("C:\\\\Users\\\\chenx\\\\Desktop\\\\test" + ".cer");\r\n            fos.write(cert.getEncoded());\r\n            fos.close();\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println("public: "+Base64.getEncoder().encodeToString(publickey.getEncoded()));\r\n        log.info( "cert class = " + cert.getClass().getName());\r\n        log.info( "cert = " + cert);\r\n        log.info( "public key = " + publickey);\r\n        log.info( "private key = " + privateKey);\r\n        //\u79c1\u94a5\u7b7e\u540d\r\n        byte[] signOne = sign(content, privateKey) ;\r\n        log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>\u7b7e\u540d\u540e>>>>>>>>>>>>\\n" + new String(Base64.getEncoder().encode(signOne)));\r\n        //\u516c\u94a5\u9a8c\u7b7e\r\n        boolean verifySign = verify(content,signOne,publickey);\r\n        log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\u9a8c\u7b7e\u7ed3\u679c>>>>>>>>>>>>>>>>\\n" + verifySign);\r\n        if (verifySign){\r\n            return signOne;\r\n        }\r\n    } catch (Exception e){\r\n        log.error(e.getMessage());\r\n    }\r\n    return new byte[0];\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'//\u79c1\u94a5\u7b7e\u540d\r\npublic static byte[] sign(String content, PrivateKey priKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\r\n    //\u8fd9\u91cc\u53ef\u4ee5\u4ece\u8bc1\u4e66\u4e2d\u89e3\u6790\u51fa\u7b7e\u540d\u7b97\u6cd5\u540d\u79f0\r\n    //Signature signature = Signature.getInstance(getSigAlgName(pubCert));\r\n    Signature signature = Signature.getInstance("SHA256withRSA");\r\n    signature.initSign(priKey);\r\n    signature.update(content.getBytes());\r\n    return signature.sign();\r\n}\r\n//\u516c\u94a5\u9a8c\u7b7e\r\npublic static boolean verify(String content, byte[] sign, PublicKey pubKey) throws NoSuchAlgorithmException, InvalidKeyException, SignatureException {\r\n    //\u8fd9\u91cc\u53ef\u4ee5\u4ece\u8bc1\u4e66\u4e2d\u89e3\u6790\u51fa\u7b7e\u540d\u7b97\u6cd5\u540d\u79f0\r\n    //Signature signature = Signature.getInstance(getSigAlgName(priCert));\r\n    Signature signature = Signature.getInstance("SHA256withRSA");\r\n    signature.initVerify(pubKey);\r\n    signature.update(content.getBytes());\r\n    return signature.verify(sign);\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'//\u53c2\u6570\u6392\u5e8f -- \u6309\u5b57\u6bcd\u987a\u5e8f\r\nprivate static String getSordBaseParamsStr(String jose,String nonce,String timestamp) {\r\n    Map<String,String> params = getHeaderMaps(nonce,timestamp);\r\n    params.put("jose", jose);\r\n    TreeMap<String, String> sorted = new TreeMap<>(params);\r\n    Set<String> keys = params.keySet();\r\n    for (String key : keys) {\r\n        sorted.put(key, params.get(key));\r\n    }\r\n    StringBuilder builder = new StringBuilder();\r\n    for (Map.Entry<String, String> entry : sorted.entrySet()) {\r\n        if (builder.length() > 0) {\r\n            builder.append("&");\r\n        }\r\n        builder.append(entry.getKey()).append("=");\r\n        if (null != entry.getValue()) {\r\n            builder.append(entry.getValue());\r\n        }\r\n\r\n    }\r\n    log.info("*******sb.tostring:" + builder.toString());\r\n    return builder.toString();\r\n}\n'})}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'/**\r\n     * \u83b7\u53d6\u79c1\u94a5\u522b\u540d\u7b49\u4fe1\u606f\r\n     */\r\npublic static PrivateKey getPrivateKeyInfo() {\r\n    String privKeyFileString = SHA256WithRSASignatureUtil.PRIVATE_ADDRESS;\r\n    String privKeyPswdString = SHA256WithRSASignatureUtil.PRIVATE_PASSWORD;\r\n    String keyAlias = null;\r\n    try\r\n    {\r\n        KeyStore keyStore = KeyStore.getInstance( "PKCS12");\r\n        FileInputStream fileInputStream = new FileInputStream(new ClassPathResource(privKeyFileString).getFile());\r\n        char[] nPassword = privKeyPswdString.toCharArray();\r\n        keyStore.load(fileInputStream, nPassword);\r\n        fileInputStream.close();\r\n        log.info( "keystore type=" + keyStore.getType());\r\n        Enumeration<String> enumeration = keyStore.aliases();\r\n        if (enumeration.hasMoreElements())\r\n        {\r\n            keyAlias = enumeration.nextElement();\r\n            log.info( "alias=[" + keyAlias + "]");\r\n        }\r\n        log.info( "is key entry=" + keyStore.isKeyEntry(keyAlias));\r\n        return  (PrivateKey) keyStore.getKey(keyAlias, nPassword);\r\n    } catch (Exception e) {\r\n        log.error("-------\u83b7\u53d6\u79c1\u94a5\u5931\u8d25------",e);\r\n        throw new JeecgBootException("\u83b7\u53d6\u79c1\u94a5\u5931\u8d25");\r\n    }\r\n}\r\n\r\n\r\n/**\r\n     * \u83b7\u53d6\u516c\u94a5\u522b\u540d\u7b49\u4fe1\u606f\r\n     */\r\npublic static PublicKey getPublicKeyInfo()  {\r\n    String privKeyFileString = SHA256WithRSASignatureUtil.PRIVATE_ADDRESS;\r\n    String privKeyPswdString = SHA256WithRSASignatureUtil.PRIVATE_PASSWORD;\r\n    String keyAlias = null;\r\n    try{\r\n        KeyStore keyStore = KeyStore.getInstance( "PKCS12");\r\n        FileInputStream fileInputStream = new FileInputStream(new ClassPathResource(privKeyFileString).getFile());\r\n        char[] nPassword = privKeyPswdString.toCharArray();\r\n        keyStore.load(fileInputStream, nPassword);\r\n        fileInputStream.close();\r\n        log.info( "keystore type=" + keyStore.getType());\r\n        Enumeration<String> enumeration = keyStore.aliases();\r\n        if (enumeration.hasMoreElements()) {\r\n            keyAlias = enumeration.nextElement();\r\n            log.info( "alias=[" + keyAlias + "]");\r\n        }\r\n        return keyStore.getCertificate(keyAlias).getPublicKey();\r\n    } catch (Exception e) {\r\n        log.error("------\u83b7\u53d6\u516c\u94a5\u5931\u8d25-----",e);\r\n        throw new JeecgBootException("\u83b7\u53d6\u516c\u94a5\u5931\u8d25");\r\n    }\r\n}\r\n\r\n/**\r\n     * \u52a0\u5bc6\u6570\u636e\r\n     * @param publicKey\r\n     * @param payload\r\n     * @return\r\n     * @throws Exception\r\n     */\r\nprivate static String jweEncryption(Key publicKey, String payload)\r\n\r\n    throws Exception {\r\n\r\n    System.out.println("Payload before encryption :: " + payload);\r\n\r\n    /*Encryption*/\r\n\r\n    JWEHeader header = new JWEHeader.Builder(JWEAlgorithm.RSA_OAEP, EncryptionMethod.A256GCM).build();\r\n\r\n\r\n    JWEEncrypter encryptedJWE = new RSAEncrypter((RSAPublicKey) publicKey);\r\n    JWEObject jweObject = new JWEObject(header, new Payload(getSignedContent(payload)));\r\n\r\n    jweObject.encrypt(encryptedJWE);\r\n\r\n\r\n    return jweObject.serialize();\r\n\r\n}\r\n\r\npublic static JWSObject getSignedContent(String content) {\r\n    Payload contentPayload = new Payload(content);\r\n\r\n    try {\r\n        RSASSASigner rsa = new RSASSASigner(getPrivateKeyInfo());\r\n        JWSHeader header = new JWSHeader(JWSAlgorithm.RS256);\r\n        JWSObject jws = new JWSObject(header, contentPayload);\r\n        jws.sign(rsa);\r\n        return jws;\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\r\n\r\nprivate static String decryptJWE(String data){\r\n    JWEObject jweObject;\r\n    try {\r\n        jweObject = JWEObject.parse(data);\r\n        // Decrypt with shared key\r\n        jweObject.decrypt(new RSADecrypter(getPrivateKeyInfo()));\r\n\r\n        // Extract payload\r\n        SignedJWT signedJWT = jweObject.getPayload().toSignedJWT();\r\n\r\n        if (signedJWT.verify(new RSASSAVerifier((RSAPublicKey) getPublicKeyInfo()))) {\r\n            //\u89e3\u5bc6\u6570\u636e\r\n            return jweObject.getPayload().toString();\r\n        }\r\n    } catch (ParseException | JOSEException e) {\r\n        log.error(String.valueOf(e));\r\n    }\r\n\r\n    return null;\r\n}\n'})})]})}function l(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>c,x:()=>s});var t=n(6540);const i={},a=t.createContext(i);function c(e){const r=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(a.Provider,{value:r},e.children)}}}]);